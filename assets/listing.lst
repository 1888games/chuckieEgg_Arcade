# file opened: main.asm 
  1   0000              // TOOO:
  2   0000
  3   0000                  ; can you step off platform onto a lift?
  4   0000                  ; can you jump up to ladder gap?
  5   0000                  ; how much leeway on platform jumps? extra pixel of snap?
  6   0000
  7   0000                  device zxspectrum48                                                                              ;allows savebin to work for creating the binaries - at the end of the file
  8   0000                                                                                                                                  ;instead of using OUTPUT before each org - just slightly easier to manage
  9   0000                  include "scripts/data/memory.asm"
# file opened: scripts/data/memory.asm
  1+  0000              RST_38H:                              equ $ff            ;constant for RST 38H instruction for setting vsync interrupt
  2+  0000              irq_enable:                           equ $5000           ;irq enable location in memory map, set 1 to enable 0 to disable
  3+  0000              watchdog:                             equ $50c0           ;watchdog - if not reset every few frames cpu resets - forcing a re-boot known as the watchdog barking
  4+  0000              flip_screen_addr:                     equ $5003            ;if value 0 then normal tilemap, 1 forces flipped tilemap (does not affect sprites)
  5+  0000              hardware_io_area:                     equ $5000             ;hardware mapped memory i/o base
  6+  0000
  7+  0000              tile_ram_play_area:                   equ $4040            ;main tilemap area starts here (top right)-  addr increase vertically down from top - top right tile
  8+  0000              tile_ram_play_area_left:       		  equ $43a0            ;main tilemap area top left tile
  9+  0000              tile_ram_top_area:                    equ $43c0            ;top two rows above tilemap area- addr increase horizontally left from right
 10+  0000              tile_ram_play_area_last:        	  equ $43bf            ;last address of main player area (bottom left corner)
 11+  0000              tile_ram_top_vis:                     equ $43c2             ;first two and last two tiles not visible in each of 2 rows
 12+  0000              tile_ram_top_vis_line1:               equ $43dd              ;top left of visible top row sub to move to next column to right
 13+  0000              tile_ram_top_vis_line2:               equ $43fd             ;second text row at top
 14+  0000              tile_ram_start:                       equ $4000           ;base address of tile ram
 15+  0000              pallete_ram_start:                    equ $4400           ;base address of pallete ram
 16+  0000              pallete_ram_main:                     equ $4440           ;main video area pallete start (after first two rows)
 17+  0000              tile_ram_bot_area:                    equ $4000           ;bottom two rows below tilemap area- addr increase horizontally left from right
 18+  0000              tile_ram_bot_vis:                     equ $4002           ;first two and last two tiles not visible in each of 2 rows
 19+  0000              tile_ram_bot_vis_line1:               equ $401d           ;top left of visible bottom row sub to move to next column to right
 20+  0000              tile_ram_bot_vis_line2:               equ $403d           ;top left of last border row
 21+  0000              user_ram_start:                       equ $4c00            ;start of user allocated RAM
 22+  0000              ram_top:                              equ $4ff0            ;this is where the stack needs to start at
 23+  0000
 24+  0000
 25+  0000              ;-note 8 sprite registers exist but only the middle 6 are actually used by the hardware
 26+  0000              ; $4ff2-3,$4ff4-5,$4ff6-7,$4ff8-9,$4ffa-b,$4ffc-d - for the spritenum, flip and palette
 27+  0000              ; $5062-3,$5064-5,$5066-7,$5068-9,$506a-b,$506c-d - for the x and y positions
 28+  0000
 29+  0000
 30+  0000              sprite_reg:                           equ $4ff0          ;sprite registers start here first byte is number bits 7-2, bit 1 is x flip, bit 0 is y flip                                                                                                                      ;second byte lower nibble is pallete to use for sprite
 31+  0000              spriteXY_reg:                         equ $5060          ;2 bytes starting here for each sprite holding x and y positions on screen
 32+  0000
 33+  0000
 34+  0000
 35+  0000              lives_location:						  equ $4030
 36+  0000              level_location:						  equ $403B
 37+  0000              flowers_location:					  equ $43F0
 38+  0000
# file closed: scripts/data/memory.asm
 10   0000                  include "scripts/data/constants.asm"
# file opened: scripts/data/constants.asm
  1+  0000
  2+  0000
  3+  0000
  4+  0000              start_lives:		equ 5
  5+  0000
  6+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  0000              spr_num:                equ $0            ;sprite number from rom 5f most significant 6 bits bit 1 x flip, bit 0 y flip
  8+  0000              spr_pal:                equ $1             ;palette for sprite - lower nibble only
  9+  0000              spr_x:                  equ $10             ;x position of sprite
 10+  0000              spr_y:                  equ $11             ;y position of sprite
 11+  0000              spr_vel_x:              equ $18              ;x velocity of sprite
 12+  0000              spr_vel_y:              equ $19             ;y velocty of sprite
 13+  0000              spr_tile_addr:          equ $24              ;tile address sprite occupies (2 bytes)
 14+  0000              spr_tile_x:             equ $30              ;x tile position (0,0) is top right corner
 15+  0000              spr_tile_y:             equ $31               ;y tile position (27,31) is bottom left corner
 16+  0000              flipx:                  equ 1                                                                ;x flip bit for sprites
 17+  0000              flipy:                  equ 0
 18+  0000
 19+  0000              NUM_LEVELS:      equ 8
 20+  0000
 21+  0000              snd_en:       	equ         $5001  ; 0x9041 for Pengo
 22+  0000
 23+  0000
 24+  0000              invincible_time:	equ 	80
 25+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 26+  0000              ; colour pallete constants for pen 3 colour
 27+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 28+  0000              black:               	equ 0;                (hidden)
 29+  0000              red:                 	equ 1;                (blinky)
 30+  0000              pink:                	equ 3;                (pinky)
 31+  0000              cyan:                	equ 5;                (inky)
 32+  0000              orange:              	equ 7;                (clyde)
 33+  0000              yellow:              	equ 9;                (pac-man)
 34+  0000              grey:                	equ $f;                (off-white)
 35+  0000              blue:                	equ $10;        (scared ghost)
 36+  0000              brown:               	equ $15;        (poo ghost)
 37+  0000
 38+  0000              palette_white_blue_red 		equ 1
 39+  0000              palette_white_blue_pink 	equ 3
 40+  0000              palette_white_blue_cyan 	equ 5
 41+  0000              palette_white_blue_orange	equ 7
 42+  0000              palette_blue_red_yellow		equ 9
 43+  0000              palette_white_black_pink	equ 14
 44+  0000              palette_red_green_white		equ 15
 45+  0000              palette_pink_black_blue		equ 16
 46+  0000              palette_green_blue_pink		equ 17
 47+  0000              palette_green_white_red		equ 18
 48+  0000              palette_red_orange_white	equ 20
 49+  0000              palette_orange_green_orange equ 21
 50+  0000              palette_yellow_blue_white  equ 22
 51+  0000              palette_dgreen_green_white  equ 23
 52+  0000              palette_cyan_pink_yellow	equ 24
 53+  0000              palette_white_blue_black 	equ 25
 54+  0000
 55+  0000              palette_white_pink_red		equ 29
 56+  0000              palette_pink_black_white	equ 31
 57+  0000
 58+  0000              walk_speed_pixel	equ	 1
 59+  0000              walk_speed_frac equ	    7
 60+  0000
 61+  0000              air_speed_frac equ		 201
 62+  0000
 63+  0000              start_hen_speed  equ 16
 64+  0000
 65+  0000              hen_walk_sprite equ 9 * 4
 66+  0000              hen_climb_sprite  equ 11 * 4
 67+  0000              hen_eat_sprite equ 10 *4
 68+  0000
 69+  0000              gravity_force equ			20
 70+  0000
 71+  0000              jump_height equ 11
 72+  0000
 73+  0000              jump_left_state equ 1
 74+  0000              jump_right_state equ 2
 75+  0000              jump_up_state equ 0
 76+  0000
 77+  0000              time_frames		equ 8
 78+  0000
 79+  0000              ;some constants for mode setting
 80+  0000              title_mode:                equ $1
 81+  0000              game_mode:                equ $2
 82+  0000              game_over:                equ $4
 83+  0000              life_lost:				equ $8
 84+  0000              complete_mode:		equ 16
 85+  0000              number_mode:				equ 32
 86+  0000              high_score_mode 	equ 64
 87+  0000
 88+  0000
 89+  0000              MAX_ENEMIES:                    equ 5
 90+  0000              GHOST_FRAME_TIME:               equ 6
 91+  0000              BAT_FRAME_TIME:                 equ 40
 92+  0000              SPIDER_FRAME_TIME:              equ 3
 93+  0000              MAX_MACHINES:					equ 4
 94+  0000
 95+  0000              colour_girder:		equ palette_blue_red_yellow
 96+  0000
 97+  0000              LEFT:				 equ $0
 98+  0000              RIGHT:				 equ $1
 99+  0000              UP:					 equ $2
100+  0000              DOWN:				 equ $6
101+  0000
102+  0000              tile_af_logo:		equ $10
103+  0000              tile_cage:			equ $90
104+  0000              tile_platform:  	equ $F0
105+  0000              tile_ladder_left	equ $F1
106+  0000              tile_ladder_right:	equ $F2
107+  0000              tile_seed:			equ $F3
108+  0000              tile_egg:			equ $E3
109+  0000
110+  0000              tile_bonus:			equ $E5
111+  0000              tile_level:			equ $E8
112+  0000              tile_score:			equ $F5
113+  0000              tile_player:		equ $F8
114+  0000              tile_time:			equ $FD
115+  0000
116+  0000              tile_arlasoft:	    equ $A4
117+  0000
118+  0000              tile_logo_c:		equ $C4
119+  0000              tile_logo_h:		equ $C6
120+  0000              tile_logo_u:		equ $C8
121+  0000              tile_logo_k:		equ $CA
122+  0000              tile_logo_e:		equ $CC
123+  0000              tile_logo_g:		equ $CE
124+  0000              tile_logo_i:		equ $AE
125+  0000
126+  0000              tile_copyright:		equ $0A
127+  0000
128+  0000              tile_egg_1:			equ $60
129+  0000              tile_egg_2:			equ $62
130+  0000
131+  0000
132+  0000              transition_delay 	equ 4
133+  0000
134+  0000              mother_speed_change  equ 3
135+  0000
136+  0000
137+  0000              tile_lift_start  = $94
138+  0000              tile_lift_end = $9E
139+  0000
140+  0000              tile_roof:				equ $9B
141+  0000              tile_wall:				equ $63
142+  0000              tile_wall_end:			equ $60
143+  0000              tile_wall_down:			equ $66
144+  0000              tile_wood_floor:		equ $92
145+  0000              tile_wood_floor_end:	equ $93
146+  0000              tile_girder:			equ $90
147+  0000              tile_girder_end:		equ $91
148+  0000              tile_back_wall:			equ $80
149+  0000              tile_back_wall_end:	    equ $A2
150+  0000              tile_winch_support:		equ $88
151+  0000              tile_winch_top_left:	equ $6E
152+  0000              tile_winch_top_right:	equ $6F
153+  0000              tile_winch_bot_left:	equ $7E
154+  0000              tile_winch_bot_right:	equ $7F
155+  0000              tile_winch_cable:		equ $B0
156+  0000              tile_basket_top_left:	equ $96
157+  0000              tile_basket_top_right:	equ $97
158+  0000              tile_basket_bot_left:	equ $98
159+  0000              tile_basket_bot_right:	equ $99
160+  0000
161+  0000              tile_jammy_dodger:		equ $87
162+  0000              tile_arcade_1:			equ $10
163+  0000              tile_arcade_2:			equ $18
164+  0000              tile_peek:				equ $A4
165+  0000              tile_nail:				equ $7B
166+  0000              tile_key:				equ $77
167+  0000              tile_arcade_left:		equ $9C
168+  0000              tile_arcade_left2:		equ $FE
169+  0000
170+  0000              tile_richard:			equ $8C
171+  0000
172+  0000              tile_arcade_right:		equ $9D
173+  0000              tile_arcade_right2:		equ $FF
174+  0000
175+  0000              tile_spider:			equ $F8
176+  0000
177+  0000              tile_door_right:		equ $25
178+  0000              tile_handle_right:		equ $24
179+  0000              tile_door_left:			equ $27
180+  0000              tile_handle_left:		equ $26
181+  0000              tile_big_key:			equ $6C
182+  0000              tile_big_key_icon:		equ $A6
183+  0000
184+  0000              tile_web_only_R:    equ $CE
185+  0000              tile_web_only_L:	equ $2E
186+  0000
187+  0000              tile_web_1:			equ $E8
188+  0000              tile_web_2:			equ $E9
189+  0000              tile_web_3:			equ $F8
190+  0000              tile_web_4:			equ $99
191+  0000
192+  0000              tile_web_5:			equ $EA
193+  0000              tile_web_6:			equ $EB
194+  0000              tile_web_7:			equ $FA
195+  0000              tile_web_8:			equ $FB
196+  0000              tile_neil:			equ $EC
197+  0000
198+  0000              web_colour:				equ palette_white_blue_red
199+  0000
200+  0000              copyright_symbol 		equ $3A
201+  0000
202+  0000              bat_sprite:				equ 48
203+  0000              ghost_sprite:			equ 8
204+  0000              spider_sprite:			equ 0
205+  0000
206+  0000
207+  0000              base_push_time:				equ 12
208+  0000
209+  0000
210+  0000              STATE_IDLE:						EQU 0
211+  0000              STATE_WALKING:					EQU 1
212+  0000              STATE_JUMPING:					EQU 2
213+  0000              STATE_FALLING:					EQU 3
214+  0000              STATE_CLIMBING:					EQU 4
215+  0000              STATE_CROUCHING:				EQU 5
216+  0000              STATE_PUSHING:					EQU 6
217+  0000
218+  0000              right_screen_edge:				equ 54
219+  0000
220+  0000              horizontal:	equ 1
221+  0000              vertical:	equ 0
222+  0000
223+  0000
224+  0000              one_floor:      equ 5
225+  0000              two_floors:     equ 10
226+  0000              three_floors:   equ 15
227+  0000              four_floors:    equ 20
228+  0000              five_floors:    equ 25
229+  0000
230+  0000              floor_1:        equ 27
231+  0000              floor_2:        equ 22
232+  0000              floor_3:        equ 17
233+  0000              floor_4:        equ 12
234+  0000              floor_5:        equ 7
235+  0000              floor_0:		equ 32
236+  0000
237+  0000
238+  0000              harry_idle_frame:	 	equ 0
239+  0000
240+  0000              harry_walk_frame:		equ 0
241+  0000
242+  0000              harry_crouch_frame:		equ 40
243+  0000              harry_fall_frame:		equ 1
244+  0000              harry_jump_frame:		equ 1
245+  0000              harry_climb_frame:		equ 2
246+  0000
247+  0000              harry_push_frame:		equ 52
248+  0000
249+  0000              blank_tile:					equ $40
250+  0000
251+  0000
252+  0000
253+  0000              column_27					equ $040
254+  0000              column_26					equ $060
255+  0000              column_25					equ $080
256+  0000              column_24					equ $0A0
257+  0000              column_23					equ $0C0
258+  0000              column_22					equ $0E0
259+  0000              column_21					equ $100
260+  0000              column_20					equ $120
261+  0000              column_19					equ $140
262+  0000              column_18					equ $160
263+  0000              column_17					equ $180
264+  0000              column_16					equ $1A0
265+  0000              column_15					equ $1C0
266+  0000              column_14					equ $1E0
267+  0000              column_13					equ $200
268+  0000              column_12					equ $220
269+  0000              column_11					equ $240
270+  0000              column_10					equ $260
271+  0000              column_9					equ $280
272+  0000              column_8					equ $2A0
273+  0000              column_7					equ $2C0
274+  0000              column_6					equ $2E0
275+  0000              column_5					equ $300
276+  0000              column_4					equ $320
277+  0000              column_3					equ $340
278+  0000              column_2					equ $360
279+  0000              column_1					equ $380
280+  0000              column_0					equ $3A0
281+  0000
282+  0000
283+  0000              row_0	equ 0
284+  0000              row_1	equ 1
285+  0000              row_2	equ 2
286+  0000              row_3	equ 3
287+  0000              row_4	equ 4
288+  0000              row_5	equ 5
289+  0000              row_6	equ 6
290+  0000              row_7	equ 7
291+  0000              row_8	equ 8
292+  0000              row_9	equ 9
293+  0000              row_10	equ 10
294+  0000              row_11	equ 11
295+  0000              row_12  equ 12
296+  0000              row_13	equ 13
297+  0000              row_14	equ 14
298+  0000              row_15	equ 15
299+  0000              row_16	equ 16
300+  0000              row_17	equ 17
301+  0000              row_18	equ 18
302+  0000              row_19	equ 19
303+  0000              row_20	equ 20
304+  0000              row_21	equ 21
305+  0000              row_22	equ 22
306+  0000              row_23	equ 23
307+  0000              row_24	equ 24
308+  0000              row_25	equ 25
309+  0000              row_26	equ 26
310+  0000              row_27	equ 27
311+  0000              row_28	equ 28
312+  0000              row_29	equ 29
313+  0000              row_30	equ 30
314+  0000              row_31	equ 31
315+  0000              row_32	equ 32
316+  0000              row_33	equ 33
317+  0000              row_34	equ 34
318+  0000              row_35	equ 35
319+  0000              row_36	equ 36
320+  0000              row_37	equ 37
321+  0000
322+  0000
323+  0000
324+  0000              title_legend_column 	equ column_10
325+  0000              title_key_column 		equ column_7
326+  0000              title_legend_row		equ 16
327+  0000
328+  0000
329+  0000              grid_rows				equ 29
330+  0000              grid_columns			equ 20
331+  0000
332+  0000
333+  0000              EFFECT_TABLE_1  EQU     EffectTable1    ; channel 1 effects. 8 bytes per effect
334+  0000              EFFECT_TABLE_2  EQU     EffectTable2    ; channel 2 effects. 8 bytes per effect
335+  0000              EFFECT_TABLE_3  EQU     EffectTable3    ; channel 3 effects. 8 bytes per effect
336+  0000
# file closed: scripts/data/constants.asm
 11   0000                  include "scripts/data/ram.asm"
# file opened: scripts/data/ram.asm
  1+  0000
  2+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  0000              ; data to be held in ram defined here                                 ;
  5+  0000              ; allocation of bytes for ram area assembler calculates                              ;
  6+  0000              ; addresses based on org statement and user_ram_start ($4c00)                  ;
  7+  0000              ; these are in affect our variables                                                                          ;
  8+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9+  0000              ; db define byte (8 bit value) creates space and sets value
 10+  0000              ; dw define word (16 bit value) creates space and sets value
 11+  0000              ; ds declares space for a number of bytes (often specified using a calculation for the assembler)
 12+  0000              ; defm defines a byte
 13+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 14+  0000
 15+  0000
 16+  0000                      org user_ram_start                             ;allocate this data at user_ram_start $4c00
 17+  4C00
 18+  4C00
 19+  4C00
 20+  4C00
 21+  4C00
 22+  4C00              NUM_SPRITES:                    equ 8
 23+  4C00              NUM_HIGH_SCORES                 equ 6
 24+  4C00              ENEMY_DATA_SIZE:                equ 8
 25+  4C00
 26+  4C00
 27+  4C00
 28+  4C00              hen_tile_address:               equ 0
 29+  4C00              hen_centred_x:                   equ 2
 30+  4C00              hen_direction:                  equ 3
 31+  4C00              hen_state:                      equ 4
 32+  4C00              hen_timer:                      equ 5
 33+  4C00              hen_frame:                      equ 6
 34+  4C00              hen_centred_y:                 equ 7
 35+  4C00
 36+  4C00              HEN_DEAD:                       equ 0
 37+  4C00              HEN_WALKING:                    equ 1
 38+  4C00              HEN_CLIMBING:                   equ 2
 39+  4C00              HEN_EATING:                     equ 3
 40+  4C00
 41+  4C00              enemy_frac:                     equ 0
 42+  4C00              enemy_direction:                equ 1
 43+  4C00              enemy_speed_frac:               equ 2
 44+  4C00              enemy_speed_pixel:              equ 3
 45+  4C00              enemy_y:                        equ 4
 46+  4C00              enemy_type:                     equ 5
 47+  4C00              high_score_low_byte:            equ 3
 48+  4C00              high_score_med_byte:            equ 4
 49+  4C00              high_score_high_byte:           equ 5
 50+  4C00              high_score_init_1:              equ 0
 51+  4C00              high_score_init_2:              equ 1
 52+  4C00              high_score_init_3:              equ 2
 53+  4C00
 54+  4C00              viewing_high_score              equ 0
 55+  4C00              checking_high_score             equ 1
 56+  4C00              entering_high_score             equ 2
 57+  4C00
 58+  4C00
 59+  4C00              LIFT_DATA_SIZE = 4
 60+  4C00              NUM_LIFTS = 2
 61+  4C00
 62+  4C00              lift_tile_address               equ 0
 63+  4C00              lift_sprite_x                   equ 2
 64+  4C00              lift_sprite_y                   equ 3
 65+  4C00
 66+  4C00 00 00 00...  lift_data                       ds LIFT_DATA_SIZE * NUM_LIFTS
 67+  4C08
 68+  4C08 00           harry_sprite_y                    ds 1
 69+  4C09 00           harry_sprite_x                     ds 1
 70+  4C0A
 71+  4C0A 00 00 00...  hens:                           ds ENEMY_DATA_SIZE * (5)
 72+  4C32
 73+  4C32 00           joystick_state:                 db 0
 74+  4C33 00           start_state:                    db 0
 75+  4C34 00 00        attract_mode_address			ds 2
 76+  4C36 00           attract_mode_timer				ds 1
 77+  4C37 00           lives_lost_level				ds 1
 78+  4C38
 79+  4C38 00 00        time_remaining					ds 2
 80+  4C3A 00 00        bonus_remaining					ds 2
 81+  4C3C
 82+  4C3C 00           pal_timer                       ds 1
 83+  4C3D 00           busy 							ds 1
 84+  4C3E 00 00        hen_data_address                ds 2
 85+  4C40
 86+  4C40 00           mother_speed_x_frac				ds 1
 87+  4C41 00           mother_speed_x_pixel			ds 1
 88+  4C42 00           mother_speed_y_frac				ds 1
 89+  4C43 00           mother_speed_y_pixel			ds 1
 90+  4C44 00           mother_x_pos_frac               ds 1
 91+  4C45 00           mother_y_pos_frac               ds 1
 92+  4C46 00           mother_going_right              ds 1
 93+  4C47 00           mother_going_down               ds 1
 94+  4C48 00           mother_frame_timer:				ds 1
 95+  4C49
 96+  4C49 00           hen_over_ladder:                ds 1
 97+  4C4A 00           hen_can_go_up_ladder:           ds 1
 98+  4C4B 00           hen_can_go_down_ladder:         ds 1
 99+  4C4C 00           hen_blocked:                    ds 1
100+  4C4D 00           hen_speed:                      ds 1
101+  4C4E 00           hen_can_get_off_left:           ds 1
102+  4C4F 00           hen_can_get_off_right:          ds 1
103+  4C50 00           cooldown:                       ds 1
104+  4C51
105+  4C51
106+  4C51 00           lift_timer                      ds 1
107+  4C52 00           lift_y_offset                   ds 1
108+  4C53
109+  4C53
110+  4C53 00           hen_first_ladder:               ds 1
111+  4C54
112+  4C54              HIGH_SCORE_DATA_SIZE = 6
113+  4C54
114+  4C54 00 00 00...  high_scores:					ds NUM_HIGH_SCORES * HIGH_SCORE_DATA_SIZE
115+  4C78
116+  4C78 00           high_score_state:				ds 1
117+  4C79 00 00        high_score_address:				ds 2
118+  4C7B 00           high_score_index:				ds 1
119+  4C7C
120+  4C7C 00           high_score_colour				ds 1
121+  4C7D
122+  4C7D 00           force_colour:					ds 1
123+  4C7E 00 00 00 00  eggs_remaining:                 ds 4
124+  4C82 00           gravity:                        ds 1
125+  4C83
126+  4C83 00           gravity_applies:                ds 1
127+  4C84 00           jump_counter:                   ds 1
128+  4C85 00           fire_override:					ds 1
129+  4C86 00           is_attract_mode:				ds 1
130+  4C87 00           seconds_left:                   ds 1
131+  4C88 00           harry_land_timer                 ds 1
132+  4C89 00           possible_jump_direction:         ds 1
133+  4C8A 00           jump_direction:                 ds 1
134+  4C8B 00           stop_timer:						ds 1
135+  4C8C 00           current_bonus_level				ds 1
136+  4C8D
137+  4C8D 00           level_left:                     ds 1
138+  4C8E 00           level_right:                    db 0
139+  4C8F
140+  4C8F 00           level_type_id:					ds 1
141+  4C90 00           level_time_counter:				ds 1
142+  4C91 00           current_level_time:				ds 1
143+  4C92 00           level_hex:						ds 1
144+  4C93
145+  4C93 00           transition_timer				ds 1
146+  4C94 00           transition_progress				ds 1
147+  4C95
148+  4C95 00           number_hens						ds 1
149+  4C96 00           hens_to_spawn                   ds 1
150+  4C97 00           mother_active					ds 1
151+  4C98 00           mother_timer                    ds 1
152+  4C99
153+  4C99 00           ladder_off_chance               ds 1
154+  4C9A 00           ladder_half_chance              ds 1
155+  4C9B
156+  4C9B
157+  4C9B              MOTHER_CAGE         equ 0
158+  4C9B              MOTHER_FLYING       equ 1
159+  4C9B
160+  4C9B 00           mother_frame                    ds 1
161+  4C9C
162+  4C9C
163+  4C9C 00           jump_climb_straight				ds 1
164+  4C9D 00           bonus_reduce_counter			ds 1
165+  4C9E 00           time_reduce_timer				ds 1
166+  4C9F
167+  4C9F 00 00 00     last_score:                     ds 3
168+  4CA2 00           harry_invincible_timer:			ds 1
169+  4CA3
170+  4CA3 00           starting_lives                  ds 1
171+  4CA4 00           waitvsync:                      db 0                   ;if 1 then interrupt is finished and main loop can continue
172+  4CA5 FF           frame_counter:                  db 255                  ;value that increments every frame for stable animation and frame counts - doesn't reset just wraps so mods work consistently
173+  4CA6 00           frame_number:                   db 0                      ;holds a frame number in lsB and second counter in msB 60 to 0 resets to 60 when gets to zero
174+  4CA7 00           seconds_counter:                db 0                      ;quick ref to seconds part
175+  4CA8
176+  4CA8 00 00        map_address:                    ds 2
177+  4CAA 00           map_byte:                     ds 1
178+  4CAB 00           map_byte2:                     ds 1
179+  4CAC
180+  4CAC
181+  4CAC 00           save_reg:                       db 0                   ;temp storage for an 8 bit register
182+  4CAD 00 00        save_sp:                        dw 0                    ;storage area for stack when messing about with it
183+  4CAF                                  ;holds previous state in upper nibble and current state in lower nibble  IN1 $5000
184+  4CAF                                      ;holds current state of input byte IN1 - player 2 joystick and start buttons $5040
185+  4CAF 00           flip_screen:                    db 0                       ;holds status of flip screen (as i think the location $5003 is write only - it always reads back as ff)
186+  4CB0
187+  4CB0
188+  4CB0 00 00        temp_address:                   dw 0
189+  4CB2
190+  4CB2 00 00        msg_top_addr                    dw 0                    ;holds address of top changing display text
191+  4CB4 00 00        msg_one_pos:                    dw 0                     ;start addr of top text
192+  4CB6 00 00        msg_bot_addr:                   dw 0                     ;holds index of in bottom_list text to display at bottom of screen
193+  4CB8 00           bot_counter:                    db 0                     ;counter for bottom scrolling message display
194+  4CB9
195+  4CB9 00 00 00...  sprite_data:                    ds 4*NUM_SPRITES + 2*NUM_SPRITES + 2*NUM_SPRITES + 2*NUM_SPRITES                       ;space for the 6 sprites to store their sprite data
196+  4D09                                                                          ;4 bytes for sprite, pallete, x and y
197+  4D09
198+  4D09
199+  4D09 00           mode:                           db 0                      ;what mode is the system in 1 - title screen, 2 is game, 4 is end of game
200+  4D0A 00 00 00 00  high_score:                     ds 4                      ;current high score (again 4 bcd bytes)
201+  4D0E 00 00 00 00  current_score:                  ds 4                       ;space for current players score 4 bytes in bcd format (8 digits)
202+  4D12 00           game_time:                      db 0                       ;holds the game time
203+  4D13
204+  4D13 00           level_complete:                 ds 1
205+  4D14 00           player_lives:					db 0
206+  4D15
207+  4D15 00           life_lost_counter:				ds 1
208+  4D16 00 00        rand_data:						ds 2
209+  4D18 00           temp_byte:                     ds 1
210+  4D19 00           temp_byte2:						ds 1
211+  4D1A
212+  4D1A 00           x_speed_pixel:					ds 1
213+  4D1B 00           x_speed_frac:					ds 1
214+  4D1C
215+  4D1C 00           y_speed_pixel:					ds 1
216+  4D1D 00           y_speed_frac:					ds 1
217+  4D1E
218+  4D1E 00           y_pos_frac:						ds 1
219+  4D1F 00           x_pos_frac:						ds 1
220+  4D20 00           x_pos_offset:					ds 1
221+  4D21 00           y_pos_offset:					ds 1
222+  4D22 00           fire_last_frame:				ds 1
223+  4D23
224+  4D23 00           harry_going_right:				ds 1
225+  4D24
226+  4D24 00           spawn_x:						ds 1
227+  4D25 00           spawn_y:						ds 1
228+  4D26
229+  4D26 00           harry_state:						ds 1
230+  4D27 00           harry_start_frame:				ds 1
231+  4D28 00           harry_frame:						ds 1
232+  4D29 00           harry_special_frame:				ds 1
233+  4D2A 00           harry_face_right:				ds 1
234+  4D2B 00           harry_frame_timer:				ds 1
235+  4D2C 00           harry_frame_time:				ds 1
236+  4D2D 00           harry_max_frame:					ds 1
237+  4D2E 00           harry_frame_loop:                                ds 1
238+  4D2F 00           harry_over_ladder:				ds 1
239+  4D30 00           harry_can_climb_ladder          ds 1
240+  4D31 00           ladder_join_x:					ds 1
241+  4D32 00           moving_up_down:					ds 1
242+  4D33 00           harry_ladder_below				ds 1
243+  4D34 00           harry_ladder_above              ds 1
244+  4D35 00           harry_ladder_two_above            ds 1
245+  4D36 00           harry_exit_left:					ds 1
246+  4D37 00           harry_exit_right:				ds 1
247+  4D38 00           harry_tile_y:					ds 1
248+  4D39 00           harry_tile_x:					ds 1
249+  4D3A 00           walking_across_ladder			ds 1
250+  4D3B 00           harry_on_lift                   ds 1
251+  4D3C
252+  4D3C 00           harry_left_foot_block           ds 1
253+  4D3D 00           harry_right_foot_block          ds 1
254+  4D3E 00           harry_can_fall                  ds 1
255+  4D3F 00           harry_snap_ground               ds 1
256+  4D40 00           harry_land_ladder			    ds 1
257+  4D41
258+  4D41 00           blocked_jump_right:				ds 1
259+  4D42 00           blocked_jump_left:				ds 1
260+  4D43
261+  4D43
262+  4D43 00           tile_direction:                                 ds 1
263+  4D44
264+  4D44
265+  4D44 00           blocked_above:                                  ds 1
266+  4D45 00           blocked_below:                                  ds 1
267+  4D46 00           blocked_left:                                   ds 1
268+  4D47 00           blocked_right:                                  ds 1
269+  4D48
270+  4D48
271+  4D48 00           went_up_ladder:					ds 1
272+  4D49 00           went_down_ladder:				ds 1
273+  4D4A 00 00        harry_tile_address:				ds 2
274+  4D4C 00           song_number:                ds 1
275+  4D4D
276+  4D4D                                                                 ;y flip bit for sprites
277+  4D4D              sprite0:                                equ sprite_data                                                ;quick reference constants to load index registers with for sprite access
278+  4D4D              sprite1:                                equ sprite_data + 2
279+  4D4D              sprite2:                                equ sprite_data + 4
280+  4D4D              sprite3:                                equ sprite_data + 6
281+  4D4D              sprite4:                                equ sprite_data + 8
282+  4D4D              sprite5:                                equ sprite_data + $a
283+  4D4D              sprite6:                                equ sprite_data + $C
284+  4D4D              sprite7:                                equ sprite_data + $E
285+  4D4D              sprite_pos:                             equ sprite_data + spr_x
286+  4D4D              sprite_vels:                            equ sprite_data + spr_vel_x
287+  4D4D
288+  4D4D
289+  4D4D               org $4e8c
290+  4E8C
291+  4E8C              SoundDataStart:
292+  4E8C
293+  4E8C
294+  4E8C 00           CH1_FREQ0       ds 1   ; 20 bits
295+  4E8D 00           CH1_FREQ1      ds 1
296+  4E8E 00           CH1_FREQ2       ds 1
297+  4E8F 00           CH1_FREQ3       ds 1
298+  4E90 00           CH1_FREQ4      ds 1
299+  4E91 00           CH1_VOL         ds 1
300+  4E92 00           CH2_FREQ1       ds 1    ; 16 bits
301+  4E93 00           CH2_FREQ2       ds 1
302+  4E94 00           CH2_FREQ3       ds 1
303+  4E95 00           CH2_FREQ4      ds 1
304+  4E96 00           CH2_VOL        ds 1
305+  4E97 00           CH3_FREQ1       ds 1    ; 16 bits
306+  4E98 00           CH3_FREQ2      ds 1
307+  4E99 00           CH3_FREQ3       ds 1
308+  4E9A 00           CH3_FREQ4       ds 1
309+  4E9B 00           CH3_VOL         ds 1
310+  4E9C
311+  4E9C 00           CH1_E_NUM       ds 1    ; effects to play sequentially (bitmask)
312+  4E9D 00           CH1_E_1         ds 1    ; unused
313+  4E9E 00           CH1_E_CUR_BIT   ds 1   ; current effect
314+  4E9F 00           CH1_E_TABLE0   ds 1    ; table of parameters, initially copied from ROM
315+  4EA0 00           CH1_E_TABLE1    ds 1
316+  4EA1 00           CH1_E_TABLE2    ds 1
317+  4EA2 00           CH1_E_TABLE3    ds 1
318+  4EA3 00           CH1_E_TABLE4    ds 1
319+  4EA4 00           CH1_E_TABLE5    ds 1
320+  4EA5 00           CH1_E_TABLE6    ds 1
321+  4EA6 00           CH1_E_TABLE7    ds 1
322+  4EA7 00           CH1_E_TYPE      ds 1
323+  4EA8 00           CH1_E_DURATION  ds 1
324+  4EA9 00           CH1_E_DIR       ds 1
325+  4EAA 00           CH1_E_BASE_FREQ ds 1
326+  4EAB 00           CH1_E_VOL       ds 1
327+  4EAC
328+  4EAC 00           CH2_E_NUM       ds 1    ; effects to play sequentially (bitmask)
329+  4EAD 00           CH2_E_1         ds 1    ; unused
330+  4EAE 00           CH2_E_CUR_BIT   ds 1   ; current effect
331+  4EAF 00           CH2_E_TABLE0   ds 1    ; table of parameters, initially copied from ROM
332+  4EB0 00           CH2_E_TABLE1    ds 1
333+  4EB1 00           CH2_E_TABLE2    ds 1
334+  4EB2 00           CH2_E_TABLE3    ds 1
335+  4EB3 00           CH2_E_TABLE4    ds 1
336+  4EB4 00           CH2_E_TABLE5    ds 1
337+  4EB5 00           CH2_E_TABLE6    ds 1
338+  4EB6 00           CH2_E_TABLE7    ds 1
339+  4EB7 00           CH2_E_TYPE      ds 1
340+  4EB8 00           CH2_E_DURATION  ds 1
341+  4EB9 00           CH2_E_DIR       ds 1
342+  4EBA 00           CH2_E_BASE_FREQ ds 1
343+  4EBB 00           CH2_E_VOL       ds 1
344+  4EBC
345+  4EBC 00           CH3_E_NUM       ds 1    ; effects to play sequentially (bitmask)
346+  4EBD 00           CH3_E_1         ds 1    ; unused
347+  4EBE 00           CH3_E_CUR_BIT   ds 1   ; current effect
348+  4EBF 00           CH3_E_TABLE0   ds 1    ; table of parameters, initially copied from ROM
349+  4EC0 00           CH3_E_TABLE1    ds 1
350+  4EC1 00           CH3_E_TABLE2    ds 1
351+  4EC2 00           CH3_E_TABLE3    ds 1
352+  4EC3 00           CH3_E_TABLE4    ds 1
353+  4EC4 00           CH3_E_TABLE5    ds 1
354+  4EC5 00           CH3_E_TABLE6    ds 1
355+  4EC6 00           CH3_E_TABLE7    ds 1
356+  4EC7 00           CH3_E_TYPE      ds 1
357+  4EC8 00           CH3_E_DURATION  ds 1
358+  4EC9 00           CH3_E_DIR       ds 1
359+  4ECA 00           CH3_E_BASE_FREQ ds 1
360+  4ECB 00           CH3_E_VOL       ds 1
361+  4ECC
362+  4ECC
363+  4ECC 00           CH1_W_NUM       ds 1   ; wave to play (bitmask)
364+  4ECD 00           CH1_W_1        ds 1    ; unused
365+  4ECE 00           CH1_W_CUR_BIT ds 1    ; current wave
366+  4ECF 00           CH1_W_SEL       ds 1
367+  4ED0 00           CH1_W_4         ds 1
368+  4ED1 00           CH1_W_5         ds 1
369+  4ED2 00           CH1_W_OFFSET1   ds 1     ; address in ROM to find the next byte
370+  4ED3 00           CH1_W_OFFSET2  ds 1     ; (16 bits)
371+  4ED4 00           CH1_W_8         ds 1
372+  4ED5 00           CH1_W_9        ds 1
373+  4ED6 00           CH1_W_A         ds 1
374+  4ED7 00           CH1_W_TYPE      ds 1
375+  4ED8 00           CH1_W_DURATION  ds 1
376+  4ED9 00           CH1_W_DIR      ds 1
377+  4EDA 00           CH1_W_BASE_FREQ ds 1
378+  4EDB 00           CH1_W_VOL       ds 1
379+  4EDC
380+  4EDC 00           CH2_W_NUM       ds 1   ; wave to play (bitmask)
381+  4EDD 00           CH2_W_1        ds 1    ; unused
382+  4EDE 00           CH2_W_CUR_BIT ds 1    ; current wave
383+  4EDF 00           CH2_W_SEL       ds 1
384+  4EE0 00           CH2_W_4         ds 1
385+  4EE1 00           CH2_W_5         ds 1
386+  4EE2 00           CH2_W_OFFSET1   ds 1     ; address in ROM to find the next byte
387+  4EE3 00           CH2_W_OFFSET2  ds 1     ; (16 bits)
388+  4EE4 00           CH2_W_8         ds 1
389+  4EE5 00           CH2_W_9        ds 1
390+  4EE6 00           CH2_W_A         ds 1
391+  4EE7 00           CH2_W_TYPE      ds 1
392+  4EE8 00           CH2_W_DURATION  ds 1
393+  4EE9 00           CH2_W_DIR      ds 1
394+  4EEA 00           CH2_W_BASE_FREQ ds 1
395+  4EEB 00           CH2_W_VOL       ds 1
396+  4EEC
397+  4EEC 00           CH3_W_NUM       ds 1   ; wave to play (bitmask)
398+  4EED 00           CH3_W_1        ds 1    ; unused
399+  4EEE 00           CH3_W_CUR_BIT ds 1    ; current wave
400+  4EEF 00           CH3_W_SEL       ds 1
401+  4EF0 00           CH3_W_4         ds 1
402+  4EF1 00           CH3_W_5         ds 1
403+  4EF2 00           CH3_W_OFFSET1   ds 1     ; address in ROM to find the next byte
404+  4EF3 00           CH3_W_OFFSET2  ds 1     ; (16 bits)
405+  4EF4 00           CH3_W_8         ds 1
406+  4EF5 00           CH3_W_9        ds 1
407+  4EF6 00           CH3_W_A         ds 1
408+  4EF7 00           CH3_W_TYPE      ds 1
409+  4EF8 00           CH3_W_DURATION  ds 1
410+  4EF9 00           CH3_W_DIR      ds 1
411+  4EFA 00           CH3_W_BASE_FREQ ds 1
412+  4EFB 00           CH3_W_VOL       ds 1
413+  4EFC
414+  4EFC 00           SOUND_COUNTER   ds 1    ; counter, incremented each VBLANK
415+  4EFD 00                           ds 1
416+  4EFE
417+  4EFE
418+  4EFE
# file closed: scripts/data/ram.asm
 12   4EFE
 13   4EFE                  org     $0000
 14   0000
 15   0000 C3 8F 00         jp      start
 16   0003
 17   0003                  include "scripts/system/sound/rst.asm"
# file opened: scripts/system/sound/rst.asm
  1+  0003              	org $10
  2+  0010
  3+  0010 85           	add a, l
  4+  0011 6F           	ld l, a
  5+  0012 3E 00        	ld a, 0
  6+  0014 8C           	adc a, h
  7+  0015 67           	ld h, a
  8+  0016 7E           	ld a, (hl)
  9+  0017 C9           	ret
 10+  0018
 11+  0018              	org $18
 12+  0018
 13+  0018 78           	ld a, b
 14+  0019 87           	add a, a
 15+  001A D7           	rst $10
 16+  001B 5F           	ld e, a
 17+  001C 23           	inc hl
 18+  001D 56           	ld d, (hl)
 19+  001E EB           	ex de, hl
 20+  001F C9           	ret
 21+  0020
 22+  0020              	org $20
 23+  0020
 24+  0020 E1           	pop hl
 25+  0021 87           	add a, a
 26+  0022 D7           	rst $10
 27+  0023 5F           	ld e, a
 28+  0024 23           	inc hl
 29+  0025 56           	ld d, (hl)
 30+  0026 EB           	ex de, hl
 31+  0027 E9           	jp (hl)
 32+  0028
 33+  0028
# file closed: scripts/system/sound/rst.asm
 18   0028                  include "scripts/system/vblank.asm"
# file opened: scripts/system/vblank.asm
  1+  0028                                             org $38                                                                                ;assemble from $38 (where the vblank interrupt will jump to)
  2+  0038              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  0038              ; vertical blank interrupt routine
  4+  0038              ; interrupt generated when screen has finished drawing
  5+  0038              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  6+  0038              vblank:
  7+  0038
  8+  0038 F3                   di                                          ;disable any interrupts (so we don't get interrupted)
  9+  0039 F5                   push        af                                        ;save accumulator, flags and registers we are going to destroy
 10+  003A DD E5                push        ix
 11+  003C E5                   push        hl
 12+  003D D5                   push        de
 13+  003E C5                   push        bc
 14+  003F FD E5                push        iy
 15+  0041
 16+  0041 AF                   xor        a                                ;clear accumulator
 17+  0042 32 00 50             ld        (irq_enable),a                   ;disable ints on the board
 18+  0045 32 C0 50             ld        (watchdog),a                       ;reset the watchdog
 19+  0048
 20+  0048                      ;increment frame counter
 21+  0048 3A A5 4C             ld a,(frame_counter)                          ;get current value
 22+  004B 3C                   inc a                                          ;increment
 23+  004C 32 A5 4C             ld (frame_counter),a
 24+  004F
 25+  004F                      ;sort out frame counter
 26+  004F 2A A6 4C             ld hl,(frame_number)                             ;get 16 bit frame counter - l holds frame, h holds seconds
 27+  0052 2D                   dec l                                                 ;reduce number of frames by 1
 28+  0053 F2 59 00             jp p,dont_reset_frame_counter                      ;only reset if it goes negative
 29+  0056
 30+  0056
 31+  0056 2E 3B                ld l,$3b                                          ;load back up with 59
 32+  0058 24                   inc h                                           ;add one to seconds
 33+  0059
 34+  0059
 35+  0059              dont_reset_frame_counter:
 36+  0059 22 A6 4C             ld (frame_number),hl                           ;store new counter
 37+  005C
 38+  005C
 39+  005C
 40+  005C CD F6 05             call vblank1
 41+  005F
 42+  005F 3A 86 4C             ld a, (is_attract_mode)
 43+  0062 FE 01                cp 1
 44+  0064 CA 70 00             jp z, skipSound
 45+  0067
 46+  0067 CD 5E 04             call process_effect
 47+  006A CD AE 24             call process_wave
 48+  006D C3 70 00             jp useSound
 49+  0070
 50+  0070
 51+  0070
 52+  0070              skipSound:
 53+  0070                      ;call process_effect
 54+  0070
 55+  0070              useSound:
 56+  0070
 57+  0070
 58+  0070
 59+  0070
 60+  0070                      ; main vblank routines
 61+  0070 CD 05 24             call set_sprite_data                              ;copy sprite data over to registers
 62+  0073 CD 94 23             call input_manager                              ;update input states
 63+  0076                      ;call flip_input                                  ;check for screen flip inputs
 64+  0076              vbend:
 65+  0076 AF                   xor a                                               ;clear a
 66+  0077 32 C0 50             ld        (watchdog),a                             ;and reset the watchdog
 67+  007A 3C                   inc a                                              ;enable interrupts again
 68+  007B 32 00 50             ld (irq_enable),a                                  ; enable ints on the board
 69+  007E FD E1                pop        iy
 70+  0080 C1                   pop        bc                                      ;restore registers in reverse order of push
 71+  0081 D1                   pop        de
 72+  0082 E1                   pop        hl
 73+  0083 DD E1                pop        ix
 74+  0085 F1                   pop        af
 75+  0086 FB                   ei                                                ;enable interrupts again
 76+  0087 ED 4D                reti                                               ;return from interrupt
 77+  0089
 78+  0089
 79+  0089              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 80+  0089              ; rest frame number to start second counting from 0 frame
 81+  0089              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 82+  0089              reset_framenumber:
 83+  0089
 84+  0089 3E 39                ld a,$39                                                                        ;set up frame number for 0 so seconds are reset
 85+  008B 32 A6 4C             ld (frame_number),a                                                        ;reset frame number
 86+  008E C9                   ret
 87+  008F
 88+  008F
 89+  008F
 90+  008F
# file closed: scripts/system/vblank.asm
 19   008F                  include "scripts/system/startup.asm"            // jumps to title.start_title_mode
# file opened: scripts/system/startup.asm
  1+  008F
  2+  008F              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  008F              ; THIS IS THE ENTRY POINT FROM THE JUMP AT ADDRESS 0;
  4+  008F              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  008F              ; sets up z80 interrupt mode and clears all RAM                ;
  6+  008F              ; then initialises code to display screen                        ;
  7+  008F              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8+  008F
  9+  008F                                                                                      ;copy from hl to de, decrementing bc, keep doing until bc = 0
 10+  008F
 11+  008F              start:
 12+  008F
 13+  008F F3                   di                                                                                        ;disable ints on the CPU
 14+  0090 31 F0 4F             ld  sp,ram_top                                                                ;set up a new stack at the top of ram
 15+  0093 ED 56                im  1                                                                            ;set interrupt mode 1
 16+  0095 3E FF                ld  a,RST_38H                                                                ;$ff is RST 38H instruction opcode
 17+  0097 D3 00                out (0),a                                                                        ;set up the interrupt vector through port 0
 18+  0099
 19+  0099 AF                   xor a                                                                                ;clear accumulator quickly 4 t-states rather than lda a,0 which is 7
 20+  009A 32 C0 50             ld  (watchdog),a                                                        ;reset the watchdog
 21+  009D
 22+  009D              clear_user_ram:
 23+  009D
 24+  009D 21 00 4C             ld  hl,user_ram_start                                                ;addr to copy from
 25+  00A0 11 01 4C             ld  de,user_ram_start + 1                                        ;addr to copy to
 26+  00A3 01 EF 03             ld  bc,$3ef                                                                        ;gonna loop this many times (size of RAM 1007 bytes)
 27+  00A6 77                   ld  (hl),a                                                                        ;clear (hl), which then gets copied through to de
 28+  00A7 ED B0                ldir
 29+  00A9
 30+  00A9 21 AA 0C             ld hl,high_score_defaults
 31+  00AC 11 54 4C             ld de, high_scores
 32+  00AF 01 24 00             ld bc, NUM_HIGH_SCORES * HIGH_SCORE_DATA_SIZE
 33+  00B2 ED B0                ldir
 34+  00B4
 35+  00B4
 36+  00B4
 37+  00B4 3A 80 50             ld a, ($5080)
 38+  00B7 0F                   rrca
 39+  00B8 0F                   rrca
 40+  00B9 E6 03                and #3
 41+  00BB 3C                   inc a
 42+  00BC FE 04                cp #4
 43+  00BE 20 01                jr nz, set_lives
 44+  00C0
 45+  00C0 3C                   inc a
 46+  00C1              set_lives:
 47+  00C1
 48+  00C1 3E 05                ld a, 5
 49+  00C3 32 A3 4C             ld (starting_lives), a
 50+  00C6
 51+  00C6 3E 1E                ld a, 30
 52+  00C8 32 50 4C             ld (cooldown), a
 53+  00CB                                                                       ;copy from (hl) to (de) and increment hl and de, decrementing bc, keep doing until bc = 0
 54+  00CB
 55+  00CB CD AD 20             call clear_tile_ram
 56+  00CE
 57+  00CE 3E 01                ld  a,palette_white_blue_red
 58+  00D0 CD BC 20             call clear_colour_ram
 59+  00D3
 60+  00D3 AF                   xor a                                                                                ;quickly clear accumulator
 61+  00D4 21 F0 4F             ld  hl,sprite_reg                                                        ;clear sprite ram
 62+  00D7 06 10                ld  b,16                                                               ;16 bytes need clearing
 63+  00D9              clear_spr_ram:
 64+  00D9
 65+  00D9 77                   ld  (hl),a                                                                        ;store (zero)
 66+  00DA 23                   inc hl                                                                                ;move to next address
 67+  00DB 10 FC                djnz clear_spr_ram                                                        ;decrement b and branch if not zero yet
 68+  00DD
 69+  00DD 21 00 50             ld  hl,hardware_io_area                                                ;clear hardware mapped memory from $5000 to $5007
 70+  00E0 06 08                ld  b,8
 71+  00E2                                                                                                    ;do 8 bytes worth
 72+  00E2              clear_loop1:
 73+  00E2
 74+  00E2 77                   ld  (hl),a                                                                        ;store a at location
 75+  00E3 23                   inc hl                                                                                ;increment to next location
 76+  00E4 10 FC                djnz clear_loop1                                                        ;loop until b is zero
 77+  00E6
 78+  00E6
 79+  00E6              set_highscore:
 80+  00E6
 81+  00E6 21 00 50             ld hl, $5000                                                                ;set the 4 low bcd digits
 82+  00E9 22 0A 4D             ld (high_score),hl
 83+  00EC
 84+  00EC 3E 00                ld a, 0
 85+  00EE
 86+  00EE 32 0D 4D             ld (high_score + 3),a
 87+  00F1 32 0C 4D             ld (high_score + 2), a
 88+  00F4                                             ;low bytes are here
 89+  00F4 3E 00                ld a,0                                                                                ;clear h
 90+  00F6 32 0D 4D             ld (high_score + 3),a                                               ;set the upper 4 bcd digits to zero
 91+  00F9
 92+  00F9
 93+  00F9 AF                   xor a                                                                                ;clear a
 94+  00FA 32 C0 50             ld (watchdog),a
 95+  00FD
 96+  00FD 3E FE                ld a, 254
 97+  00FF 32 FC 4E             ld (SOUND_COUNTER), a                                        ;reset the watchdog, to stop it barking
 98+  0102
 99+  0102              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
100+  0102              ; end of hardware initialisation
101+  0102              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
102+  0102
103+  0102
104+  0102                      ; enable interrupts and start main loop
105+  0102 3E 01                ld a,1
106+  0104 32 00 50             ld (irq_enable),a                                                        ;enable ints on the board by writing 1 to this address
107+  0107 FB                   ei
108+  0108
109+  0108
110+  0108
111+  0108                     ; ld a, $00
112+  0108                      ;ld (current_score + 2), a
113+  0108
114+  0108                      ;ld a, $45
115+  0108                     ; ld (current_score + 1), a
116+  0108
117+  0108                    ;  ld a, $00
118+  0108                      ;ld (current_score), a
119+  0108
120+  0108
121+  0108                      ;call check_high_score
122+  0108
123+  0108                      ;jp finish_game_over
124+  0108
125+  0108
126+  0108                     ; jp start_high_score
127+  0108 C3 0B 01             jp start_title_mode
128+  010B
129+  010B
# file closed: scripts/system/startup.asm
 20   010B                  include "scripts/system/screens/title.asm"
# file opened: scripts/system/screens/title.asm
  1+  010B              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2+  010B              ; sets up title screen
  3+  010B              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  010B
  5+  010B              title_location:                         equ tile_ram_start + 0 + column_7
  6+  010B              author_location:                        equ tile_ram_start + 2 + column_5
  7+  010B
  8+  010B              title_seq_time = 50
  9+  010B
 10+  010B              start_title_mode:
 11+  010B
 12+  010B
 13+  010B 3E 01                ld a,title_mode                                                                ;pick title mode
 14+  010D 32 09 4D             ld (mode),a
 15+  0110
 16+  0110 3E FF                ld a, 255
 17+  0112 32 7B 4C             ld (high_score_index), a                                                                ;and store
 18+  0115
 19+  0115 3E 32                ld a, title_seq_time
 20+  0117 32 12 4D             ld (game_time), a
 21+  011A
 22+  011A 3E 00                ld a, 0
 23+  011C 32 86 4C             ld (is_attract_mode), a
 24+  011F 32 01 50             ld ($5001), a
 25+  0122
 26+  0122 3A 9F 4C             ld a, (last_score)
 27+  0125 32 0E 4D             ld (current_score), a
 28+  0128
 29+  0128 3A A0 4C             ld a, (last_score + 1)
 30+  012B 32 0F 4D             ld (current_score + 1), a
 31+  012E
 32+  012E 3A A1 4C             ld a, (last_score + 2)
 33+  0131 32 10 4D             ld (current_score + 2), a
 34+  0134
 35+  0134
 36+  0134
 37+  0134
 38+  0134              ;Title_Author:
 39+  0134
 40+  0134 CD AD 20             call clear_tile_ram
 41+  0137
 42+  0137 CD 1E 24             call hide_sprites
 43+  013A
 44+  013A                    ;  jp start_game
 45+  013A
 46+  013A
 47+  013A                            ;clear any data on second to top line
 48+  013A 11 3D 33             ld de,msg_blank                                                                ;store text addr for instruction message
 49+  013D 21 FD 43             ld hl,tile_ram_top_vis_line2                                ;vram address for second line of tiles
 50+  0140 CD 9B 20             call borders_blit_text_only                                        ;write text to border
 51+  0143
 52+  0143 11 3D 33             ld de,msg_blank                                                                ;store text addr for instruction message
 53+  0146 21 DD 43             ld hl,tile_ram_top_vis_line1                               ;vram address for second line of tiles
 54+  0149 CD 9B 20             call borders_blit_text_only                                        ;write text to border
 55+  014C
 56+  014C 11 3D 33             ld de,msg_blank                                                                ;store text addr for instruction message
 57+  014F 21 1D 40             ld hl,tile_ram_bot_vis_line1                               ;vram address for second line of tiles
 58+  0152 CD 9B 20             call borders_blit_text_only                                        ;write text to border
 59+  0155
 60+  0155 11 3D 33             ld de,msg_blank                                                                ;store text addr for instruction message
 61+  0158 21 3D 40             ld hl,tile_ram_bot_vis_line2                               ;vram address for second line of tiles
 62+  015B CD 9B 20             call borders_blit_text_only                                        ;write text to border
 63+  015E
 64+  015E
 65+  015E CD 1D 02             call logo_text
 66+  0161 CD 0A 04             call draw_score_hud
 67+  0164 CD C8 01             call draw_eggs
 68+  0167
 69+  0167
 70+  0167
 71+  0167
 72+  0167
 73+  0167 11 48 32             ld de,arla_1                                                     ;get text addr for game message
 74+  016A 21 2C 43             ld hl, tile_ram_start + row_12 + column_4                                   ;vram address for text
 75+  016D 0E 09                ld c,palette_blue_red_yellow                                                ;colour red
 76+  016F CD 66 20             call main_blit_text_and_colour
 77+  0172
 78+  0172 11 51 32             ld de,arla_2                                                  ;get text addr for game message
 79+  0175 21 4C 43             ld hl,tile_ram_start + row_12 + column_3                                  ;vram address for text
 80+  0178 0E 09                ld c,palette_blue_red_yellow                                                     ;colour red
 81+  017A CD 66 20             call main_blit_text_and_colour
 82+  017D
 83+  017D 11 5A 32              ld de,af_1                                                   ;get text addr for game message
 84+  0180 21 C8 42             ld hl, tile_ram_start + row_8 + column_7                                ;vram address for text
 85+  0183 0E 18                ld c,palette_cyan_pink_yellow                          ;colour red
 86+  0185 CD 66 20             call main_blit_text_and_colour
 87+  0188
 88+  0188 11 6B 32             ld de,af_2                                                  ;get text addr for game message
 89+  018B 21 E8 42             ld hl,tile_ram_start + row_8 + column_6                                   ;vram address for text
 90+  018E 0E 18                ld c,palette_cyan_pink_yellow                            ;colour red
 91+  0190 CD 66 20             call main_blit_text_and_colour
 92+  0193
 93+  0193 11 DA 33             ld de,msg_presents                                                      ;store text addr for scoring message
 94+  0196 21 EC 42             ld hl, tile_ram_start + row_12 + column_6                  ;vram address for first of bottom line of tiles
 95+  0199 0E 03                ld c,pink                                                                 ;colour (yellow)
 96+  019B                      ;call main_blit_text_and_colour
 97+  019B
 98+  019B
 99+  019B 11 BF 33             ld de,msg_nigel                                                      ;store text addr for scoring message
100+  019E 21 83 42             ld hl, tile_ram_start + row_3 + column_9                         ;vram address for first of bottom line of tiles
101+  01A1 0E 0F                ld c,grey                                                                    ;colour (yellow)
102+  01A3 CD 66 20             call main_blit_text_and_colour
103+  01A6
104+  01A6
105+  01A6 11 E3 33              ld de,msg_ins_1                                                   ;store text addr for scoring message
106+  01A9 21 E0 41             ld hl, tile_ram_start + row_0 + column_14                        ;vram address for first of bottom line of tiles
107+  01AC 0E 15                ld c,palette_orange_green_orange                                                         ;colour (yellow)
108+  01AE CD 66 20             call main_blit_text_and_colour
109+  01B1
110+  01B1 11 04 34             ld de,msg_ins_2                                                   ;store text addr for scoring message
111+  01B4 21 00 42             ld hl, tile_ram_start + row_0 + column_13                    ;vram address for first of bottom line of tiles
112+  01B7 0E 15                ld c,palette_orange_green_orange                                                                     ;colour (yellow)
113+  01B9 CD 66 20             call main_blit_text_and_colour
114+  01BC
115+  01BC
116+  01BC 21 93 34             ld hl,bottom_list                                        ;point to last item in the list for bottom text drawing routine so we cycle round straight away
117+  01BF 22 B6 4C             ld (msg_bot_addr),hl
118+  01C2
119+  01C2                   ;  jp start_high_score
120+  01C2 C3 78 3F             jp wait
121+  01C5
122+  01C5              // PUT IN TITLE ANIM?
123+  01C5
124+  01C5                      ;call reset_sound
125+  01C5
126+  01C5                      ;call sfx_life
127+  01C5                      ;call playSound
128+  01C5
129+  01C5
130+  01C5                      ;ld hl,spr_initial_game_data                                        ;addr of game sprite data
131+  01C5                      ;call set_sprites
132+  01C5
133+  01C5                      ;call harry_make_walk
134+  01C5
135+  01C5
136+  01C5                      ;ld ix, sprite0
137+  01C5                     ; ld a, 10
138+  01C5                      ;ld (ix+spr_x), a
139+  01C5
140+  01C5                      ;ld a, 130
141+  01C5                      ;ld (ix+spr_y), a
142+  01C5
143+  01C5              Instructions:
144+  01C5
145+  01C5
146+  01C5
147+  01C5 C3 78 3F             jp wait
148+  01C8
149+  01C8
150+  01C8
151+  01C8              draw_eggs:
152+  01C8
153+  01C8
154+  01C8 06 60                ld b, tile_egg_1
155+  01CA 21 46 41             ld hl, tile_ram_start + row_6 + column_19
156+  01CD 0E 16                ld c, palette_yellow_blue_white
157+  01CF CD ED 20             call draw2x2tile
158+  01D2
159+  01D2 06 62                 ld b, tile_egg_2
160+  01D4 21 58 41             ld hl, tile_ram_start + row_24 + column_19
161+  01D7 0E 16                ld c, palette_yellow_blue_white
162+  01D9 CD ED 20             call draw2x2tile
163+  01DC
164+  01DC
165+  01DC C9                   ret                                                                         ;finished setup goto wait section
166+  01DD
167+  01DD
168+  01DD              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
169+  01DD              ; performs logic for title mode
170+  01DD              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
171+  01DD              title_logic:
172+  01DD
173+  01DD 3A 50 4C             ld a, (cooldown)
174+  01E0 FE 00                cp 0
175+  01E2 CA EC 01             jp z, readyStart
176+  01E5
177+  01E5 3D                   dec a
178+  01E6 32 50 4C             ld (cooldown), a
179+  01E9
180+  01E9 C3 FD 01             jp notUserStart
181+  01EC
182+  01EC              readyStart:
183+  01EC
184+  01EC 3A 33 4C             ld a,(start_state)                                                        ;get state
185+  01EF E6 50                and inp_chk_p1st                                                        ;examine p1 start
186+  01F1 FE 40                cp inp_p1_presd                                                                ;check for pressed
187+  01F3 C2 FD 01             jp nz,notUserStart
188+  01F6
189+  01F6 AF                   xor a
190+  01F7 32 86 4C             ld (is_attract_mode), a
191+  01FA
192+  01FA C3 82 02             jp start_game
193+  01FD                                                                           ;0 means pressed so start game
194+  01FD
195+  01FD              notUserStart:
196+  01FD
197+  01FD 3A A5 4C             ld a, (frame_counter)
198+  0200 E6 0F                and %00001111
199+  0202 C2 14 02             jp nz, noCountdown
200+  0205
201+  0205 3A 12 4D             ld a, (game_time)
202+  0208 3D                   dec a
203+  0209 32 12 4D             ld (game_time), a
204+  020C FE 00                cp 0
205+  020E C2 14 02             jp nz, noCountdown
206+  0211
207+  0211                      ;ld a, 1
208+  0211                      ;ld (is_attract_mode), a
209+  0211
210+  0211
211+  0211
212+  0211 C3 8A 08             jp start_high_score
213+  0214
214+  0214              noCountdown:
215+  0214
216+  0214 CD 82 22             call bot_display_upd
217+  0217                     ; call harry_update
218+  0217 CD 51 22             call show_score
219+  021A
220+  021A
221+  021A C3 78 3F             jp wait                                                                                ;finished setup goto wait section
222+  021D
223+  021D
224+  021D              logo_column  = column_22
225+  021D
226+  021D
227+  021D              logo_text:
228+  021D
229+  021D 06 C4                ld b, tile_logo_c
230+  021F 21 E6 40             ld hl, tile_ram_start + row_6 + logo_column
231+  0222 0E 09                ld c, palette_blue_red_yellow
232+  0224 CD ED 20             call draw2x2tile
233+  0227
234+  0227 06 C6                ld b, tile_logo_h
235+  0229 21 E9 40             ld hl, tile_ram_start + row_9 + logo_column
236+  022C 0E 09                ld c, palette_blue_red_yellow
237+  022E CD ED 20             call draw2x2tile
238+  0231
239+  0231 06 C8                ld b, tile_logo_u
240+  0233 21 EC 40             ld hl, tile_ram_start + row_12 + logo_column
241+  0236 0E 09                ld c, palette_blue_red_yellow
242+  0238 CD ED 20             call draw2x2tile
243+  023B
244+  023B 06 C4                ld b, tile_logo_c
245+  023D 21 EF 40             ld hl, tile_ram_start + row_15 + logo_column
246+  0240 0E 09                ld c, palette_blue_red_yellow
247+  0242 CD ED 20             call draw2x2tile
248+  0245
249+  0245 06 CA                ld b, tile_logo_k
250+  0247 21 F2 40             ld hl, tile_ram_start + row_18 + logo_column
251+  024A 0E 09                ld c, palette_blue_red_yellow
252+  024C CD ED 20             call draw2x2tile
253+  024F
254+  024F 06 AE                 ld b, tile_logo_i
255+  0251 21 F5 40             ld hl, tile_ram_start + row_21 + logo_column
256+  0254 0E 09                ld c, palette_blue_red_yellow
257+  0256 CD ED 20             call draw2x2tile
258+  0259
259+  0259 06 CC                 ld b, tile_logo_e
260+  025B 21 F8 40             ld hl, tile_ram_start + row_24 +  logo_column
261+  025E 0E 09                ld c, palette_blue_red_yellow
262+  0260 CD ED 20             call draw2x2tile
263+  0263
264+  0263
265+  0263 06 CC                 ld b, tile_logo_e
266+  0265 21 4C 41             ld hl, tile_ram_start + row_12 +  column_19
267+  0268 0E 09                ld c, palette_blue_red_yellow
268+  026A CD ED 20             call draw2x2tile
269+  026D
270+  026D 06 CE                ld b, tile_logo_g
271+  026F 21 4F 41             ld hl, tile_ram_start + row_15 +   column_19
272+  0272 0E 09                ld c, palette_blue_red_yellow
273+  0274 CD ED 20             call draw2x2tile
274+  0277
275+  0277 06 CE                ld b, tile_logo_g
276+  0279 21 52 41             ld hl, tile_ram_start + row_18 +  column_19
277+  027C 0E 09                ld c, palette_blue_red_yellow
278+  027E CD ED 20             call draw2x2tile
279+  0281
280+  0281
281+  0281
282+  0281 C9                   ret
# file closed: scripts/system/screens/title.asm
 21   0282                  include "scripts/gameplay/start_game.asm"
# file opened: scripts/gameplay/start_game.asm
  1+  0282
  2+  0282              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  0282              ; sets up game screen
  4+  0282              ; clears screen
  5+  0282              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  6+  0282              start_game:
  7+  0282
  8+  0282
  9+  0282 3E 00                ld a, 0
 10+  0284 32 13 4D             ld (level_complete), a
 11+  0287 32 8E 4C             ld (level_right), a
 12+  028A 32 3C 4C             ld (pal_timer), a
 13+  028D 32 92 4C             ld (level_hex), a
 14+  0290 32 90 4C             ld (level_time_counter), a
 15+  0293 32 8D 4C             ld (level_left), a
 16+  0296 32 8B 4C             ld (stop_timer), a
 17+  0299
 18+  0299 CD 44 06             call sfx_open_door
 19+  029C
 20+  029C
 21+  029C 3E FF                ld a, 255
 22+  029E 32 8F 4C             ld (level_type_id), a
 23+  02A1 32 7B 4C             ld (high_score_index), a
 24+  02A4
 25+  02A4
 26+  02A4
 27+  02A4 3A A3 4C             ld a, (starting_lives)
 28+  02A7 32 14 4D             ld (player_lives), a
 29+  02AA
 30+  02AA 3E 10                ld a, start_hen_speed
 31+  02AC                     ; ld a, 1
 32+  02AC 32 4D 4C             ld (hen_speed), a
 33+  02AF
 34+  02AF 21 00 00             ld hl,0                                                                                ;clear
 35+  02B2 22 0E 4D             ld (current_score),hl                                                ;reset player score
 36+  02B5 22 10 4D             ld (current_score + 2),hl
 37+  02B8
 38+  02B8 3E 10                ld a, $10
 39+  02BA 32 8C 4C             ld (current_bonus_level), a
 40+  02BD
 41+  02BD 3E 09                ld a, $09
 42+  02BF                      ;ld a, $01
 43+  02BF 32 91 4C             ld (current_level_time), a
 44+  02C2
 45+  02C2 3A 86 4C             ld a, (is_attract_mode)
 46+  02C5 FE 01                cp 1
 47+  02C7 3E 03                ld a, 3
 48+  02C9 C4 B0 06             call nz, play_song                                    ;reset player score
 49+  02CC
 50+  02CC CD 1E 24             call hide_sprites
 51+  02CF
 52+  02CF                      ;ld a, (is_attract_mode)
 53+  02CF                      ;cp 0
 54+  02CF C3 D1 27             jp start_level_number
 55+  02D2
 56+  02D2
 57+  02D2
 58+  02D2              next_level:
 59+  02D2
 60+  02D2 06 1E                ld b, 30
 61+  02D4
 62+  02D4              wait_a_bit
 63+  02D4 32 C0 50             ld        (watchdog),a                       ;reset the watchdog
 64+  02D7 76                   halt
 65+  02D8
 66+  02D8 10 FA                djnz wait_a_bit
 67+  02DA
 68+  02DA              finishedWaiting:
 69+  02DA
 70+  02DA
 71+  02DA 3E FF                ld a, 255
 72+  02DC 32 7D 4C             ld (force_colour), a
 73+  02DF
 74+  02DF 21 80 0C             ld hl,spr_initial_game_data                                        ;addr of game sprite data
 75+  02E2 CD 66 24             call set_sprites
 76+  02E5                                                 ;and store
 77+  02E5
 78+  02E5 DD 21 B9 4C          ld ix, sprite0
 79+  02E9 DD 7E 10             ld a, (ix + spr_x)
 80+  02EC 32 24 4D             ld (spawn_x), a
 81+  02EF
 82+  02EF DD 7E 11             ld a, (ix + spr_y)
 83+  02F2 32 25 4D             ld (spawn_y), a
 84+  02F5
 85+  02F5 3E 01                ld  a,palette_white_blue_red
 86+  02F7 CD 1B 21             call fill_screen_area_colour
 87+  02FA
 88+  02FA CD AD 20             call clear_tile_ram
 89+  02FD CD 99 34             call harry_initialise
 90+  0300 CD 32 2F             call init_mother
 91+  0303
 92+  0303 3E 02                ld a, game_mode
 93+  0305 32 09 4D             ld (mode), a
 94+  0308
 95+  0308 3E 00                ld a, 0
 96+  030A 32 7E 4C             ld (eggs_remaining), a
 97+  030D
 98+  030D 76                   halt
 99+  030E
100+  030E 3A 90 4C             ld a, (level_time_counter)
101+  0311 3C                   inc a
102+  0312 32 90 4C             ld (level_time_counter), a
103+  0315 FE 11                cp 17
104+  0317 DA 27 03             jp c, noTimeDecrease
105+  031A
106+  031A 3E 00                ld a, 0
107+  031C 32 90 4C             ld (level_time_counter), a
108+  031F
109+  031F 3A 91 4C             ld a, (current_level_time)
110+  0322 3D                   dec a
111+  0323 27                   daa
112+  0324 32 91 4C             ld (current_level_time), a
113+  0327
114+  0327              noTimeDecrease:
115+  0327
116+  0327 3A 8F 4C             ld a, (level_type_id)
117+  032A 3C                   inc a
118+  032B FE 28                cp 40
119+  032D DA 32 03             jp c, noLevelWrap
120+  0330
121+  0330 3E 00                ld a, 0
122+  0332
123+  0332              noLevelWrap:
124+  0332
125+  0332 32 8F 4C             ld (level_type_id), a
126+  0335
127+  0335 DD 6F                ld ixl, a
128+  0337 DD 26 00             ld ixh, 0
129+  033A 11 1A 16             ld de, level_hens
130+  033D DD 19                add ix, de
131+  033F
132+  033F DD 7E 00             ld a, (ix)
133+  0342 32 95 4C             ld (number_hens), a
134+  0345 32 96 4C             ld (hens_to_spawn), a
135+  0348
136+  0348                    ;  ld hl, tile_ram_start + row_5 +column_5
137+  0348                     ; ld (hl), a
138+  0348
139+  0348 3A 8F 4C             ld a, (level_type_id)
140+  034B DD 6F                ld ixl, a
141+  034D DD 26 00             ld ixh, 0
142+  0350 11 42 16             ld de, level_mother
143+  0353 DD 19                add ix, de
144+  0355
145+  0355 DD 7E 00             ld a, (ix)
146+  0358 32 97 4C             ld (mother_active), a
147+  035B
148+  035B                     ; ld hl, tile_ram_start + row_0 + column_8
149+  035B                   ;   ld (hl), a
150+  035B
151+  035B 3A 8F 4C             ld a, (level_type_id)
152+  035E CD A2 07             call draw_map
153+  0361
154+  0361 CD DE 03             call draw_hud
155+  0364 CD 21 04             call draw_cage
156+  0367
157+  0367
158+  0367
159+  0367 3E 99                ld a,$99                                                              ;set game counter to 60 (in bcd)
160+  0369 32 12 4D             ld (game_time),a
161+  036C
162+  036C 3E 63                ld a, 99
163+  036E 32 87 4C             ld (seconds_left), a
164+  0371
165+  0371 3E 04                ld a, 4
166+  0373 32 9D 4C             ld (bonus_reduce_counter), a
167+  0376
168+  0376 3E 08                ld a, time_frames
169+  0378 32 9E 4C             ld (time_reduce_timer), a                                               ;and store
170+  037B
171+  037B CD 89 00             call reset_framenumber                                                ;set frame number to 0 so we start at a whole second
172+  037E
173+  037E 3A 91 4C             ld a, (current_level_time)
174+  0381 32 39 4C             ld (time_remaining + 1), a
175+  0384
176+  0384 3A 8C 4C             ld a, (current_bonus_level)
177+  0387 32 3B 4C             ld (bonus_remaining + 1), a
178+  038A
179+  038A C6 0A                add 10
180+  038C 27                   daa
181+  038D 32 8C 4C             ld (current_bonus_level), a
182+  0390 FE 00                cp 0
183+  0392 C2 9A 03             jp nz, noMaxBonus
184+  0395
185+  0395 3E 10                ld a, $10
186+  0397 32 8C 4C             ld (current_bonus_level), a
187+  039A
188+  039A              noMaxBonus:
189+  039A
190+  039A
191+  039A 3E 00                ld a, $00
192+  039C 32 38 4C             ld (time_remaining + 0), a
193+  039F 32 3A 4C             ld (bonus_remaining + 0), a
194+  03A2
195+  03A2
196+  03A2 3E 00                ld a, 0
197+  03A4
198+  03A4 32 36 4C             ld (attract_mode_timer), a
199+  03A7 32 37 4C             ld (lives_lost_level), a
200+  03AA 32 84 4C             ld (jump_counter), a
201+  03AD
202+  03AD
203+  03AD 3E FF                ld a, $ff
204+  03AF 32 85 4C             ld (fire_override), a
205+  03B2
206+  03B2 21 3A 1B             ld hl, attract_mode_data
207+  03B5 22 34 4C             ld (attract_mode_address), hl
208+  03B8
209+  03B8 23                   inc hl
210+  03B9 7E                   ld a, (hl)
211+  03BA 32 36 4C             ld (attract_mode_timer), a
212+  03BD
213+  03BD
214+  03BD
215+  03BD 3E 28                ld a, 40
216+  03BF 32 A2 4C             ld (harry_invincible_timer), a
217+  03C2
218+  03C2              waitEnough:
219+  03C2
220+  03C2              setRandom:
221+  03C2 3A 8F 4C             ld a, (level_type_id)
222+  03C5 E6 07                and %00000111
223+  03C7 C6 6A                add 106
224+  03C9 32 16 4D             ld (rand_data), a
225+  03CC
226+  03CC ED 44                neg
227+  03CE 32 17 4D             ld (rand_data + 1), a
228+  03D1
229+  03D1 3A 86 4C             ld a, (is_attract_mode)
230+  03D4 FE 01                cp 1
231+  03D6 CA 78 3F             jp z, wait
232+  03D9
233+  03D9 3E 02                ld a, 2
234+  03DB                     ; call play_song
235+  03DB
236+  03DB
237+  03DB
238+  03DB
239+  03DB C3 78 3F             jp wait                                                                                ;finished setup goto wait section
240+  03DE
241+  03DE
242+  03DE              hud_top_row = column_25
243+  03DE              hud_bot_row = column_23
244+  03DE
245+  03DE              draw_hud:
246+  03DE
247+  03DE 11 3E 34             ld de,msg_player                                              ;get text addr for game message
248+  03E1 21 C0 40             ld hl,tile_ram_start + row_0 + hud_bot_row                                    ;vram address for text
249+  03E4 0E 01                ld c,palette_white_blue_red                                                   ;colour red
250+  03E6 CD 66 20             call main_blit_text_and_colour
251+  03E9
252+  03E9 11 44 34             ld de,msg_level                                              ;get text addr for game message
253+  03EC 21 C7 40             ld hl,tile_ram_start + row_7 + hud_bot_row                                    ;vram address for text
254+  03EF 0E 01                ld c,palette_white_blue_red                                                   ;colour red
255+  03F1 CD 66 20             call main_blit_text_and_colour
256+  03F4
257+  03F4
258+  03F4
259+  03F4 11 4B 34             ld de,msg_bonus                                              ;get text addr for game message
260+  03F7 21 CF 40             ld hl,tile_ram_start + row_15 + hud_bot_row                                    ;vram address for text
261+  03FA 0E 01                ld c,palette_white_blue_red                                                   ;colour red
262+  03FC CD 66 20             call main_blit_text_and_colour
263+  03FF
264+  03FF
265+  03FF 11 54 34             ld de,msg_time                                          ;get text addr for game message
266+  0402 21 D9 40             ld hl,tile_ram_start + row_25 + hud_bot_row                                    ;vram address for text
267+  0405 0E 01                ld c,palette_white_blue_red                                                   ;colour red
268+  0407 CD 66 20             call main_blit_text_and_colour
269+  040A
270+  040A              draw_score_hud:
271+  040A
272+  040A 11 36 34             ld de,msg_score                                                 ;get text addr for game message
273+  040D 21 80 40             ld hl,tile_ram_start + row_0 + hud_top_row                                    ;vram address for text
274+  0410 0E 01                ld c,palette_white_blue_red                                                   ;colour red
275+  0412 CD 66 20             call main_blit_text_and_colour
276+  0415
277+  0415
278+  0415 11 3A 34             ld de,msg_high                                         ;get text addr for game message
279+  0418 21 95 40             ld hl,tile_ram_start + row_21 + hud_top_row                                ;vram address for text
280+  041B 0E 01                ld c,palette_white_blue_red                                                   ;colour red
281+  041D CD 66 20             call main_blit_text_and_colour
282+  0420
283+  0420
284+  0420
285+  0420
286+  0420
287+  0420 C9                ret
288+  0421
289+  0421
290+  0421              draw_cage:
291+  0421
292+  0421
293+  0421
294+  0421 06 90                ld b, $90
295+  0423 21 E0 40             ld hl, tile_ram_start + column_22 + row_0
296+  0426 0E 16                ld c, palette_yellow_blue_white
297+  0428 CD ED 20             call draw2x2tile
298+  042B
299+  042B 06 92                ld b, $92
300+  042D 21 E2 40             ld hl, tile_ram_start + column_22 + row_2
301+  0430 0E 16                ld c, palette_yellow_blue_white
302+  0432 CD ED 20             call draw2x2tile
303+  0435
304+  0435 06 B0                  ld b, $B0
305+  0437 21 20 41             ld hl, tile_ram_start + column_20 + row_0
306+  043A 0E 16                ld c, palette_yellow_blue_white
307+  043C CD ED 20             call draw2x2tile
308+  043F
309+  043F 06 B2                ld b, $B2
310+  0441 21 22 41             ld hl, tile_ram_start + column_20 + row_2
311+  0444 0E 16                ld c, palette_yellow_blue_white
312+  0446 CD ED 20             call draw2x2tile
313+  0449
314+  0449 06 C0                ld b, $C0
315+  044B 21 40 41             ld hl, tile_ram_start + column_19 + row_0
316+  044E 0E 16                ld c, palette_yellow_blue_white
317+  0450 CD ED 20             call draw2x2tile
318+  0453
319+  0453 06 C2                ld b, $C2
320+  0455 21 42 41             ld hl, tile_ram_start + column_19 + row_2
321+  0458 0E 16                ld c, palette_yellow_blue_white
322+  045A CD ED 20             call draw2x2tile
323+  045D
324+  045D C9                   ret
# file closed: scripts/gameplay/start_game.asm
 22   045E                  include "scripts/system/sound/sound.asm"
# file opened: scripts/system/sound/sound.asm
  1+  045E
  2+  045E              process_effect:
  3+  045E
  4+  045E
  5+  045E
  6+  045E 21 6A 16     	ld hl, EFFECT_TABLE_1
  7+  0461 DD 21 9C 4E  	ld ix, CH1_E_NUM
  8+  0465 FD 21 8C 4E  	ld iy, CH1_FREQ0
  9+  0469
 10+  0469 CD 92 04     	call process_voice
 11+  046C
 12+  046C 32 91 4E     	ld (CH1_VOL), a
 13+  046F
 14+  046F
 15+  046F 21 7A 16     	ld hl, EFFECT_TABLE_2
 16+  0472 DD 21 AC 4E  	ld ix, CH2_E_NUM
 17+  0476 FD 21 92 4E  	ld iy, CH2_FREQ1
 18+  047A CD 92 04     	call  process_voice
 19+  047D 32 96 4E     	ld (CH2_VOL), a
 20+  0480
 21+  0480 21 7A 16     	ld hl, EFFECT_TABLE_3
 22+  0483 DD 21 BC 4E  	ld ix, CH3_E_NUM
 23+  0487 FD 21 97 4E  	ld iy, CH3_FREQ1
 24+  048B CD 92 04     	call  process_voice
 25+  048E 32 9B 4E     	ld (CH3_VOL), a
 26+  0491
 27+  0491
 28+  0491 C9           	ret
 29+  0492
 30+  0492
 31+  0492              process_voice: // 2dee Process effect (one voice
 32+  0492
 33+  0492 DD 7E 00     	ld a, (ix + 0)
 34+  0495 A7           	and a
 35+  0496 20 27        	jr nz, find_effect
 36+  0498
 37+  0498              init_param:
 38+  0498
 39+  0498 DD 7E 02     	ld a, (ix+2)
 40+  049B A7           	and a
 41+  049C C8           	ret z
 42+  049D
 43+  049D DD 36 02 00  	ld (ix+2), 0
 44+  04A1 DD 36 0D 00  	ld (ix+$0D), 0
 45+  04A5 DD 36 0E 00  	ld (ix+$0E), 0
 46+  04A9 DD 36 0F 00  	ld (ix+$0F), 0
 47+  04AD FD 36 00 00  	ld (iy+0), 0
 48+  04B1 FD 36 01 00  	ld (iy+1), 0
 49+  04B5 FD 36 02 00  	ld (iy+2), 0
 50+  04B9 FD 36 03 00  	ld (iy+3), 0
 51+  04BD AF           	xor a
 52+  04BE C9           	ret
 53+  04BF
 54+  04BF
 55+  04BF
 56+  04BF              find_effect:
 57+  04BF
 58+  04BF 4F           	ld c, a
 59+  04C0 06 08        	ld b, 8
 60+  04C2 1E 80        	ld e, $80
 61+  04C4
 62+  04C4              find_bit:
 63+  04C4
 64+  04C4 7B           	ld a, e
 65+  04C5 A1           	and c
 66+  04C6 20 05        	jr nz, process_bit
 67+  04C8
 68+  04C8 CB 3B        	srl e
 69+  04CA 10 F8        	djnz find_bit
 70+  04CC C9           	ret
 71+  04CD
 72+  04CD
 73+  04CD
 74+  04CD              process_bit:
 75+  04CD
 76+  04CD
 77+  04CD DD 7E 02     	ld a, (ix+2)
 78+  04D0 A3           	and e
 79+  04D1 20 3F        	jr nz, compute_effect
 80+  04D3 DD 73 02     	ld (ix+2), e
 81+  04D6
 82+  04D6 05           	dec b
 83+  04D7 78           	ld a,b
 84+  04D8 07           	rlca
 85+  04D9 07           	rlca
 86+  04DA 07           	rlca
 87+  04DB 4F           	ld c,a
 88+  04DC 06 00        	ld b,0
 89+  04DE E5           	push hl
 90+  04DF 09           	add hl, bc
 91+  04E0 DD E5        	push ix
 92+  04E2 D1           	pop de
 93+  04E3 13           	inc de
 94+  04E4 13           	inc de
 95+  04E5 13           	inc de
 96+  04E6 01 08 00     	ld bc,$0008
 97+  04E9 ED B0        	ldir
 98+  04EB E1           	pop hl
 99+  04EC
100+  04EC
101+  04EC
102+  04EC DD 7E 06     	ld a, (ix + 6)
103+  04EF E6 7F        	and $7F
104+  04F1 DD 77 0C     	ld (ix+$0C), a
105+  04F4
106+  04F4 DD 7E 04     	ld a,(ix+4)
107+  04F7 DD 77 0E     	ld (ix+$0E), a
108+  04FA
109+  04FA DD 7E 09     	ld a, (ix+9)
110+  04FD 47           	ld b, a
111+  04FE 0F           	rrca
112+  04FF 0F           	rrca
113+  0500 0F           	rrca
114+  0501 0F           	rrca
115+  0502 E6 0F        	and $0F
116+  0504 DD 77 0B     	ld (ix+$0B),a
117+  0507
118+  0507 E6 08        	and $08
119+  0509 20 07        	jr nz, compute_effect
120+  050B DD 70 0F     	ld (ix+$0F), b
121+  050E DD 36 0D 00  	ld (ix+$0D),0
122+  0512
123+  0512
124+  0512
125+  0512              compute_effect:
126+  0512
127+  0512
128+  0512 DD 35 0C     	dec (ix+$0C)
129+  0515 20 5A        	jr nz, update_freq
130+  0517
131+  0517
132+  0517 DD 7E 08     	ld a, (ix+8)
133+  051A A7           	and a
134+  051B 28 10        	jr z, skip1
135+  051D
136+  051D DD 35 08     	dec (ix+8)
137+  0520 20 0B        	jr nz, skip1
138+  0522
139+  0522 7B           	ld a, e
140+  0523 2F           	cpl
141+  0524 DD A6 00     	and (ix+0)
142+  0527 DD 77 00     	ld (ix+0), a
143+  052A C3 92 04     	jp process_voice
144+  052D
145+  052D
146+  052D              skip1:
147+  052D
148+  052D DD 7E 06     	ld a,(ix+6)
149+  0530 E6 7F        	and $7F
150+  0532 DD 77 0C     	ld (ix+$0C),a
151+  0535 DD CB 06 7E  	bit 7,(ix+6)
152+  0539 28 16        	jr z, skip2
153+  053B
154+  053B DD 7E 05     	ld a, (ix+5)
155+  053E ED 44        	neg
156+  0540 DD 77 05     	ld (ix+5), a
157+  0543 DD CB 0D 46  	bit 0, (ix+$0D)
158+  0547 DD CB 0D C6  	set 0, (ix+$0D)
159+  054B 28 24        	jr z, update_freq
160+  054D
161+  054D DD CB 0D 86  	res 0,(ix+$0D)
162+  0551
163+  0551              skip2:
164+  0551
165+  0551
166+  0551
167+  0551 DD 7E 04     	ld a, (ix+4)
168+  0554 DD 86 07     	add a, (ix+7)
169+  0557 DD 77 04     	ld (ix+4), a
170+  055A DD 77 0E     	ld (ix+$0E),a
171+  055D DD 7E 09     	ld a, (ix+$09)
172+  0560 DD 86 0A     	add a,(ix+$0A)
173+  0563 DD 77 09     	ld (ix+9),a
174+  0566 47           	ld b, a
175+  0567 DD 7E 0B     	ld a,(ix+$0B)
176+  056A E6 08        	and 8
177+  056C 20 03        	jr nz, update_freq
178+  056E
179+  056E DD 70 0F     	ld (ix+$0F), b
180+  0571
181+  0571
182+  0571              update_freq:
183+  0571
184+  0571 DD 7E 0E     	ld a, (ix+$0e)
185+  0574 DD 86 05     	add a,(ix+5)
186+  0577 DD 77 0E     	ld (ix+$0e),a
187+  057A
188+  057A 6F           	ld l, a
189+  057B 26 00        	ld h, 0
190+  057D
191+  057D DD 7E 03     	ld a, (ix+3)
192+  0580 E6 70        	and $70
193+  0582 28 08        	jr z, skip3
194+  0584
195+  0584
196+  0584
197+  0584 0F           	rrca
198+  0585 0F           	rrca
199+  0586 0F           	rrca
200+  0587 0F           	rrca
201+  0588
202+  0588              jump_from_wave:
203+  0588
204+  0588 47           	ld b, a
205+  0589
206+  0589              doubleIt2:
207+  0589
208+  0589 29           	add hl, hl
209+  058A 10 FD        	djnz doubleIt2
210+  058C
211+  058C              skip3:
212+  058C
213+  058C FD 75 00     	ld (iy+0),l
214+  058F 7D           	ld a,l
215+  0590 0F           	rrca
216+  0591 0F           	rrca
217+  0592 0F           	rrca
218+  0593 0F           	rrca
219+  0594 FD 77 01     	ld (iy+1),a
220+  0597 FD 74 02     	ld (iy+2), h
221+  059A 7C           	ld a, h
222+  059B 0F           	rrca
223+  059C 0F           	rrca
224+  059D 0F           	rrca
225+  059E 0F           	rrca
226+  059F FD 77 03     	ld (iy+3), a
227+  05A2
228+  05A2
229+  05A2 DD 7E 0B     	ld a,(ix+$0B)
230+  05A5
231+  05A5 E7           	rst $20
232+  05A6
233+  05A6 C6 05 CA 05  	defw	type0, type1, type2, type3, type4, type5
233+  05AA CF 05 E0 05
233+  05AE E7 05 EE 05
234+  05B2 EE 05 EE 05  	defw 	type5,type5,type5,type5,type5,type5,type5, type5,type5,type5
234+  05B6 EE 05 EE 05
234+  05BA EE 05 EE 05
234+  05BE EE 05 EE 05
234+  05C2 EE 05 EE 05
235+  05C6
236+  05C6
237+  05C6              type0:
238+  05C6
239+  05C6 DD 7E 0F     	ld a, (ix+$0F)
240+  05C9 C9           	ret
241+  05CA              type1:
242+  05CA
243+  05CA DD 7E 0F     	ld a, (ix+$0F)
244+  05CD 18 09        	jr decrease_routine
245+  05CF
246+  05CF              type2:
247+  05CF
248+  05CF 3A FC 4E     	ld a, (SOUND_COUNTER)
249+  05D2 E6 01        	and 1
250+  05D4
251+  05D4              check_skip:
252+  05D4
253+  05D4 DD 7E 0F     	ld a, (ix+$0f)
254+  05D7 C0           	ret nz
255+  05D8              decrease_routine:
256+  05D8
257+  05D8 E6 0F          	and $0F
258+  05DA C8             	ret z
259+  05DB 3D             	dec a
260+  05DC DD 77 0F       	ld (ix+$0F), a
261+  05DF C9             	ret
262+  05E0
263+  05E0              type3:
264+  05E0
265+  05E0 3A FC 4E     	ld a, (SOUND_COUNTER)
266+  05E3 E6 03        	and 3
267+  05E5 18 ED        	jr check_skip
268+  05E7
269+  05E7              type4:
270+  05E7
271+  05E7 3A FC 4E     	ld a, (SOUND_COUNTER)
272+  05EA E6 07        	and $07
273+  05EC 18 E6        	jr check_skip
274+  05EE
275+  05EE              type5:
276+  05EE C9           	ret
277+  05EF
278+  05EF
279+  05EF
280+  05EF
281+  05EF              load_sound_registers:
282+  05EF
283+  05EF
284+  05EF
285+  05EF 2A FC 4E     	ld hl, (SOUND_COUNTER)
286+  05F2 34           	inc (hl)
287+  05F3 23           	inc hl
288+  05F4 35           	dec (hl)
289+  05F5
290+  05F5
291+  05F5
292+  05F5
293+  05F5 C9           	ret
294+  05F6
295+  05F6
296+  05F6              vblank1:
297+  05F6
298+  05F6 CD EF 05     	call load_sound_registers
299+  05F9
300+  05F9 3E 01        	ld      a, $1           ; a = 1zz1
301+  05FB 32 01 50         ld     ($5001),a      ; enable audio
302+  05FE
303+  05FE 21 8C 4E          ld      hl,CH1_FREQ0             ; pointer to frequencies and volumes of the 3 voices
304+  0601 11 50 50     	ld      de,#5050                  ; hardware address
305+  0604 01 10 00      	ld      bc,#0010                  ; 16 bytes
306+  0607 ED B0          	ldir
307+  0609
308+  0609 C9             	ret
309+  060A
310+  060A 3A CC 4E     	ld a, (CH1_W_NUM)
311+  060D A7           	and a
312+  060E 3A CF 4E     	ld a, (CH1_W_SEL)
313+  0611 20 03        	jr nz, skip4
314+  0613
315+  0613 3A 9F 4E     	ld a, (CH1_E_TABLE0)
316+  0616
317+  0616              skip4:
318+  0616
319+  0616 32 45 50     	ld ($5045), a
320+  0619
321+  0619 3A DC 4E     	ld a, (CH2_W_NUM)
322+  061C A7           	and a
323+  061D 3A DF 4E     	ld a, (CH2_W_SEL)
324+  0620 20 03        	jr nz, skip5
325+  0622
326+  0622 3A AF 4E     	ld a, (CH2_E_TABLE0)
327+  0625
328+  0625              skip5:
329+  0625
330+  0625 32 4A 50     	ld ($504a), a
331+  0628
332+  0628 3A EC 4E     	ld a, (CH3_W_NUM)
333+  062B A7           	and a
334+  062C 3A EF 4E     	ld a, (CH3_W_SEL)
335+  062F 20 03        	jr nz, skip6
336+  0631
337+  0631 3A BF 4E     	ld a, (CH3_E_TABLE0)
338+  0634
339+  0634              skip6:
340+  0634
341+  0634 32 4F 50     	ld ($504F), a
342+  0637
343+  0637 C9           	ret
344+  0638
345+  0638              vblank2:
346+  0638
347+  0638
348+  0638 CD AE 24     	call process_wave
349+  063B C9           	ret
350+  063C
351+  063C
352+  063C
353+  063C
354+  063C
355+  063C              sfx_walk:
356+  063C
357+  063C
358+  063C
359+  063C E5           	push hl
360+  063D 21 BC 4E     	ld hl, CH3_E_NUM
361+  0640 CB C6        	set 0, (hl)
362+  0642 E1           	pop hl
363+  0643
364+  0643 C9           	ret
365+  0644
366+  0644              sfx_open_door:
367+  0644
368+  0644 E5           	push hl
369+  0645 21 BC 4E     	ld hl, CH3_E_NUM
370+  0648 CB CE        	set 1, (hl)
371+  064A E1           	pop hl
372+  064B
373+  064B C9           	ret
374+  064C
375+  064C              sfx_jump:
376+  064C
377+  064C E5           	push hl
378+  064D 21 BC 4E     	ld hl, CH3_E_NUM
379+  0650 CB D6        	set 2, (hl)
380+  0652 E1           	pop hl
381+  0653
382+  0653 C9           	ret
383+  0654
384+  0654
385+  0654              sfx_got_corn:
386+  0654
387+  0654 E5           	push hl
388+  0655 21 BC 4E     	ld hl, CH3_E_NUM
389+  0658 CB DE        	set 3, (hl)
390+  065A E1           	pop hl
391+  065B
392+  065B C9           	ret
393+  065C
394+  065C
395+  065C              sfx_died:
396+  065C
397+  065C E5           	push hl
398+  065D 21 BC 4E     	ld hl, CH3_E_NUM
399+  0660 CB E6        	set 4, (hl)
400+  0662 E1           	pop hl
401+  0663
402+  0663 C9           	ret
403+  0664
404+  0664              sfx_got_egg:
405+  0664
406+  0664 E5           	push hl
407+  0665 21 BC 4E     	ld hl, CH3_E_NUM
408+  0668 CB EE        	set 5, (hl)
409+  066A E1           	pop hl
410+  066B
411+  066B C9           	ret
412+  066C
413+  066C
414+  066C              sfx_fire:
415+  066C
416+  066C
417+  066C E5           	push hl
418+  066D 21 BC 4E     	ld hl, CH3_E_NUM
419+  0670 CB EE        	set 5, (hl)
420+  0672 E1           	pop hl
421+  0673
422+  0673 C9           	ret
423+  0674
424+  0674              sfx_test:
425+  0674
426+  0674 E5           	push hl
427+  0675 21 BC 4E     	ld hl, CH3_E_NUM
428+  0678 CB FE        	set 7, (hl)
429+  067A E1           	pop hl
430+  067B
431+  067B C9           	ret
432+  067C
433+  067C
434+  067C              sfx_got_key:
435+  067C
436+  067C E5           	push hl
437+  067D 21 BC 4E     	ld hl, CH3_E_NUM
438+  0680 CB F6        	set 6, (hl)
439+  0682 E1           	pop hl
440+  0683
441+  0683 C9           	ret
442+  0684
443+  0684              sfx_climb:
444+  0684
445+  0684 3A 32 4D     	ld a, (moving_up_down)
446+  0687 FE 00        	cp 0
447+  0689 C8           	ret z
448+  068A
449+  068A E5           	push hl
450+  068B 21 BC 4E     	ld hl, CH3_E_NUM
451+  068E CB FE        	set 7, (hl)
452+  0690 E1           	pop hl
453+  0691
454+  0691 C9           	ret
455+  0692
456+  0692
457+  0692              sfx_life:
458+  0692
459+  0692 E5           	push hl
460+  0693 21 9C 4E     	ld hl, CH1_E_NUM
461+  0696 CB CE        	set 1, (hl)
462+  0698 E1           	pop hl
463+  0699
464+  0699 C9           	ret
465+  069A
466+  069A              sfx_coin:
467+  069A
468+  069A
469+  069A E5           	push hl
470+  069B 21 9C 4E     	ld hl, CH1_E_NUM
471+  069E CB C6        	set 0, (hl)
472+  06A0 E1           	pop hl
473+  06A1
474+  06A1 C9           	ret
475+  06A2
476+  06A2
477+  06A2              reset_sound:
478+  06A2
479+  06A2 AF           	xor a
480+  06A3 21 8C 4E         ld  hl,SoundDataStart                                             ;addr to copy from
481+  06A6 11 8D 4E         ld  de,SoundDataStart + 1                                        ;addr to copy to
482+  06A9 01 8C 00         ld  bc,140                                                                ;gonna loop this many times (size of RAM 1007 bytes)
483+  06AC 77               ld  (hl),a                                                                        ;clear (hl), which then gets copied through to de
484+  06AD ED B0            ldir
485+  06AF
486+  06AF C9               ret
487+  06B0
488+  06B0              play_song:
489+  06B0
490+  06B0 32 4C 4D     	ld (song_number), a
491+  06B3
492+  06B3 CD A2 06     	call reset_sound
493+  06B6 CD F6 05     	call vblank1
494+  06B9
495+  06B9 3A 4C 4D     	ld a, (song_number)
496+  06BC 32 CC 4E         ld (CH1_W_NUM), a
497+  06BF 32 DC 4E         ld (CH2_W_NUM), a
498+  06C2
499+  06C2 C9               ret
500+  06C3
501+  06C3
502+  06C3
503+  06C3
504+  06C3              playSound:
505+  06C3
506+  06C3 21 9C 4E     	ld hl, CH1_E_NUM			// 0 =coin
507+  06C6              								// 1=extra life
508+  06C6
509+  06C6
510+  06C6 CB D6            set 2, (hl)					// 2=background hum
511+  06C8                								// 3=background hum med
512+  06C8                  							// 4=background hum high
513+  06C8                  							// 5=background him higher
514+  06C8                  							// 6=background hum even higher
515+  06C8                  							// 7=extra life ding			// using effect table 2
516+  06C8
517+  06C8                  							// 1=endless med chirps
518+  06C8              								// 2=endless low chirps
519+  06C8                  							// 3=endless high chirps
520+  06C8                  							// 4=four med chirps
521+  06C8                  							// 5=rising tone endless
522+  06C8                  							// 6=c64 space loop
523+  06C8                  							// 7=long tone unused
524+  06C8
525+  06C8
526+  06C8              								// 1=med blip (good for key?)
527+  06C8              								// 2=eat ghost
528+  06C8                  							// 3=quick rising bloop
529+  06C8                  							// 4=died
530+  06C8                  							// 5=rising tone endless
531+  06C8                  							// 6=higher blip
532+  06C8                  							// 7=nothing
533+  06C8
534+  06C8
535+  06C8
536+  06C8
537+  06C8
538+  06C8 C9               ret
539+  06C9
# file closed: scripts/system/sound/sound.asm
 23   06C9                  include "scripts/system/screens/lost_life.asm"
# file opened: scripts/system/screens/lost_life.asm
  1+  06C9
  2+  06C9              lose_update:
  3+  06C9
  4+  06C9
  5+  06C9 DD 21 B9 4C       ld ix, sprite0
  6+  06CD
  7+  06CD CD 30 3C          call update_frame
  8+  06D0 CD 74 3C          call calculate_frame
  9+  06D3 CD 85 35          call harry_jumping
 10+  06D6
 11+  06D6
 12+  06D6
 13+  06D6 3A 26 4D          ld a, (harry_state)
 14+  06D9 FE 03             cp STATE_FALLING
 15+  06DB C2 06 07          jp nz, skipFall
 16+  06DE
 17+  06DE DD 7E 10          ld a, (ix+spr_x)
 18+  06E1 FE 0E             cp 14
 19+  06E3 DA 09 07          jp c, lose_reset
 20+  06E6
 21+  06E6                  ; set flipy,(ix)
 22+  06E6
 23+  06E6 3A 18 4D          ld a, (temp_byte)
 24+  06E9 C6 02             add 2
 25+  06EB 32 18 4D          ld (temp_byte), a
 26+  06EE CB 3F             srl a
 27+  06F0 CB 3F             srl a
 28+  06F2 CB 3F             srl a
 29+  06F4 CB 3F             srl a
 30+  06F6 CB 3F             srl a
 31+  06F8 C6 01             add 1
 32+  06FA 47                ld b, a
 33+  06FB
 34+  06FB DD 21 B9 4C       ld ix, sprite0
 35+  06FF DD 7E 10          ld a, (ix+spr_x)
 36+  0702 80                add b
 37+  0703
 38+  0703 DD 77 10          ld (ix+spr_x), a
 39+  0706
 40+  0706
 41+  0706              skipFall:
 42+  0706
 43+  0706 C3 78 3F     	 jp wait
 44+  0709
 45+  0709
 46+  0709              lose_reset:
 47+  0709
 48+  0709
 49+  0709
 50+  0709 3E FF            ld a, 255
 51+  070B 32 09 4D         ld (mode), a
 52+  070E
 53+  070E DD CB 00 C6       set flipy,(ix)
 54+  0712
 55+  0712 06 32              ld b, 50
 56+  0714
 57+  0714              stopabit:
 58+  0714
 59+  0714 76                 halt
 60+  0715 10 FD              djnz stopabit
 61+  0717
 62+  0717 3A 86 4C           ld a, (is_attract_mode)
 63+  071A FE 00              cp 0
 64+  071C CA 30 07           jp z, noReturn
 65+  071F
 66+  071F 3E 00              ld a, 0
 67+  0721
 68+  0721 21 BC 4E           ld hl, CH3_E_NUM
 69+  0724 77                 ld (hl), a
 70+  0725
 71+  0725 21 AC 4E           ld hl, CH2_E_NUM
 72+  0728 77                 ld (hl), a
 73+  0729
 74+  0729 21 9C 4E             ld hl, CH1_E_NUM
 75+  072C 77                 ld (hl), a
 76+  072D
 77+  072D C3 0B 01           jp start_title_mode
 78+  0730
 79+  0730              noReturn:
 80+  0730
 81+  0730 3A 14 4D     	  ld a,(player_lives)
 82+  0733 3D           	  dec a
 83+  0734 32 14 4D     	  ld (player_lives), a
 84+  0737 FE 00        	  cp 0
 85+  0739 C2 3F 07     	  jp nz, NotGameOver
 86+  073C
 87+  073C C3 AC 22     	  jp start_game_over
 88+  073F
 89+  073F              NotGameOver:
 90+  073F
 91+  073F DD 21 B9 4C      ld ix, sprite0
 92+  0743 DD CB 00 86      res flipy,(ix)                              ;flip x - set to 1
 93+  0747
 94+  0747
 95+  0747 DD 21 B9 4C      ld ix, sprite0
 96+  074B 3A 24 4D         ld a, (spawn_x)
 97+  074E DD 77 10         ld (ix+spr_x), a
 98+  0751
 99+  0751 3A 25 4D         ld a, (spawn_y)
100+  0754 DD 77 11         ld (ix+spr_y), a
101+  0757
102+  0757 3E 50             ld a, invincible_time
103+  0759 32 A2 4C          ld (harry_invincible_timer), a
104+  075C
105+  075C 3A 91 4C         ld a, (current_level_time)
106+  075F 32 39 4C         ld (time_remaining + 1), a
107+  0762
108+  0762 3A 96 4C          ld a, (hens_to_spawn)
109+  0765                   ;ld de, tile_ram_start + row_0 + column_19
110+  0765                   ;ld (de), a
111+  0765 32 95 4C          ld (number_hens), a
112+  0768
113+  0768 CD 5E 0B         call delete_lifts
114+  076B
115+  076B 2A 3E 4C         ld hl, (hen_data_address)
116+  076E
117+  076E CD D6 29         call initialise_hens
118+  0771 CD 32 2F         call init_mother
119+  0774
120+  0774
121+  0774 3E 02             ld a, game_mode
122+  0776 32 09 4D          ld (mode), a
123+  0779
124+  0779 C3 78 3F     	jp wait
125+  077C
126+  077C
127+  077C              lose_set:
128+  077C
129+  077C                  //call SFX_died_died
130+  077C
131+  077C
132+  077C CD B2 38         call harry_jump_no_sound
133+  077F
134+  077F 3E 08        	ld a, life_lost
135+  0781 32 09 4D        	ld (mode),a
136+  0784
137+  0784 3E 32            ld a, 50
138+  0786 32 15 4D         ld (life_lost_counter), a
139+  0789
140+  0789 CD 5C 06         call sfx_died
141+  078C
142+  078C                 // ld ix, sprite0
143+  078C                                      ;flip x - set to 1
144+  078C
145+  078C 3E 00            ld a, 0
146+  078E 32 18 4D         ld (temp_byte), a
147+  0791
148+  0791 3E 01            ld a, 1
149+  0793 32 37 4C         ld (lives_lost_level), a
150+  0796
151+  0796 C9               ret
152+  0797
153+  0797
154+  0797
155+  0797
156+  0797
# file closed: scripts/system/screens/lost_life.asm
 24   0797                  include "scripts/system/display/map.asm"
# file opened: scripts/system/display/map.asm
  1+  0797
  2+  0797
  3+  0797              // ixh = width
  4+  0797              // iyl = tile_type
  5+  0797              // iyh = colour
  6+  0797              // a = x
  7+  0797              // b = y
  8+  0797              //
  9+  0797
 10+  0797              // ixl used in tile lookup
 11+  0797
 12+  0797              get_next_bytes2:
 13+  0797
 14+  0797
 15+  0797 47           	ld b, a
 16+  0798
 17+  0798 23           	inc hl // y
 18+  0799 7E           	ld a, (hl)
 19+  079A C6 02        	add 2
 20+  079C 4F           	ld c, a
 21+  079D
 22+  079D 23           	inc hl
 23+  079E 7E           	ld a, (hl)
 24+  079F DD 67        	ld ixh, a
 25+  07A1
 26+  07A1 C9           	ret
 27+  07A2
 28+  07A2              draw_map:
 29+  07A2
 30+  07A2 CB 27        	sla  a
 31+  07A4 6F           	ld l, a
 32+  07A5 26 00        	ld h, 0
 33+  07A7 11 CA 15     	ld de, level_data
 34+  07AA 19           	add hl, de
 35+  07AB
 36+  07AB 7E           	ld a, (hl)
 37+  07AC 23           	inc hl
 38+  07AD 66           	ld h, (hl)
 39+  07AE 6F           	ld l, a
 40+  07AF
 41+  07AF              draw_transition:
 42+  07AF
 43+  07AF              draw_tile_type:
 44+  07AF
 45+  07AF 7E           	ld a, (hl)
 46+  07B0 FE FD        	cp -3
 47+  07B2 C8           	ret z
 48+  07B3
 49+  07B3 FE FE        	cp -2
 50+  07B5 CA D6 29     	jp z, initialise_hens
 51+  07B8
 52+  07B8 FD 6F        	ld iyl, a  // tile
 53+  07BA
 54+  07BA 23           	inc hl
 55+  07BB 7E           	ld a, (hl)
 56+  07BC FD 67        	ld iyh, a  // colour
 57+  07BE
 58+  07BE 3A 7D 4C     	ld a, (force_colour)
 59+  07C1 FE FF        	cp 255
 60+  07C3 CA C8 07     	jp z, noForce
 61+  07C6
 62+  07C6 FD 67        	ld iyh, a
 63+  07C8
 64+  07C8              noForce:
 65+  07C8
 66+  07C8 23           	inc hl
 67+  07C9 7E           	ld a, (hl)
 68+  07CA 32 43 4D     	ld (tile_direction), a  // direction
 69+  07CD
 70+  07CD 23           	inc hl
 71+  07CE
 72+  07CE
 73+  07CE              draw_platforms:
 74+  07CE
 75+  07CE 7E           	ld a, (hl) // x
 76+  07CF FE FF        	cp -1
 77+  07D1 C2 D8 07     	jp nz, continue_platforms
 78+  07D4
 79+  07D4 23           	inc hl
 80+  07D5 C3 AF 07     	jp draw_tile_type
 81+  07D8
 82+  07D8              continue_platforms:
 83+  07D8
 84+  07D8
 85+  07D8 CD 97 07     	call get_next_bytes2
 86+  07DB
 87+  07DB 22 A8 4C     	ld (map_address), hl
 88+  07DE
 89+  07DE 79           	ld a, c
 90+  07DF
 91+  07DF CD 47 21     	call calc_tile_location
 92+  07E2
 93+  07E2 3A 43 4D     	ld a, (tile_direction)
 94+  07E5 FE 00        	cp 0
 95+  07E7 C2 F0 07     	jp nz, vertical_tiles
 96+  07EA
 97+  07EA CD 0E 08     	call first_loop
 98+  07ED C3 CE 07     	jp draw_platforms
 99+  07F0
100+  07F0              vertical_tiles:
101+  07F0
102+  07F0 CD F8 07     	call first_loop_v
103+  07F3 C3 CE 07     	jp draw_platforms
104+  07F6
105+  07F6
106+  07F6              vertical_tile_loop:
107+  07F6
108+  07F6 DD 60        	ld ixh, b
109+  07F8
110+  07F8              first_loop_v:
111+  07F8
112+  07F8 CD 22 08     	call draw_map_tile
113+  07FB
114+  07FB
115+  07FB 7D           	ld a, l
116+  07FC C6 01        	add 1
117+  07FE 6F           	ld l, a
118+  07FF
119+  07FF 7C           	ld a, h
120+  0800 CE 00        	adc 0
121+  0802 67           	ld h, a
122+  0803
123+  0803
124+  0803 DD 44        	ld b, ixh
125+  0805
126+  0805 10 EF        	djnz vertical_tile_loop
127+  0807
128+  0807                      // a = x
129+  0807                      // b = y
130+  0807 2A A8 4C        	ld hl, (map_address)
131+  080A 23               inc hl
132+  080B
133+  080B C9               ret
134+  080C
135+  080C
136+  080C
137+  080C
138+  080C              horizontal_tile_loop:
139+  080C
140+  080C DD 60        	ld ixh, b
141+  080E
142+  080E              first_loop:
143+  080E
144+  080E CD 22 08     	call draw_map_tile
145+  0811
146+  0811
147+  0811 7D           	ld a, l
148+  0812 D6 20        	sub 32
149+  0814 6F           	ld l, a
150+  0815
151+  0815 7C           	ld a, h
152+  0816 DE 00        	sbc 0
153+  0818 67           	ld h, a
154+  0819
155+  0819
156+  0819 DD 44        	ld b, ixh
157+  081B
158+  081B 10 EF        	djnz horizontal_tile_loop
159+  081D
160+  081D                      // a = x
161+  081D                      // b = y
162+  081D 2A A8 4C        	ld hl, (map_address)
163+  0820 23               inc hl
164+  0821
165+  0821 C9               ret
166+  0822
167+  0822
168+  0822              draw_map_tile:
169+  0822
170+  0822 FD 7D        	ld a, iyl
171+  0824 77           	ld (hl), a
172+  0825 FE E3        	cp tile_egg
173+  0827 C2 31 08     	jp nz, notEggPlaced
174+  082A
175+  082A 3A 7E 4C     	ld a, (eggs_remaining)
176+  082D 3C           	inc a
177+  082E 32 7E 4C     	ld (eggs_remaining), a
178+  0831
179+  0831
180+  0831              notEggPlaced:
181+  0831
182+  0831 CB D4        	set 2,h
183+  0833
184+  0833 FD 7C        	ld a, iyh
185+  0835 77           	ld (hl), a
186+  0836
187+  0836 CB 94        	res 2, h
188+  0838
189+  0838
190+  0838 C9           	ret
191+  0839
192+  0839
193+  0839              two_by_two_tiles:
194+  0839
195+  0839              	;ret
196+  0839
197+  0839 3A 09 4D     	ld a, (mode)
198+  083C FE 01        	cp title_mode
199+  083E C8           	ret z
200+  083F
201+  083F 23           	inc hl
202+  0840
203+  0840 7E           	ld a, (hl)
204+  0841 FE FC        	cp -4
205+  0843 C8           	ret z
206+  0844
207+  0844 4F           	ld c, a
208+  0845
209+  0845 23           	inc hl
210+  0846 7E           	ld a, (hl)
211+  0847 47           	ld b, a
212+  0848
213+  0848 23           	inc hl
214+  0849 7E           	ld a, (hl)
215+  084A FD 6F        	ld iyl, a
216+  084C
217+  084C 23           	inc hl
218+  084D 7E           	ld a, (hl)
219+  084E FD 67        	ld iyh, a
220+  0850
221+  0850 22 A8 4C     	ld (map_address), hl
222+  0853
223+  0853 79           	ld a, c
224+  0854
225+  0854
226+  0854 CD 47 21     	call calc_tile_location
227+  0857 CD 22 08     	call draw_map_tile
228+  085A
229+  085A CD 73 08     	call moveDownTile
230+  085D CD 22 08     	call draw_map_tile
231+  0860
232+  0860 CD 7B 08     	call moveUpRightTile
233+  0863 CD 22 08     	call draw_map_tile
234+  0866
235+  0866 CD 73 08     	call moveDownTile
236+  0869 CD 22 08     	call draw_map_tile
237+  086C
238+  086C 2A A8 4C     	ld hl, (map_address)
239+  086F
240+  086F C3 39 08     	jp two_by_two_tiles
241+  0872
242+  0872
243+  0872
244+  0872
245+  0872 C9           	ret
246+  0873
247+  0873
248+  0873              moveDownTile:
249+  0873
250+  0873 FD 7D        	ld a, iyl
251+  0875 C6 10        	add 16
252+  0877 FD 6F        	ld iyl, a
253+  0879
254+  0879 23           	inc hl
255+  087A
256+  087A C9           	ret
257+  087B
258+  087B
259+  087B              moveUpRightTile:
260+  087B
261+  087B FD 7D        	ld a, iyl
262+  087D D6 0F        	sub 15
263+  087F FD 6F        	ld iyl, a
264+  0881
265+  0881 7D           	ld a, l
266+  0882 D6 21        	sub 33
267+  0884 6F           	ld l, a
268+  0885
269+  0885 7C           	ld a, h
270+  0886 DE 00        	sbc 0
271+  0888 67           	ld h, a
272+  0889
273+  0889 C9           	ret
274+  088A
275+  088A
# file closed: scripts/system/display/map.asm
 25   088A                  include "scripts/system/screens/high_score.asm"
# file opened: scripts/system/screens/high_score.asm
  1+  088A              start_high_score:
  2+  088A
  3+  088A 3E 40        	  ld a,high_score_mode                                                                ;set mode to game over
  4+  088C 32 09 4D           ld (mode),a
  5+  088F
  6+  088F
  7+  088F 3E 32              ld a, title_seq_time
  8+  0891 32 12 4D           ld (game_time), a
  9+  0894
 10+  0894 CD AD 20           call clear_tile_ram
 11+  0897 CD 1E 24           call hide_sprites
 12+  089A
 13+  089A 3E 01               ld  a,palette_white_blue_red
 14+  089C CD BC 20           call clear_colour_ram
 15+  089F
 16+  089F
 17+  089F CD 1D 02      	  call logo_text
 18+  08A2 CD C8 01      	  call draw_eggs
 19+  08A5
 20+  08A5 11 25 34      	  ld de,msg_high_table                                                  ;get text addr for game message
 21+  08A8 21 A8 41           ld hl,tile_ram_start + row_8 + column_16                                 ;vram address for text
 22+  08AB 0E 15              ld c,palette_orange_green_orange                       ;colour red
 23+  08AD CD 66 20           call main_blit_text_and_colour
 24+  08B0
 25+  08B0
 26+  08B0
 27+  08B0
 28+  08B0 C3 78 3F     	jp wait
 29+  08B3
 30+  08B3
 31+  08B3
 32+  08B3              check_high_score:
 33+  08B3
 34+  08B3
 35+  08B3 06 06        	ld b, NUM_HIGH_SCORES
 36+  08B5 DD 21 5A 4C  	ld ix, high_scores + 6
 37+  08B9
 38+  08B9 21 5A 4C     	ld hl,high_scores + 6
 39+  08BC
 40+  08BC              check_row_loop:
 41+  08BC
 42+  08BC 78           	ld a, b
 43+  08BD 32 19 4D     	ld (temp_byte2), a
 44+  08C0
 45+  08C0
 46+  08C0 22 B0 4C     	ld (temp_address), hl
 47+  08C3                    ;now check high score to see if bigger start with high bytes
 48+  08C3 06 03               ld b,3
 49+  08C5 11 11 4D            ld de,current_score + 3                                                ;get high byte first (point one too far as we dec straight away)
 50+  08C8                                                              ;get high byte first (point one too far as we dec straight away)
 51+  08C8              .check_loop2:
 52+  08C8 1B                   dec de                                                                                ;move to next most significant bytes
 53+  08C9 2B                   dec hl
 54+  08CA 7E                   ld a, (hl)                                                                           ;for score and high score
 55+  08CB 1A                   ld a,(de)                                                                        ;load score byte
 56+  08CC BE                   cp (hl)                                                                                ;compare with highscore byte (does subtract but doesn't affect a register)
 57+  08CD                      ;daa                                                                                        ;correct for bcd numbers (in case we have 80 and above as these would appear as -ve numbers)
 58+  08CD CA D6 08             jp z, .nextByte2
 59+  08D0 DA D8 08             jp c, .nextScore                                                                             ;not bigger so stop checking
 60+  08D3 C2 ED 08             jp nz,.found_high_score
 61+  08D6              .nextByte2:                                           ;if numbers not the same then we have a new high score so stop checking
 62+  08D6 10 F0                djnz .check_loop2
 62+  08D8                                                                       ;do for all 4 bytes if necessary (until b = 0)
 63+  08D8
 64+  08D8
 65+  08D8              .nextScore:
 66+  08D8 3A 19 4D          ld a, (temp_byte2)
 67+  08DB 47                ld b, a
 68+  08DC
 69+  08DC 2A B0 4C          ld hl, (temp_address)
 70+  08DF 23                inc hl
 71+  08E0 23                inc hl
 72+  08E1 23                inc hl
 73+  08E2 23                inc hl
 74+  08E3 23                inc hl
 75+  08E4 23                inc hl
 76+  08E5
 77+  08E5
 78+  08E5 10 D5             djnz check_row_loop
 79+  08E7
 80+  08E7 3E FF             ld a, 255
 81+  08E9 32 7B 4C          ld (high_score_index), a
 82+  08EC
 83+  08EC
 84+  08EC C9                ret
 85+  08ED
 86+  08ED              .found_high_score:
 87+  08ED
 88+  08ED 3A 19 4D     	ld a, (temp_byte2)
 89+  08F0 32 7B 4C     	ld (high_score_index), a
 90+  08F3
 91+  08F3
 92+  08F3 3A 7B 4C     	ld a, (high_score_index)
 93+  08F6 FE 00        	cp 0
 94+  08F8 CA 1C 09     	jp z, noShiftDown
 95+  08FB
 96+  08FB 47           	ld b, a
 97+  08FC
 98+  08FC 11 78 4C      	ld de, high_scores + (NUM_HIGH_SCORES * 6)
 99+  08FF 21 72 4C      	ld hl, high_scores + ((NUM_HIGH_SCORES - 1) * 6)
100+  0902
101+  0902              shift_loop2:
102+  0902
103+  0902 1B              	dec de                                                                                ;move to next most significant bytes
104+  0903 2B               dec hl
105+  0904 7E               ld a,(hl)                                                                           ;for score and high score
106+  0905 12               ld (de), a
107+  0906
108+  0906 1B               dec de                                                                                ;move to next most significant bytes
109+  0907 2B               dec hl
110+  0908 7E               ld a,(hl)                                                                           ;for score and high score
111+  0909 12               ld (de), a
112+  090A
113+  090A 1B               dec de                                                                                ;move to next most significant bytes
114+  090B 2B               dec hl
115+  090C 7E               ld a,(hl)                                                                           ;for score and high score
116+  090D 12               ld (de), a
117+  090E
118+  090E 1B               dec de                                                                                ;move to next most significant bytes
119+  090F 2B               dec hl
120+  0910 7E               ld a,(hl)                                                                           ;for score and high score
121+  0911 12               ld (de), a
122+  0912
123+  0912 1B               dec de                                                                                ;move to next most significant bytes
124+  0913 2B               dec hl
125+  0914 7E               ld a,(hl)                                                                           ;for score and high score
126+  0915 12               ld (de), a
127+  0916
128+  0916 1B               dec de                                                                                ;move to next most significant bytes
129+  0917 2B               dec hl
130+  0918 7E               ld a,(hl)                                                                           ;for score and high score
131+  0919 12               ld (de), a
132+  091A
133+  091A 10 E6            djnz shift_loop2
134+  091C
135+  091C              noShiftDown:
136+  091C
137+  091C
138+  091C 2A B0 4C     	ld hl, (temp_address)
139+  091F 2B           	dec hl
140+  0920 2B           	dec hl
141+  0921 2B           	dec hl
142+  0922 2B           	dec hl
143+  0923 2B           	dec hl
144+  0924 2B           	dec hl
145+  0925 22 79 4C     	ld (high_score_address), hl
146+  0928
147+  0928 3E 41        	ld a, $41
148+  092A 77           	ld (hl), a
149+  092B
150+  092B 3E 40        	ld a, $40
151+  092D 23           	inc hl
152+  092E 77           	ld (hl), a
153+  092F 23           	inc hl
154+  0930 77           	ld (hl), a
155+  0931
156+  0931 3A 0E 4D     	ld a, (current_score)
157+  0934 23           	inc hl
158+  0935 77           	ld (hl), a
159+  0936
160+  0936 3A 0F 4D     	ld a, (current_score + 1)
161+  0939 23           	inc hl
162+  093A 77           	ld (hl), a
163+  093B
164+  093B 3A 10 4D     	ld a, (current_score + 2)
165+  093E 23           	inc hl
166+  093F 77           	ld (hl), a
167+  0940
168+  0940
169+  0940
170+  0940 C9           	ret
171+  0941
172+  0941
173+  0941
174+  0941
175+  0941
176+  0941              high_score_update:
177+  0941
178+  0941 3A A5 4C     	ld a, (frame_counter)
179+  0944 E6 03        	and %00000011
180+  0946 C2 4C 09     	jp nz, noDraw
181+  0949
182+  0949 CD F7 09     	call draw_scores
183+  094C
184+  094C              noDraw:
185+  094C
186+  094C 3A 78 4C     	ld a, (high_score_state)
187+  094F FE 00        	cp viewing_high_score
188+  0951 CA B8 09     	jp z, noEdit
189+  0954
190+  0954
191+  0954              editing:
192+  0954
193+  0954 3A 50 4C     	ld a, (cooldown)
194+  0957 FE 00        	cp 0
195+  0959 CA 63 09     	jp z, readyEnter
196+  095C
197+  095C 3D           	dec a
198+  095D 32 50 4C     	ld (cooldown), a
199+  0960 C3 F4 09     	jp noAttract
200+  0963
201+  0963              readyEnter:
202+  0963
203+  0963 3E 06        	ld a, 6
204+  0965 32 50 4C     	ld (cooldown), a
205+  0968
206+  0968 3A 32 4C     	ld a,(joystick_state)                                                                                  ;get state again
207+  096B E6 11            and inp_chk_up                                                       ;examine down                                                                                ;check if pressed
208+  096D C2 AD 09         jp nz, init_up
209+  0970
210+  0970 3A 32 4C         ld a,(joystick_state)
211+  0973 E6 88            and inp_chk_down
212+  0975 C2 9F 09         jp nz, init_down
213+  0978
214+  0978 3A 33 4C         ld a, (start_state)
215+  097B E6 10        	and inp_p1_fire                                                   ;examine down                                                                     ;check if pressed
216+  097D CA F4 09         jp z, noAttract
217+  0980
218+  0980 2A 79 4C         ld hl, (high_score_address)
219+  0983 23               inc hl
220+  0984 22 79 4C         ld (high_score_address), hl
221+  0987
222+  0987 7E               ld a, (hl)
223+  0988 FE 40            cp $40
224+  098A CA 9A 09         jp z, isSpace
225+  098D
226+  098D 3E 32            ld a, 50
227+  098F 32 50 4C         ld (cooldown), a
228+  0992
229+  0992 3E 00            ld a, viewing_high_score
230+  0994 32 78 4C         ld (high_score_state), a
231+  0997 C3 F4 09         jp noAttract
232+  099A
233+  099A              isSpace:
234+  099A
235+  099A 3C            	inc a
236+  099B 77            	ld (hl), a
237+  099C
238+  099C C3 F4 09        jp noAttract
239+  099F
240+  099F
241+  099F              init_down:
242+  099F
243+  099F 2A 79 4C     	ld hl, (high_score_address)
244+  09A2 7E           	ld a, (hl)
245+  09A3
246+  09A3 FE 5A        	cp $5A
247+  09A5 CA F4 09     	jp z, noAttract
248+  09A8
249+  09A8 3C           	inc a
250+  09A9 77           	ld (hl), a
251+  09AA
252+  09AA
253+  09AA C3 F4 09     	jp noAttract
254+  09AD
255+  09AD
256+  09AD              init_up:
257+  09AD
258+  09AD 2A 79 4C     	ld hl, (high_score_address)
259+  09B0 7E           	ld a, (hl)
260+  09B1
261+  09B1 FE 41        	cp $41
262+  09B3 CA F4 09     	jp z, noAttract
263+  09B6
264+  09B6 3D           	dec a
265+  09B7 77           	ld (hl), a
266+  09B8
267+  09B8
268+  09B8
269+  09B8              noEdit:
270+  09B8
271+  09B8 3A 50 4C     	ld a, (cooldown)
272+  09BB FE 00        	cp 0
273+  09BD CA C7 09     	jp z, readyEnter2
274+  09C0
275+  09C0 3D           	dec a
276+  09C1 32 50 4C     	ld (cooldown), a
277+  09C4 C3 F4 09     	jp noAttract
278+  09C7
279+  09C7              readyEnter2:
280+  09C7
281+  09C7 3A 33 4C     	ld a,(start_state)                                                        ;get state
282+  09CA E6 50            and inp_chk_p1st                                                        ;examine p1 start
283+  09CC FE 40            cp inp_p1_presd                                                                ;check for pressed
284+  09CE C2 D8 09         jp nz,noCountdown2
285+  09D1
286+  09D1 AF               xor a
287+  09D2 32 86 4C         ld (is_attract_mode), a
288+  09D5
289+  09D5 C3 82 02         jp start_game
290+  09D8
291+  09D8
292+  09D8
293+  09D8              noCountdown2:
294+  09D8
295+  09D8 3A A5 4C         ld a, (frame_counter)
296+  09DB E6 0F            and %00001111
297+  09DD C2 F4 09         jp nz, noAttract
298+  09E0
299+  09E0 3A 12 4D         ld a, (game_time)
300+  09E3 3D               dec a
301+  09E4 32 12 4D         ld (game_time), a
302+  09E7 FE 00            cp 0
303+  09E9 C2 F4 09         jp nz, noAttract
304+  09EC
305+  09EC 3E 01            ld a, 1
306+  09EE 32 86 4C         ld (is_attract_mode), a
307+  09F1
308+  09F1 C3 82 02     	jp start_game
309+  09F4
310+  09F4              noAttract:
311+  09F4
312+  09F4
313+  09F4 C3 78 3F     	jp wait
314+  09F7
315+  09F7              ;high_score_low_byte:			equ 2
316+  09F7              ;high_score_med_byte:			equ 1
317+  09F7              ;high_score_high_byte:			equ 0
318+  09F7              ;high_score_init_1:				equ 3
319+  09F7              ;high_score_init_2:				equ 4
320+  09F7              ;high_score_init_3:				equ 5
321+  09F7
322+  09F7              draw_scores:
323+  09F7
324+  09F7 06 06        	ld b, NUM_HIGH_SCORES
325+  09F9 DD 21 54 4C  	ld ix, high_scores
326+  09FD 21 EA 41         ld hl, tile_ram_start + row_10 + column_14
327+  0A00
328+  0A00              draw_score_loop:
329+  0A00
330+  0A00
331+  0A00 78           	ld a, b
332+  0A01 32 19 4D     	ld (temp_byte2), a
333+  0A04
334+  0A04 FD 2E 0F     	ld iyl, grey
335+  0A07
336+  0A07 3A 78 4C     	ld a, (high_score_state)
337+  0A0A FE 00        	cp viewing_high_score
338+  0A0C CA 16 0A     	jp z, flash_names
339+  0A0F
340+  0A0F 3A 7B 4C     	ld a, (high_score_index)
341+  0A12 B8           	cp b
342+  0A13 C2 1B 0A     	jp nz, now_draw_row
343+  0A16
344+  0A16              flash_names:
345+  0A16
346+  0A16 CD CD 21         call get_random_colour
347+  0A19 FD 6F            ld iyl, a
348+  0A1B
349+  0A1B              now_draw_row:
350+  0A1B
351+  0A1B CD 38 0A         call draw_score_row
352+  0A1E
353+  0A1E 7D               ld a, l
354+  0A1F D6 0C            sub 12
355+  0A21 6F               ld l, a
356+  0A22
357+  0A22
358+  0A22
359+  0A22
360+  0A22                 ; call moveTileDownHL
361+  0A22 CD DB 20         call moveTwoTilesDownHL
362+  0A25
363+  0A25 DD 23           	inc ix
364+  0A27 DD 23           	inc ix
365+  0A29 DD 23           	inc ix
366+  0A2B DD 23           	inc ix
367+  0A2D DD 23           	inc ix
368+  0A2F DD 23           	inc ix
369+  0A31
370+  0A31
371+  0A31
372+  0A31 3A 19 4D        	ld a, (temp_byte2)
373+  0A34 47              	ld b, a
374+  0A35
375+  0A35 10 C9           	djnz draw_score_loop
376+  0A37
377+  0A37 C9           	ret
378+  0A38
379+  0A38
380+  0A38              draw_score_row:
381+  0A38
382+  0A38              	;call get_random_colour
383+  0A38              	;ld a, grey
384+  0A38              	;ld iyl, a
385+  0A38
386+  0A38 DD 7E 00     	ld a, (ix+high_score_init_1)
387+  0A3B
388+  0A3B CD 66 0A     	call draw_init_colour
389+  0A3E
390+  0A3E 23           	inc hl
391+  0A3F DD 7E 01     	ld a, (ix+high_score_init_2)
392+  0A42 CD 66 0A     	call draw_init_colour
393+  0A45
394+  0A45
395+  0A45 23           	inc hl
396+  0A46 DD 7E 02     	ld a, (ix+high_score_init_3)
397+  0A49 CD 66 0A     	call draw_init_colour
398+  0A4C
399+  0A4C 23           	inc hl
400+  0A4D 23           	inc hl
401+  0A4E 23           	inc hl
402+  0A4F 23           	inc hl
403+  0A50
404+  0A50 DD 7E 05     	ld a, (ix+high_score_high_byte)
405+  0A53 4F           	ld c, a
406+  0A54 CD 78 24     	call show_hex
407+  0A57
408+  0A57 DD 7E 04     	ld a, (ix+high_score_med_byte)
409+  0A5A 4F           	ld c, a
410+  0A5B CD 78 24     	call show_hex
411+  0A5E
412+  0A5E
413+  0A5E
414+  0A5E DD 7E 03     	ld a, (ix+high_score_low_byte)
415+  0A61 4F           	ld c, a
416+  0A62 CD 78 24     	call show_hex
417+  0A65
418+  0A65
419+  0A65 C9           	ret
420+  0A66
421+  0A66              draw_init_colour:
422+  0A66
423+  0A66 77           	ld (hl), a
424+  0A67
425+  0A67 CB D4        	set 2, h
426+  0A69 FD 7D        	ld a, iyl
427+  0A6B
428+  0A6B 77           	ld (hl), a
429+  0A6C
430+  0A6C CB 94        	res 2, h
431+  0A6E
432+  0A6E C9           	ret
# file closed: scripts/system/screens/high_score.asm
 26   0A6F                  include "scripts/gameplay/objects/lifts.asm"
# file opened: scripts/gameplay/objects/lifts.asm
  1+  0A6F
  2+  0A6F              lift_speed 		equ 1
  3+  0A6F
  4+  0A6F
  5+  0A6F              lifts_update:
  6+  0A6F
  7+  0A6F
  8+  0A6F              	;ret
  9+  0A6F              	;'ret
 10+  0A6F DD 21 00 4C  	ld ix, lift_data
 11+  0A73
 12+  0A73 DD 6E 00 DD  	ld hl, (ix)
 12+  0A77 66 01
 13+  0A79
 14+  0A79 7C           	ld a, h
 15+  0A7A FE 00        	cp 0
 16+  0A7C C8           	ret z
 17+  0A7D
 18+  0A7D              ;	ld hl, tile_ram_start + row_0 + column_4
 19+  0A7D              ;	inc (hl)
 20+  0A7D
 21+  0A7D 3A 51 4C     	ld a, (lift_timer)
 22+  0A80 FE 00        	cp 0
 23+  0A82 CA 8A 0A     	jp z, moveLifts
 24+  0A85
 25+  0A85 3D           	dec a
 26+  0A86 32 51 4C     	ld (lift_timer), a
 27+  0A89
 28+  0A89 C9           	ret
 29+  0A8A
 30+  0A8A
 31+  0A8A              moveLifts:
 32+  0A8A
 33+  0A8A 3E 01        	ld a, lift_speed
 34+  0A8C 32 51 4C     	ld (lift_timer), a
 35+  0A8F
 36+  0A8F CD 5E 0B     	call delete_lifts
 37+  0A92
 38+  0A92 DD 21 00 4C  	ld ix, lift_data
 39+  0A96 DD 7E 02     	ld a, (ix + lift_sprite_x)
 40+  0A99 3D           	dec a
 41+  0A9A DD 77 02     	ld (ix + lift_sprite_x), a
 42+  0A9D
 43+  0A9D DD 7E 06     	ld a, (ix + 4 + lift_sprite_x)
 44+  0AA0 3D           	dec a
 45+  0AA1 DD 77 06     	ld (ix + 4 + lift_sprite_x), a
 46+  0AA4
 47+  0AA4 3A 3B 4D     	ld a, (harry_on_lift)
 48+  0AA7 FE 00        	cp 0
 49+  0AA9 CA B3 0A     	jp z, notOnLift
 50+  0AAC
 51+  0AAC 3A C9 4C     	ld a, (sprite0 + spr_x)
 52+  0AAF 3D           	dec a
 53+  0AB0 32 C9 4C     	ld (sprite0 + spr_x), a
 54+  0AB3
 55+  0AB3
 56+  0AB3              notOnLift:
 57+  0AB3
 58+  0AB3
 59+  0AB3 3A 52 4C     	ld a, (lift_y_offset)
 60+  0AB6 3C           	inc a
 61+  0AB7 FE 08        	cp 8
 62+  0AB9 DA C1 0A     	jp c, noMoveTile
 63+  0ABC
 64+  0ABC
 65+  0ABC
 66+  0ABC CD C8 0A     	call shift_lifts
 67+  0ABF
 68+  0ABF 3E 00        	ld a, 0
 69+  0AC1              noMoveTile:
 70+  0AC1
 71+  0AC1 32 52 4C     	ld (lift_y_offset), a
 72+  0AC4
 73+  0AC4 CD 10 0B     	call draw_lifts
 74+  0AC7
 75+  0AC7
 76+  0AC7
 77+  0AC7
 78+  0AC7 C9           	ret
 79+  0AC8
 80+  0AC8
 81+  0AC8
 82+  0AC8
 83+  0AC8
 84+  0AC8              shift_lifts:
 85+  0AC8
 86+  0AC8
 87+  0AC8 06 02        	ld b, 2
 88+  0ACA DD 21 00 4C  	ld ix, lift_data
 89+  0ACE
 90+  0ACE              shift_loop:
 91+  0ACE
 92+  0ACE DD 6E 00 DD  	ld hl, (ix)
 92+  0AD2 66 01
 93+  0AD4 CD D2 20     	call moveTileUpHL
 94+  0AD7 DD 75 00 DD  	ld (ix), hl
 94+  0ADB 74 01
 95+  0ADD
 96+  0ADD 7C           	ld a, h
 97+  0ADE FE 40        	cp $40
 98+  0AE0 C2 05 0B     	jp nz, nextLiftShift
 99+  0AE3
100+  0AE3 7D           	ld a, l
101+  0AE4 E6 F0        	and %11110000
102+  0AE6 FE E0        	cp $E0
103+  0AE8 CA F3 0A     	jp z, wrapLiftBottom
104+  0AEB
105+  0AEB FE F0        	cp $F0
106+  0AED CA F3 0A     	jp z, wrapLiftBottom
107+  0AF0
108+  0AF0
109+  0AF0 C3 05 0B     	jp nextLiftShift
110+  0AF3
111+  0AF3
112+  0AF3              wrapLiftBottom:
113+  0AF3
114+  0AF3 11 80 02     	ld de, $0280
115+  0AF6 19           	add hl, de
116+  0AF7 DD 75 00 DD  	ld (ix), hl
116+  0AFB 74 01
117+  0AFD
118+  0AFD DD 7E 02     	ld a, (ix+lift_sprite_x)
119+  0B00 C6 A0        	add 160
120+  0B02 DD 77 02     	ld (ix+lift_sprite_x), a
121+  0B05
122+  0B05
123+  0B05              nextLiftShift:
124+  0B05
125+  0B05 DD 23        	inc ix
126+  0B07 DD 23        	inc ix
127+  0B09 DD 23        	inc ix
128+  0B0B DD 23        	inc ix
129+  0B0D
130+  0B0D 10 BF        	djnz shift_loop
131+  0B0F
132+  0B0F C9           	ret
133+  0B10
134+  0B10
135+  0B10
136+  0B10              draw_lifts:
137+  0B10
138+  0B10
139+  0B10 06 02        	ld b, 2
140+  0B12 DD 21 00 4C  	ld ix, lift_data
141+  0B16 FD 21 8B 0B  	ld iy, bot_char
142+  0B1A
143+  0B1A              draw_loop:
144+  0B1A
145+  0B1A DD 6E 00 DD  	ld hl, (ix)
145+  0B1E 66 01
146+  0B20
147+  0B20 3A 52 4C     	ld a, (lift_y_offset)
148+  0B23 5F           	ld e, a
149+  0B24 16 00        	ld d, 0
150+  0B26 0E 09        	ld c, palette_blue_red_yellow
151+  0B28
152+  0B28 FD 21 8B 0B  	ld iy, bot_char
153+  0B2C FD 19        	add iy, de
154+  0B2E
155+  0B2E FD 7E 00     	ld a, (iy)
156+  0B31 CD 57 0B     	call draw_and_colour
157+  0B34
158+  0B34 23           	inc hl
159+  0B35 CD 57 0B     	call draw_and_colour
160+  0B38
161+  0B38 2B           	dec hl
162+  0B39
163+  0B39 CD D2 20     	call moveTileUpHL
164+  0B3C
165+  0B3C FD 21 83 0B  	ld iy, top_char
166+  0B40 FD 19        	add iy, de
167+  0B42
168+  0B42 FD 7E 00     	ld a, (iy)
169+  0B45 CD 57 0B     	call draw_and_colour
170+  0B48
171+  0B48 23           	inc hl
172+  0B49 CD 57 0B     	call draw_and_colour
173+  0B4C
174+  0B4C
175+  0B4C DD 23        	inc ix
176+  0B4E DD 23        	inc ix
177+  0B50 DD 23        	inc ix
178+  0B52 DD 23        	inc ix
179+  0B54
180+  0B54
181+  0B54 10 C4        	djnz draw_loop
182+  0B56
183+  0B56 C9           	ret
184+  0B57
185+  0B57
186+  0B57              draw_and_colour:
187+  0B57
188+  0B57 77           	ld (hl), a
189+  0B58
190+  0B58 CB D4        	set 2, h
191+  0B5A 71           	ld (hl),c
192+  0B5B
193+  0B5B CB 94        	res 2, h
194+  0B5D
195+  0B5D C9           	ret
196+  0B5E
197+  0B5E
198+  0B5E
199+  0B5E              delete_lifts:
200+  0B5E
201+  0B5E 06 02        	ld b, 2
202+  0B60 DD 21 00 4C  	ld ix, lift_data
203+  0B64
204+  0B64              delete_loop:
205+  0B64
206+  0B64 DD 6E 00 DD  	ld hl, (ix)
206+  0B68 66 01
207+  0B6A
208+  0B6A 3E 40        	ld a, blank_tile
209+  0B6C 77           	ld (hl), a
210+  0B6D
211+  0B6D 23           	inc hl
212+  0B6E 77           	ld (hl), a
213+  0B6F
214+  0B6F 2B           	dec hl
215+  0B70
216+  0B70 CD D2 20     	call moveTileUpHL
217+  0B73
218+  0B73 3E 40        	ld a, blank_tile
219+  0B75 77           	ld (hl), a
220+  0B76
221+  0B76 23           	inc hl
222+  0B77 77           	ld (hl), a
223+  0B78
224+  0B78
225+  0B78 DD 23        	inc ix
226+  0B7A DD 23        	inc ix
227+  0B7C DD 23        	inc ix
228+  0B7E DD 23        	inc ix
229+  0B80
230+  0B80 10 E2        	djnz delete_loop
231+  0B82
232+  0B82 C9           	ret
233+  0B83
234+  0B83
235+  0B83 40 40 40 40  top_char:		defm $40, $40, $40, $40, $40, $9C, $9D, $9E
235+  0B87 40 9C 9D 9E
236+  0B8B 94 95 96 97  bot_char:		defm $94, $95, $96, $97, $98, $99, $9A, $9B
236+  0B8F 98 99 9A 9B
237+  0B93
238+  0B93              lifts_init2:
239+  0B93
240+  0B93
241+  0B93
242+  0B93 23           	inc hl
243+  0B94
244+  0B94 5E 23 56 2B  	ld de, (hl)
245+  0B98
246+  0B98 DD 21 00 4C  	ld ix, lift_data
247+  0B9C
248+  0B9C
249+  0B9C DD 73 00 DD  	ld (ix), de
249+  0BA0 72 01
250+  0BA2
251+  0BA2 23           	inc hl
252+  0BA3 23           	inc hl
253+  0BA4
254+  0BA4 5E 23 56 2B  	ld de, (hl)
255+  0BA8
256+  0BA8
257+  0BA8 DD 23        	inc ix
258+  0BAA DD 23        	inc ix
259+  0BAC DD 23        	inc ix
260+  0BAE DD 23        	inc ix
261+  0BB0
262+  0BB0
263+  0BB0 DD 73 00 DD  	ld (ix), de
263+  0BB4 72 01
264+  0BB6
265+  0BB6
266+  0BB6
267+  0BB6 3E 00        	ld a, 0
268+  0BB8 32 51 4C     	ld (lift_timer), a
269+  0BBB 32 52 4C     	ld (lift_y_offset), a
270+  0BBE
271+  0BBE
272+  0BBE CD 10 0B     	call draw_lifts
273+  0BC1
274+  0BC1
275+  0BC1 C9           	ret
276+  0BC2
277+  0BC2
278+  0BC2              lifts_init:
279+  0BC2
280+  0BC2              	// 0A63
281+  0BC2
282+  0BC2
283+  0BC2 FD 21 00 4C  	ld iy, lift_data
284+  0BC6
285+  0BC6 23           	inc hl
286+  0BC7 E5 DD E1     	ld ix, hl
287+  0BCA
288+  0BCA 7E           	ld a, (hl)
289+  0BCB FE 00        	cp 0
290+  0BCD C2 DD 0B     	jp nz, notDisabled
291+  0BD0
292+  0BD0 FD 77 00     	ld (iy + 0), a
293+  0BD3 FD 77 01     	ld (iy + 1), a
294+  0BD6 FD 77 05     	ld (iy + 5), a
295+  0BD9 FD 77 06     	ld (iy + 6), a
296+  0BDC C9           	ret
297+  0BDD
298+  0BDD              notDisabled:
299+  0BDD
300+  0BDD FD 77 02     	ld (iy + lift_sprite_x), a
301+  0BE0
302+  0BE0 23           	inc hl
303+  0BE1 7E           	ld a, (hl)
304+  0BE2 FD 77 03     	ld (iy + lift_sprite_y), a
305+  0BE5
306+  0BE5 22 B0 4C     	ld (temp_address), hl
307+  0BE8
308+  0BE8 11 F0 FF     	ld de, -$10
309+  0BEB
310+  0BEB DD 19        	add ix, de
311+  0BED
312+  0BED CD 90 21     	call convert_sprite_to_tile
313+  0BF0
314+  0BF0 FD 75 00 FD  	ld (iy), hl
314+  0BF4 74 01
315+  0BF6
316+  0BF6 FD 23        	inc iy
317+  0BF8 FD 23        	inc iy
318+  0BFA FD 23        	inc iy
319+  0BFC FD 23        	inc iy
320+  0BFE
321+  0BFE 2A B0 4C     	ld hl, (temp_address)
322+  0C01
323+  0C01 23           	inc hl
324+  0C02 E5 DD E1     	ld ix, hl
325+  0C05
326+  0C05 7E           	ld a, (hl)
327+  0C06 FD 77 02     	ld (iy + lift_sprite_x), a
328+  0C09
329+  0C09 23           	inc hl
330+  0C0A 7E           	ld a, (hl)
331+  0C0B FD 77 03     	ld (iy + lift_sprite_y), a
332+  0C0E
333+  0C0E 22 B0 4C     	ld (temp_address), hl
334+  0C11
335+  0C11 11 F0 FF     	ld de, -$10
336+  0C14
337+  0C14 DD 19        	add ix, de
338+  0C16
339+  0C16 CD 90 21     	call convert_sprite_to_tile
340+  0C19
341+  0C19 FD 75 00 FD  	ld (iy), hl
341+  0C1D 74 01
342+  0C1F
343+  0C1F 3E 00        	ld a, 0
344+  0C21 32 51 4C     	ld (lift_timer), a
345+  0C24 32 52 4C     	ld (lift_y_offset), a
346+  0C27
347+  0C27
348+  0C27 CD 10 0B     	call draw_lifts
349+  0C2A
350+  0C2A
351+  0C2A C9           	ret
# file closed: scripts/gameplay/objects/lifts.asm
 27   0C2B                  include "scripts/gameplay/harry/harry_lift.asm"
# file opened: scripts/gameplay/harry/harry_lift.asm
  1+  0C2B
  2+  0C2B
  3+  0C2B              checkLift:
  4+  0C2B
  5+  0C2B 3E 00        	ld a, 0
  6+  0C2D 32 3B 4D     	ld (harry_on_lift), a
  7+  0C30
  8+  0C30 3A 26 4D     	ld a, (harry_state)
  9+  0C33 FE 02        	cp STATE_JUMPING
 10+  0C35 C8           	ret z
 11+  0C36
 12+  0C36 FD 21 00 4C  	ld iy, lift_data
 13+  0C3A 06 02        	ld b, 2
 14+  0C3C
 15+  0C3C              landLoop:
 16+  0C3C
 17+  0C3C DD 7E 11     	ld a, (ix + spr_y)
 18+  0C3F 4F           	ld c, a
 19+  0C40
 20+  0C40 FD 7E 03     	ld a, (iy + lift_sprite_y)
 21+  0C43 91           	sub c
 22+  0C44 C6 08        	add 8
 23+  0C46 FE 12        	cp 18
 24+  0C48
 25+  0C48
 26+  0C48 D2 75 0C     	jp nc, noLand
 27+  0C4B
 28+  0C4B
 29+  0C4B DD 7E 10     	ld a, (ix + spr_x)
 30+  0C4E 4F           	ld c, a
 31+  0C4F
 32+  0C4F FD 7E 02     	ld a, (iy + lift_sprite_x)
 33+  0C52 91           	sub c
 34+  0C53 FE 06        	cp 6
 35+  0C55 D2 75 0C     	jp nc, noLand
 36+  0C58
 37+  0C58              	;ld de, tile_ram_start + row_0 + column_20
 38+  0C58              	;;ld (de), a
 39+  0C58
 40+  0C58 47           	ld b, a
 41+  0C59
 42+  0C59 3E 01        	ld a, 1
 43+  0C5B 32 3B 4D     	ld (harry_on_lift), a
 44+  0C5E
 45+  0C5E 3A 26 4D     	ld a, (harry_state)
 46+  0C61 FE 00        	cp STATE_IDLE
 47+  0C63 C8           	ret z
 48+  0C64
 49+  0C64 FE 01        	cp STATE_WALKING
 50+  0C66 C8           	ret z
 51+  0C67
 52+  0C67 3E 05        	ld a, 5
 53+  0C69 90           	sub b
 54+  0C6A 47           	ld b, a
 55+  0C6B
 56+  0C6B DD 7E 10     	ld a, (ix + spr_x)
 57+  0C6E 90           	sub b
 58+  0C6F DD 77 10     	ld (ix + spr_x), a
 59+  0C72
 60+  0C72
 61+  0C72
 62+  0C72 CD 42 38     	call harry_make_idle
 63+  0C75
 64+  0C75
 65+  0C75
 66+  0C75
 67+  0C75              noLand:
 68+  0C75
 69+  0C75
 70+  0C75 FD 23        	inc iy
 71+  0C77 FD 23        	inc iy
 72+  0C79 FD 23        	inc iy
 73+  0C7B FD 23        	inc iy
 74+  0C7D
 75+  0C7D 10 BD        	djnz landLoop
 76+  0C7F
 77+  0C7F
 78+  0C7F
 79+  0C7F
 80+  0C7F
 81+  0C7F
 82+  0C7F
 83+  0C7F
 84+  0C7F
 85+  0C7F              checkStillOn:
 86+  0C7F
 87+  0C7F
 88+  0C7F
 89+  0C7F
 90+  0C7F
 91+  0C7F C9           	ret
# file closed: scripts/gameplay/harry/harry_lift.asm
 28   0C80
 29   0C80
 30   0C80                  include "scripts/data/rom_6e.asm"
# file opened: scripts/data/rom_6e.asm
  1+  0C80
  2+  0C80
  3+  0C80
  4+  0C80              spr_initial_game_data:
  5+  0C80                      ;sprite number * 4 to but into top 6 bits (0-63) flips then in bit 0 and 1, and pallete byte
  6+  0C80 00 09                defm harry_idle_frame*4, palette_blue_red_yellow ; sprite 0, flipped in x, palette 1
  7+  0C82 40 09                defm 16*4, palette_blue_red_yellow ; sprite 1
  8+  0C84 24 05                defm 9*4, cyan ; sprite 2
  9+  0C86 24 05                defm 9*4, cyan
 10+  0C88 24 05                defm 9*4,cyan ; sprite 4
 11+  0C8A 24 05                defm 9*4, cyan               ;bullet sprite invisible
 12+  0C8C 24 05                defm 9*4,cyan; sprite 4
 13+  0C8E 00 00                defm spider_sprite*4, 0                ;bullet sprite invisible
 14+  0C90
 15+  0C90
 16+  0C90
 17+  0C90                      ;starting positions x,y
 18+  0C90                     ; defm 214, 120       ;sprite 0
 19+  0C90 D6 9B                defm 214, 155       ;sprite 0
 20+  0C92 55 F8                defm 85, 248       ;sprite 1
 21+  0C94
 22+  0C94 00 90                defm 0, 144       ;sprite 2
 23+  0C96 00 EC                defm 0, 236        ;sprite 3
 24+  0C98 00 24                defm 0, 36       ;sprite 4
 25+  0C9A 00 00                defm 0, 0      ;sprite 5
 26+  0C9C 00 9C                defm 0, 156       ;sprite 6
 27+  0C9E
 28+  0C9E
 29+  0C9E 55 9C                defm 85, 156       ;sprite 2
 30+  0CA0 76 BC                defm 118, 188        ;sprite 3
 31+  0CA2 96 C8                defm 150, 200       ;sprite 4
 32+  0CA4 B6 B8                defm 182, 184      ;sprite 5
 33+  0CA6 D6 70                defm 214, 112       ;sprite 6
 34+  0CA8 00 8C                defm 0, 140       ;sprite 7
 35+  0CAA
 36+  0CAA
 37+  0CAA              high_score_defaults:
 38+  0CAA
 39+  0CAA
 40+  0CAA
 41+  0CAA 41 52 4C 00          defm "ARL", $00, $50, $02
 41+  0CAE 50 02
 42+  0CB0 43 4F 52 00          defm "COR", $00, $00, $02
 42+  0CB4 00 02
 43+  0CB6 53 41 4D 00          defm "SAM", $00, $50, $01
 43+  0CBA 50 01
 44+  0CBC 4E 49 43 00          defm "NIC", $00, $00, $01
 44+  0CC0 00 01
 45+  0CC2 4B 45 56 00          defm "KEV", $00, $75, $00
 45+  0CC6 75 00
 46+  0CC8 44 41 4E 00          defm "DAN", $00, $50, $00
 46+  0CCC 50 00
 47+  0CCE
 48+  0CCE
# file closed: scripts/data/rom_6e.asm
 31   0CCE
 32   0CCE                  org $2000
 33   2000
 34   2000                  include "scripts/system/display/score.asm"
# file opened: scripts/system/display/score.asm
  1+  2000
  2+  2000
  3+  2000
  4+  2000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  2000              ; increases points scored by player
  6+  2000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  2000              score_points:
  8+  2000
  9+  2000 E5                   push hl
 10+  2001
 11+  2001
 12+  2001
 13+  2001 47                   ld b, a
 14+  2002
 15+  2002 21 10 4D             ld hl, current_score + 2
 16+  2005 7E                   ld a, (hl)
 17+  2006 32 19 4D             ld (temp_byte2), a
 18+  2009
 19+  2009 21 0E 4D             ld hl,current_score                                                        ;get start of score (lo byte first)
 20+  200C 7E                   ld a,(hl)                                                                        ;load into accumulator
 21+  200D 80                   add a, b                                                                                ;add 90 pts - written in bcd
 22+  200E 27                   daa                                                                                        ;correct for bcd overflow
 23+  200F 77                   ld (hl),a                                                                        ;store new value
 24+  2010 06 03                ld b,3                                                                                ;need to see if the carry propogates through remaining three bcd bytes
 25+  2012
 26+  2012
 27+  2012 0E 00                ld c,0                                                                                ;gonna add 0 so quicker to load into register
 28+  2014              .addloop:
 29+  2014 23                   inc hl                                                                                ;move to next highest byte
 30+  2015 7E                   ld a,(hl)                                                                        ;load into accumulator
 31+  2016 89                   adc c                                                                                ;add zero with carry taken into account
 32+  2017 27                   daa                                                                                        ;adjust flags to correct for bcd overflow
 33+  2018 77                   ld (hl),a                                                                        ;store new bcd pair
 34+  2019 10 F9                djnz .addloop                                                                ;continue loop until b is zero
 35+  201B
 36+  201B                      ;now check high score to see if bigger start with high bytes
 37+  201B 06 03                ld b,3
 38+  201D 11 11 4D             ld de,current_score + 3                                                ;get high byte first (point one too far as we dec straight away)
 39+  2020 21 5A 4C             ld hl,high_scores + 6                                              ;get high byte first (point one too far as we dec straight away)
 40+  2023              .check_loop:
 41+  2023 1B                   dec de                                                                                ;move to next most significant bytes
 42+  2024 2B                   dec hl                                                                                ;for score and high score
 43+  2025 1A                   ld a,(de)                                                                        ;load score byte
 44+  2026 BE                   cp (hl)                                                                                ;compare with highscore byte (does subtract but doesn't affect a register)
 45+  2027 27                   daa                                                                                        ;correct for bcd numbers (in case we have 80 and above as these would appear as -ve numbers)
 46+  2028 CA 31 20             jp z, .nextByte
 47+  202B DA 3E 20             jp c, .exit                                                                              ;not bigger so stop checking
 48+  202E C2 33 20             jp nz,.new_high_score
 49+  2031              .nextByte:                                           ;if numbers not the same then we have a new high score so stop checking
 50+  2031 10 F0                djnz .check_loop
 50+  2033                                                                       ;do for all 4 bytes if necessary (until b = 0)
 51+  2033
 52+  2033
 53+  2033                      ;if here score is better so copy score to highscore
 54+  2033              .new_high_score:
 55+  2033 21 0E 4D             ld hl,current_score                                                        ;set current score location in hl
 56+  2036 11 57 4C             ld de,high_scores + 3                                                        ;set highscore location in de and copy
 57+  2039 01 03 00             ld bc,3                                                                                ;copy 4 bytes from (hl) to (de)
 58+  203C ED B0                ldir
 59+  203E              .exit:
 60+  203E
 61+  203E
 62+  203E 21 10 4D             ld hl, current_score + 2
 63+  2041 3A 19 4D             ld a, (temp_byte2)
 64+  2044 47                   ld b, a
 65+  2045
 66+  2045 7E                   ld a, (hl)
 67+  2046 BF B8                cp a, b
 68+  2048 CA 64 20             jp z, noExtra
 69+  204B
 70+  204B 3A 14 4D             ld a, (player_lives)
 71+  204E 3C                   inc a
 72+  204F FE 09                cp 9
 73+  2051 CA 64 20             jp z, noExtra
 74+  2054
 75+  2054 32 14 4D             ld (player_lives), a
 76+  2057
 77+  2057 3E 00                ld a, 0
 78+  2059 CD B0 06             call play_song
 79+  205C
 80+  205C CD 92 06             call sfx_life
 81+  205F
 82+  205F 3E 64                ld a, 100
 83+  2061 32 36 4C             ld (attract_mode_timer), a
 84+  2064              noExtra:
 85+  2064
 86+  2064 E1                   pop hl
 87+  2065
 88+  2065 C9                   ret
# file closed: scripts/system/display/score.asm
 35   2066                  include "scripts/system/display/text.asm"
# file opened: scripts/system/display/text.asm
  1+  2066
  2+  2066
  3+  2066              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  2066              ; generic text blitting routine for normal areas of screen (28x32 main playfield)
  5+  2066              ; text strings MUST be zero terminated
  6+  2066              ; on entry
  7+  2066              ; de points to text string
  8+  2066              ; hl points to address in vram to print at
  9+  2066              ; c = palette colour of tile
 10+  2066              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 11+  2066              main_blit_text_and_colour:
 12+  2066 1A                   ld        a,(de)                                                                        ;get the byte at de
 13+  2067 13                   inc        de                                                                                ;increment the text pointer
 14+  2068 B7                   or        a                                                                                ;test for string terminator
 15+  2069 C8                   ret z                                                                                ;return if we've finished this string
 16+  206A
 17+  206A 77                   ld        (hl),a                                                                        ;write the byte to vram
 18+  206B CB D4                set        2,h                                                                                ;point hl at colour ram by setting bit 2 of h
 19+  206D 79                   ld        a,c                                                                                ;get colour byte into a
 20+  206E 77                   ld        (hl),a
 21+  206F 23                   inc hl                                                                              ;write the byte to colour ram
 22+  2070                     ; ld        a,l                                                                                ;low byte of vram/colour address into A
 23+  2070                     ; sub        32                                                                                ;subtract 32 to move across the screen by 1 char position
 24+  2070                     ; ld        l,a                                                                                ;store back to l
 25+  2070 CB 94                res        2,h                                                                                ;point hl back at vram by clearing bit 2 of h
 26+  2072                    ;  ld        a,h                                                                                ;handle the carry from the SUB instruction (if there was one)
 27+  2072                    ;  sbc        a,0                                                                                ;subtract zero and the carry flag from a
 28+  2072                     ; ld        h,a                                                                                ;store back to d
 29+  2072 C3 66 20             jp        main_blit_text_and_colour                                ;loop until we read a zero terminating byte
 30+  2075 C9                   ret
 31+  2076
 32+  2076
 33+  2076              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34+  2076              ; generic text blitting routine for normal areas of screen (28x32 main playfield)
 35+  2076              ; text strings MUST be zero terminated
 36+  2076              ; on entry
 37+  2076              ; de points to text string
 38+  2076              ; hl points to address in vram to print at
 39+  2076              ; can do this as we don't have mess about with pallette ram
 40+  2076              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 41+  2076              main_blit_text_only:
 42+  2076 C5                   push bc                                                                                ;save bc as we are gonna nuke it
 43+  2077 01 20 00             ld bc,32                                                                        ;column skip amount
 44+  207A              .char_loop:
 45+  207A 1A                   ld        a,(de)                                                                        ;get the byte at de
 46+  207B
 47+  207B 13                   inc        de                                                                                ;increment the text pointer
 48+  207C B7                   or        a                                                                                ;test for string terminator
 49+  207D CA 86 20             jp z,.finish                                                                ;return if we've finished this string
 50+  2080
 51+  2080 77                   ld        (hl),a                                                                        ;write the byte to vram
 52+  2081 ED 42                sbc hl,bc                                                                        ;move to next column
 53+  2083 C3 7A 20             jp        .char_loop                                                                ;loop until we read a zero terminating byte
 54+  2086              .finish:
 55+  2086 C1                   pop bc                                                                                ;retrieve bc
 56+  2087 C9                   ret
 57+  2088
 58+  2088
 59+  2088
 60+  2088
 61+  2088
 62+  2088              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 63+  2088              ; writes text to the top or bottom two rows
 64+  2088              ; on entry
 65+  2088              ; de points to text string
 66+  2088              ; hl points to address in vram to print at
 67+  2088              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 68+  2088              borders_blit_text:
 69+  2088 06 1D                ld b,$1d                                                                        ;maximum number of chars to draw in a line (28)
 70+  208A              .blit_loop:
 71+  208A 1A                   ld        a,(de)                                                                        ;get the byte at HL
 72+  208B 13                   inc        de                                                                                ;increment the text pointer
 73+  208C B7                   or        a                                                                                ;test for string terminator (0)
 74+  208D C8                   ret z                                                                                ;return if we've finished this string
 75+  208E
 76+  208E 05                   dec b                                                                                ;check maximum characters has not been met
 77+  208F C8                   ret z                                                                                ;return if we have
 78+  2090
 79+  2090 77                   ld        (hl),a                                                                        ;write the byte to vram
 80+  2091 CB D4                set        2,h                                                                                ;point DE at colour ram by setting bit 2 of D
 81+  2093 79                   ld        a,c                                                                                ;get colour byte into A
 82+  2094 77                   ld        (hl),a                                                                        ;write the byte to colour ram
 83+  2095 CB 94                res        2,h                                                                                ;point DE back at vram by clearing bit 2 of D
 84+  2097 2B                           dec hl                                                                                ;move to next column
 85+  2098 C3 8A 20             jp .blit_loop                                                                ;loop until we read a zero terminating byte
 86+  209B
 87+  209B
 88+  209B              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 89+  209B              ; writes text to the top or bottom two rows
 90+  209B              ; hl contains vram address to write to
 91+  209B              ; de holds address of zero terminated string
 92+  209B              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 93+  209B              borders_blit_text_only:
 94+  209B 06 1D                ld b,$1d                                                                        ;maximum number of chars to draw in a line (28)
 95+  209D              .blit_loop:
 96+  209D 1A                   ld        a,(de)                                                                        ;get the byte at HL
 97+  209E 13                   inc        de                                                                                ;increment the text pointer
 98+  209F B7                   or        a                                                                                ;test for string terminator (0)
 99+  20A0 C8                   ret z                                                                                ;return if we've finished this string
100+  20A1
101+  20A1 05                   dec b                                                                                ;check maximum characters has not been met
102+  20A2 C8                   ret z                                                                                ;return if we have
103+  20A3
104+  20A3 77                   ld        (hl),a                                                                        ;write the byte to vram
105+  20A4 2B                   dec hl                                                                                ;move to next column
106+  20A5 C3 9D 20             jp        .blit_loop                                                                ;loop until we read a zero terminating byte
107+  20A8
108+  20A8
109+  20A8
# file closed: scripts/system/display/text.asm
 36   20A8                  include "scripts/system/utility.asm"
# file opened: scripts/system/utility.asm
  1+  20A8
  2+  20A8
  3+  20A8
  4+  20A8              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  20A8              ; fills an entire row in either the top or
  6+  20A8              ; bottom border with the value in a
  7+  20A8              ; a contains tile/pallete number to write
  8+  20A8              ; b contains number of tiles to fill
  9+  20A8              ; hl contains tile ram or palette
 10+  20A8              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 11+  20A8              fill_border_area_row:
 12+  20A8 77           .write                         ld        (hl),a                                                                        ;store value at current address
 13+  20A9 2B                   dec hl                                                                                ;move right one column
 14+  20AA 10 FC                    djnz .write                                                                        ;loop back if we have more to do
 15+  20AC C9                   ret
 16+  20AD
 17+  20AD              clear_tile_ram:
 18+  20AD
 19+  20AD 3E 40                ld  a,$40                                                                    ;tile number of empty tile
 20+  20AF 21 00 40             ld  hl,tile_ram_start                                                ;clear video ram
 21+  20B2 11 01 40             ld  de,tile_ram_start + 1
 22+  20B5 01 FF 03             ld  bc,$3ff                                                                        ;1k of tile ram
 23+  20B8 77                   ld  (hl),a                                                                        ;clear (hl), which then gets copied through to de
 24+  20B9 ED B0                ldir
 25+  20BB C9                   ret
 26+  20BC
 27+  20BC
 28+  20BC              clear_colour_ram:
 29+  20BC
 30+  20BC                                                                                     ;pallete 1
 31+  20BC 21 00 44             ld  hl,pallete_ram_start                                        ;set all colour ram to palette 1
 32+  20BF 11 01 44             ld  de,pallete_ram_start + 1
 33+  20C2 01 FF 03             ld  bc,$3ff                                                                        ;1k of palette ram
 34+  20C5 77                   ld  (hl),a                                                                        ;clear (hl), which then gets copied through to de
 35+  20C6 ED B0                ldir                                                                                ;copy from hl to de, decrementing bc, keep doing until bc = 0
 36+  20C8
 37+  20C8 C9                   ret
 38+  20C9
 39+  20C9              moveTileDownHL:
 40+  20C9              moveTileLeftHL:
 41+  20C9
 42+  20C9 7D                   ld a, l
 43+  20CA C6 20                add 32
 44+  20CC 6F                   ld l, a
 45+  20CD
 46+  20CD 7C                   ld a, h
 47+  20CE CE 00                adc 0
 48+  20D0 67                   ld h, a
 49+  20D1
 50+  20D1 C9                   ret
 51+  20D2
 52+  20D2              moveTileRightHL:
 53+  20D2              moveTileUpHL:
 54+  20D2
 55+  20D2 7D                   ld a, l
 56+  20D3 D6 20                sub 32
 57+  20D5 6F                   ld l, a
 58+  20D6
 59+  20D6 7C                   ld a, h
 60+  20D7 DE 00                sbc 0
 61+  20D9 67                   ld h, a
 62+  20DA
 63+  20DA C9                   ret
 64+  20DB
 65+  20DB
 66+  20DB              moveTwoTilesLeftHL:
 67+  20DB              moveTwoTilesDownHL:
 68+  20DB
 69+  20DB 7D                   ld a, l
 70+  20DC C6 40                add 64
 71+  20DE 6F                   ld l, a
 72+  20DF
 73+  20DF 7C                   ld a, h
 74+  20E0 CE 00                adc 0
 75+  20E2 67                   ld h, a
 76+  20E3
 77+  20E3 C9                   ret
 78+  20E4
 79+  20E4              moveTwoTilesRightHL:
 80+  20E4              moveTwoTilesUpHL:
 81+  20E4
 82+  20E4 7D                   ld a, l
 83+  20E5 D6 40                sub 64
 84+  20E7 6F                   ld l, a
 85+  20E8
 86+  20E8 7C                   ld a, h
 87+  20E9 DE 00                sbc 0
 88+  20EB 67                   ld h, a
 89+  20EC
 90+  20EC C9                   ret
 91+  20ED
 92+  20ED
 93+  20ED                  MACRO SetColourC
 94+  20ED ~
 95+  20ED ~                set 2, h
 96+  20ED ~                ld (hl), c
 97+  20ED ~                res 2, h
 98+  20ED ~
 99+  20ED                  ENDM
100+  20ED
101+  20ED
102+  20ED
103+  20ED              draw2x2tile:
104+  20ED
105+  20ED 78               ld a, b
106+  20EE 77               ld (hl), a
107+  20EF
108+  20EF                  SetColourC
108+  20EF             >
108+  20EF CB D4       >    set 2, h
108+  20F1 71          >    ld (hl), c
108+  20F2 CB 94       >    res 2, h
108+  20F4             >
109+  20F4
110+  20F4 04               inc b
111+  20F5 23               inc hl
112+  20F6
113+  20F6 78               ld a, b
114+  20F7 77               ld (hl), a
115+  20F8
116+  20F8                  SetColourC
116+  20F8             >
116+  20F8 CB D4       >    set 2, h
116+  20FA 71          >    ld (hl), c
116+  20FB CB 94       >    res 2, h
116+  20FD             >
117+  20FD
118+  20FD CD C9 20         call moveTileDownHL
119+  2100
120+  2100 78               ld a, b
121+  2101 C6 10            add 16
122+  2103 47               ld b, a
123+  2104
124+  2104 77               ld (hl), a
125+  2105
126+  2105                  SetColourC
126+  2105             >
126+  2105 CB D4       >    set 2, h
126+  2107 71          >    ld (hl), c
126+  2108 CB 94       >    res 2, h
126+  210A             >
127+  210A
128+  210A 2B               dec hl
129+  210B 05               dec b
130+  210C
131+  210C 78               ld a, b
132+  210D 77               ld (hl), a
133+  210E
134+  210E                  SetColourC
134+  210E             >
134+  210E CB D4       >    set 2, h
134+  2110 71          >    ld (hl), c
134+  2111 CB 94       >    res 2, h
134+  2113             >
135+  2113
136+  2113 C9               ret
137+  2114
138+  2114
139+  2114              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
140+  2114              ; xor's an entire row in either the top or
141+  2114              ; bottom border with the a value
142+  2114              ; b contains number of tiles to fill
143+  2114              ; c contains value to xor
144+  2114              ; hl contains tile ram or palette
145+  2114              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
146+  2114              xor_border_area_row:
147+  2114              .write
148+  2114 79                   ld a,c                                                                                ;load xor mask
149+  2115 AE                   xor (hl)                                                                        ;xor with current tile/pallete addr contents
150+  2116 77                   ld        (hl),a                                                                        ;write new value
151+  2117 2B                   dec hl                                                                                ;move right one column
152+  2118 10 FA                    djnz .write                                                                        ;loop back if we have more to do
153+  211A C9                   ret
154+  211B              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
155+  211B              ; fills the entire screen pallete ram with given pallete number
156+  211B              ; a contains pen colour to fill tiles with
157+  211B              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
158+  211B              fill_screen_area_colour:
159+  211B 21 40 44             ld        hl,pallete_ram_main                                                ;colour ram
160+  211E 11 41 44                 ld        de,pallete_ram_main + 1                                        ;one on from hl so we effectively drag the value at hl through vram
161+  2121 01 7F 03                 ld        bc,$37f                                                                        ;all but one address needed as we manually set the first one below
162+  2124 77                       ld        (hl),a                                                                        ;write first value to hl
163+  2125 ED B0                    ldir                                                                                ;copy (hl) -> (de), inc hl, inc de, dec bc, loop until bc = 0
164+  2127 C9                   ret
165+  2128              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
166+  2128              ; a contains tile number
167+  2128              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
168+  2128              fill_screen_area_working_slow:
169+  2128 21 40 40             ld        hl,tile_ram_play_area                                        ;tile ram
170+  212B 11 41 40                 ld        de,tile_ram_play_area + 1                                ;one on from hl so we effectively drag the value at hl through vram
171+  212E 01 7F 03                 ld        bc,$37f                                                                        ;all but one address needed as we manually set the first one below
172+  2131 77                       ld        (hl),a                                                                        ;write first value to hl
173+  2132 ED B0                    ldir                                                                                ;copy (hl) -> (de), inc hl, inc de, dec bc, loop until bc = 0
174+  2134 C9                   ret
175+  2135
176+  2135
177+  2135              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
178+  2135              ; fills a row with given tile/pallete
179+  2135              ; hl holds start address to fill
180+  2135              ; a holds the tile/palette colour to use
181+  2135              ; b holds number of tiles/palettes to draw
182+  2135              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
183+  2135              fill_screen_area_row:
184+  2135 11 E0 FF             ld de,-32                                                                        ;skip between columns 32 bytes down to move right
185+  2138              .write_loop:
186+  2138 77                   ld (hl),a                                                                        ;store tile/pallete value
187+  2139 19                   add hl,de                                                                        ;move right (back 32 bytes)
188+  213A 10 FC                djnz .write_loop                                                        ;have we done the correct number of writes?
189+  213C C9                   ret
190+  213D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
191+  213D              ; xor's a row with given value - useful for flashing tiles
192+  213D              ; hl holds start address to fill
193+  213D              ; b holds number of tiles/palettes to draw
194+  213D              ; c holds value to xor with tile/pallete
195+  213D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
196+  213D              xor_screen_area_row:
197+  213D 11 E0 FF             ld de,-32                                                                        ;skip between columns 32 bytes down to move right
198+  2140              .write_loop:
199+  2140 79                   ld a,c                                                                                ;load c into
200+  2141 AE                   xor (hl)                                                                        ;and xor value at hl with a
201+  2142 77                   ld (hl),a                                                                        ;store tile/pallete value
202+  2143 19                   add hl,de                                                                        ;move right (back 16 bytes)
203+  2144 10 FA                djnz .write_loop                                                        ;have we done the correct number of writes?
204+  2146 C9                   ret
205+  2147
206+  2147
207+  2147
208+  2147
209+  2147              calc_tile_location:
210+  2147
211+  2147                      // a = x
212+  2147                      // b = y
213+  2147
214+  2147 DD E5                push ix
215+  2149
216+  2149 DD 68                ld ixl, b
217+  214B CB 27                sla a
218+  214D
219+  214D 5F                   ld e, a
220+  214E 16 00                ld d, 0
221+  2150 21 F2 18             ld hl, tile_column_lookup
222+  2153 19                   add hl, de
223+  2154
224+  2154 7E                   ld a, (hl)
225+  2155 23                   inc hl
226+  2156 66                   ld h, (hl)
227+  2157 6F                   ld l, a
228+  2158
229+  2158 01 00 40             ld bc, tile_ram_start
230+  215B 09                   add hl, bc
231+  215C
232+  215C
233+  215C 16 00                ld d, 0
234+  215E DD 5D                ld e, ixl
235+  2160
236+  2160 19                   add hl, de
237+  2161
238+  2161                     ; ld hl, tile_ram_play_area + column_4 + row_4
239+  2161
240+  2161                      ;ld a, 4
241+  2161                    ;  ld (hl), a
242+  2161
243+  2161 DD E1                pop ix
244+  2163
245+  2163 C9                   ret
246+  2164
247+  2164              convert_hen_sprite_to_tile:
248+  2164
249+  2164
250+  2164 26 00                 ld h, 0
251+  2166 DD 7E 10             ld a, (ix+spr_x)
252+  2169 C6 04                add 4
253+  216B 6F                   ld l, a
254+  216C
255+  216C
256+  216C
257+  216C 11 2A 19             ld de, sprite_column_lookup
258+  216F
259+  216F EB 19 EB             add de, hl
260+  2172 1A                   ld a, (de)
261+  2173
262+  2173                      //ld hl, time_location + 4
263+  2173                     // ld (hl), a
264+  2173 4F                   ld c, a
265+  2174 32 18 4D             ld (temp_byte), a
266+  2177
267+  2177 26 00                ld h, 0
268+  2179 DD 7E 11             ld a, (ix+spr_y)
269+  217C C6 07                add 7
270+  217E 6F                   ld l, a
271+  217F
272+  217F 11 2A 1A             ld de, sprite_row_lookup
273+  2182
274+  2182 EB 19 EB             add de, hl
275+  2185 1A                   ld a, (de)
276+  2186
277+  2186                     // ld hl, time_location + 2
278+  2186                     // ld (hl), a
279+  2186 32 19 4D             ld (temp_byte2), a
280+  2189 47                   ld b, a
281+  218A
282+  218A 79                   ld a, c
283+  218B
284+  218B CD 47 21             call calc_tile_location
285+  218E
286+  218E
287+  218E C9                   ret
288+  218F
289+  218F
290+  218F
291+  218F
292+  218F C9                   ret
293+  2190
294+  2190              convert_sprite_to_tile:
295+  2190
296+  2190
297+  2190 26 00                ld h, 0
298+  2192 DD 7E 10             ld a, (ix+spr_x)
299+  2195 C6 04                add 4
300+  2197 6F                   ld l, a
301+  2198
302+  2198
303+  2198
304+  2198 11 2A 19             ld de, sprite_column_lookup
305+  219B
306+  219B EB 19 EB             add de, hl
307+  219E 1A                   ld a, (de)
308+  219F
309+  219F                      //ld hl, time_location + 4
310+  219F                     // ld (hl), a
311+  219F 4F                   ld c, a
312+  21A0 32 18 4D             ld (temp_byte), a
313+  21A3
314+  21A3 26 00                ld h, 0
315+  21A5 DD 7E 11             ld a, (ix+spr_y)
316+  21A8 C6 07                add 7
317+  21AA 6F                   ld l, a
318+  21AB
319+  21AB 11 2A 1A             ld de, sprite_row_lookup
320+  21AE
321+  21AE EB 19 EB             add de, hl
322+  21B1 1A                   ld a, (de)
323+  21B2
324+  21B2                     // ld hl, time_location + 2
325+  21B2                     // ld (hl), a
326+  21B2 32 19 4D             ld (temp_byte2), a
327+  21B5 47                   ld b, a
328+  21B6
329+  21B6 79                   ld a, c
330+  21B7
331+  21B7 CD 47 21             call calc_tile_location
332+  21BA
333+  21BA
334+  21BA C9                   ret
335+  21BB
336+  21BB
337+  21BB              random:
338+  21BB E5                   push    hl
339+  21BC D5                   push    de
340+  21BD 2A 16 4D             ld      hl,(rand_data)
341+  21C0 3E 74                ld      a,$74
342+  21C2 57                   ld      d,a
343+  21C3 5E                   ld      e,(hl)
344+  21C4 19                   add     hl,de
345+  21C5 85                   add     a,l
346+  21C6 AC                   xor     h
347+  21C7 22 16 4D             ld      (rand_data),hl
348+  21CA D1                   pop     de
349+  21CB E1                   pop     hl
350+  21CC
351+  21CC C9                   ret
352+  21CD
353+  21CD              get_random_colour:
354+  21CD
355+  21CD CD BB 21             call random
356+  21D0
357+  21D0 E6 0F                and %00001111
358+  21D2 47                   ld b, a
359+  21D3
360+  21D3 D5                   push de
361+  21D4
362+  21D4
363+  21D4 11 2A 1B             ld de, valid_colours
364+  21D7 7B                   ld a, e
365+  21D8 80                   add a, b
366+  21D9 5F                   ld e, a
367+  21DA
368+  21DA 7A                   ld a, d
369+  21DB CE 00                adc 0
370+  21DD 57                   ld d, a
371+  21DE
372+  21DE 1A                   ld a, (de)
373+  21DF
374+  21DF D1                   pop de
375+  21E0
376+  21E0
377+  21E0 C9                   ret
# file closed: scripts/system/utility.asm
 37   21E1                  include "scripts/system/display/hud.asm"
# file opened: scripts/system/display/hud.asm
  1+  21E1
  2+  21E1
  3+  21E1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  21E1              ; displays time
  5+  21E1              ; in sensible locations on 2nd row
  6+  21E1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  21E1              ;constants
  8+  21E1              time_location:                equ $4024                                                                ;address in vram to place time
  9+  21E1
 10+  21E1              show_lives:
 11+  21E1
 12+  21E1 CD 2D 22             call show_life_icons
 13+  21E4                     ; call show_keys
 14+  21E4                     ; call show_dodger
 15+  21E4                     ; call show_arcade
 16+  21E4 CD 10 22             call show_time
 17+  21E7 CD 22 22            call show_level
 18+  21EA
 19+  21EA CD FB 21             call show_bonus
 20+  21ED CD 10 22             call show_time
 21+  21F0
 22+  21F0 21 22 43             ld hl, tile_ram_start + row_2 + column_4
 23+  21F3 3A 7E 4C             ld a, (eggs_remaining)
 24+  21F6                      ;ld (hl), a
 25+  21F6
 26+  21F6
 27+  21F6 23                   inc hl
 28+  21F7 DD 7E 11             ld a, (ix + spr_y)
 29+  21FA                     ; ld (hl), a                                                       ;use hex display as this is a bcd number (so it just works)
 30+  21FA C9                   ret
 31+  21FB
 32+  21FB
 33+  21FB
 34+  21FB              show_bonus:
 35+  21FB
 36+  21FB 21 D3 40             ld hl,tile_ram_start + hud_bot_row + row_19
 37+  21FE 3A 3B 4C             ld a, (bonus_remaining + 1)
 38+  2201 4F                   ld c, a
 39+  2202 CD 94 24             call show_hex_small
 40+  2205
 41+  2205
 42+  2205 21 D5 40             ld hl,tile_ram_start + hud_bot_row + row_21
 43+  2208 3A 3A 4C             ld a, (bonus_remaining + 0)
 44+  220B 4F                   ld c, a
 45+  220C CD 94 24             call show_hex_small
 46+  220F
 47+  220F
 48+  220F
 49+  220F C9                   ret
 50+  2210
 51+  2210              show_time:
 52+  2210
 53+  2210 21 DD 40             ld hl,tile_ram_start + hud_bot_row + row_29
 54+  2213 3A 39 4C             ld a, (time_remaining + 1)
 55+  2216 77                   ld (hl), a
 56+  2217
 57+  2217 21 DE 40             ld hl,tile_ram_start + hud_bot_row + row_30
 58+  221A 3A 38 4C             ld a, (time_remaining + 0)
 59+  221D 4F                   ld c, a
 60+  221E CD 94 24             call show_hex_small
 61+  2221
 62+  2221
 63+  2221
 64+  2221 C9                   ret
 65+  2222
 66+  2222
 67+  2222              show_level:
 68+  2222
 69+  2222 21 CB 40             ld hl,tile_ram_start + hud_bot_row + row_11
 70+  2225 3A 92 4C             ld a, (level_hex)
 71+  2228 4F                   ld c, a
 72+  2229 CD 94 24             call show_hex_small
 73+  222C
 74+  222C
 75+  222C
 76+  222C C9                   ret
 77+  222D
 78+  222D              show_life_icons:
 79+  222D
 80+  222D
 81+  222D              live_icons:
 82+  222D
 83+  222D 21 A5 40             ld hl,tile_ram_start + column_24 + row_5
 84+  2230 3A 14 4D             ld a, (player_lives)
 85+  2233 3D                   dec a
 86+  2234 4F                   ld c, a
 87+  2235 06 09                ld b, 9
 88+  2237
 89+  2237              lives_loop:
 90+  2237
 91+  2237
 92+  2237 79                   ld a, c
 93+  2238 FE 00                cp 0
 94+  223A FA 42 22             jp m, no_life
 95+  223D
 96+  223D 3E E2                ld a, $E2
 97+  223F C3 44 22             jp draw_and_loop_lives
 98+  2242
 99+  2242              no_life:
100+  2242
101+  2242 3E 40                ld a, blank_tile
102+  2244
103+  2244              draw_and_loop_lives:
104+  2244 77                   ld (hl), a
105+  2245
106+  2245 CB D4                set 2, h
107+  2247
108+  2247 3E 09                ld a, palette_blue_red_yellow
109+  2249 77                   ld (hl), a
110+  224A
111+  224A CB 94                res 2, h
112+  224C
113+  224C 23                   inc hl
114+  224D 0D                   dec c
115+  224E 10 E7                djnz lives_loop
116+  2250
117+  2250 C9                   ret
118+  2251
119+  2251
120+  2251
121+  2251              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
122+  2251              ; displays player score and high score
123+  2251              ; in sensible locations on 2nd row
124+  2251              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
125+  2251              ;constants
126+  2251              hi_score_location:                equ tile_ram_start + column_27 + row_4
127+  2251
128+  2251              show_score:
129+  2251
130+  2251
131+  2251 21 85 40             ld hl,tile_ram_start + hud_top_row  + row_5
132+  2254
133+  2254                      ;ld a,(current_score + 3)                                        ;get player score (hi byte first - little endian)
134+  2254                      ;ld c,a
135+  2254                      ;call show_hex                                                                ;output hi byte of score
136+  2254 3A 10 4D             ld a,(current_score + 2)                                        ;get player score (hi byte first - little endian)
137+  2257 4F                   ld c,a
138+  2258 CD 78 24             call show_hex                                                                ;output hi byte of score
139+  225B 3A 0F 4D             ld a,(current_score + 1)                                        ;get player score (hi byte first - little endian)
140+  225E 4F                   ld c,a
141+  225F CD 78 24             call show_hex                                                                ;output hi byte of score
142+  2262 3A 0E 4D             ld a,(current_score)                                                ;get player score (hi byte first - little endian)
143+  2265 4F                   ld c,a
144+  2266 CD 78 24             call show_hex                                                                ;output hi byte of score
145+  2269
146+  2269 21 9A 40             ld hl,tile_ram_start + hud_top_row  + row_26                                  ;output on right hand side
147+  226C                     ; ld a,(high_score + 3)                                                ;get player score (hi byte first - little endian)
148+  226C                    ; ld c,a
149+  226C                     ;call show_hex                                                                ;output hi byte of score
150+  226C 3A 59 4C             ld a,(high_scores + 5)                                                ;get player score (hi byte first - little endian)
151+  226F 4F                   ld c,a
152+  2270 CD 78 24             call show_hex                                                                ;output hi byte of score
153+  2273 3A 58 4C             ld a,(high_scores + 4)                                                ;get player score (hi byte first - little endian)
154+  2276 4F                   ld c,a
155+  2277 CD 78 24             call show_hex                                                                ;output hi byte of score
156+  227A 3A 57 4C             ld a,(high_scores +3)                                                        ;get player score (hi byte first - little endian)
157+  227D 4F                   ld c,a
158+  227E CD 78 24             call show_hex                                                                ;output hi byte of score
159+  2281
160+  2281
161+  2281 C9                   ret
162+  2282
163+  2282              bot_display_upd:
164+  2282 2A A6 4C             ld hl,(frame_number)                                                ;get frame number see if it's 60
165+  2285 7D                   ld a,l                                                                                ;check frame number
166+  2286 A7                   and a                                                                                ;to see if it's zero
167+  2287 C0                   ret nz                                                                                ;don't update if not frame 0
168+  2288
169+  2288 3A 5C 34             ld a,(bot_mess_seconds)                                                ;get seconds interval for message change
170+  228B A4                   and h                                                                                ;and with number of seconds gone by
171+  228C C0                   ret nz                                                                                ;only update if on a 2 second interval, jump onto top display text
172+  228D
173+  228D 2A B6 4C             ld hl,(msg_bot_addr)                                                ;get addr of message to display
174+  2290 5E                   ld e,(hl)                                                                        ;remember lo-byte first in memory
175+  2291 23                   inc hl                                                                                ;move to hi-byte
176+  2292 56                   ld d,(hl)                                                                        ;place in d
177+  2293 23                   inc hl                                                                                ;point to next addr in array of addresses
178+  2294 7A                   ld a,d                                                                                ;load hi-byte into for or'ing with the lo-byte
179+  2295 B3                   or e                                                                                ;see if address is zero (if we or we can test full zero easy)
180+  2296 C2 A0 22             jp nz,process_text_bot_text                                        ;if it isn't display the message
181+  2299
182+  2299 21 93 34             ld hl,bottom_list                                                        ;reset to first item and re-load into de
183+  229C 5E                   ld e,(hl)                                                                        ;remember lo-byte first in memory
184+  229D 23                   inc hl                                                                                ;move to hi-byte
185+  229E 56                   ld d,(hl)                                                                        ;place in d
186+  229F 23                   inc hl                                                                                ;point to next addr in array of addresses
187+  22A0
188+  22A0
189+  22A0              process_text_bot_text:
190+  22A0 22 B6 4C             ld (msg_bot_addr),hl
191+  22A3                                                                  ;store next message to display
192+  22A3 21 83 43             ld    hl,tile_ram_start +column_1 +row_3                               ;tile address to start writing at
193+  22A6 0E 01                ld        c,red                                                         ;palette 21 (third colour tan)
194+  22A8 CD 66 20             call main_blit_text_and_colour                               ;write text to border area
195+  22AB C9                   ret
196+  22AC
197+  22AC
198+  22AC              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
199+  22AC              ; displays a portion of text from a message at the top of the screen
200+  22AC              ; updates every 8 frames
201+  22AC              ; address of start position is loaded into hl
202+  22AC              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
203+  22AC
204+  22AC
205+  22AC
# file closed: scripts/system/display/hud.asm
 38   22AC                  include "scripts/system/screens/game_over.asm"
# file opened: scripts/system/screens/game_over.asm
  1+  22AC                                                                                                                ;fall through to game over setup
  2+  22AC              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  22AC              ; performs logic for game over mode
  4+  22AC              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  22AC              ;constants
  6+  22AC
  7+  22AC
  8+  22AC                                                                      ;address of bottom blank
  9+  22AC              start_game_over:
 10+  22AC
 11+  22AC 3E 04            ld a,game_over                                                            ;set mode to game over
 12+  22AE 32 09 4D         ld (mode),a
 13+  22B1
 14+  22B1
 15+  22B1 3E 01            ld a, 1
 16+  22B3 CD B0 06         call play_song
 17+  22B6
 18+  22B6 CD AD 20         call clear_tile_ram
 19+  22B9 CD 1E 24         call hide_sprites
 20+  22BC
 21+  22BC CD B3 08         call check_high_score
 22+  22BF
 23+  22BF 3E 8C            ld a, 35 * 4
 24+  22C1 32 BF 4C         ld (sprite3 + spr_num), a
 25+  22C4
 26+  22C4 3E 90            ld a, 36 * 4
 27+  22C6 32 C1 4C         ld (sprite4 + spr_num), a
 28+  22C9
 29+  22C9 3E 94            ld a, 37 * 4
 30+  22CB 32 C3 4C         ld (sprite5 + spr_num), a
 31+  22CE
 32+  22CE 3E 98            ld a, 38 * 4
 33+  22D0 32 C5 4C         ld (sprite6 + spr_num), a
 34+  22D3
 35+  22D3 3E 88            ld a, 34 * 4
 36+  22D5 32 B9 4C         ld (sprite0 + spr_num), a
 37+  22D8 32 BB 4C         ld (sprite1+ spr_num), a
 38+  22DB
 39+  22DB 3E 10            ld a, 16
 40+  22DD 32 CA 4C         ld (sprite0 + spr_y), a
 41+  22E0
 42+  22E0 C6 10            add 16
 43+  22E2 32 CC 4C         ld (sprite1 + spr_y), a
 44+  22E5
 45+  22E5 3E 00            ld a, 0
 46+  22E7 32 D7 4C         ld (sprite7 + spr_x), a
 47+  22EA
 48+  22EA
 49+  22EA 3E 7C            ld a, 124
 50+  22EC 32 88 4C         ld (harry_land_timer) , a
 51+  22EF
 52+  22EF 3E 0E            ld a, palette_white_black_pink
 53+  22F1                  ;ld a, 1
 54+  22F1 32 BA 4C         ld (sprite0 + spr_pal),a
 55+  22F4 32 BC 4C         ld (sprite1 + spr_pal),a
 56+  22F7
 57+  22F7
 58+  22F7 3E 30            ld a, start_x
 59+  22F9 32 D0 4C         ld (sprite3 + spr_y), a
 60+  22FC
 61+  22FC D6 10            sub 16
 62+  22FE 32 D2 4C         ld (sprite4 + spr_y), a
 63+  2301
 64+  2301 D6 18            sub 24
 65+  2303 32 D4 4C         ld (sprite5 + spr_y), a
 66+  2306
 67+  2306 D6 10            sub 16
 68+  2308 32 D6 4C         ld (sprite6 + spr_y), a
 69+  230B
 70+  230B
 71+  230B 3E 82            ld a, level_y
 72+  230D 32 CF 4C         ld (sprite3 + spr_x), a
 73+  2310 3D               dec a
 74+  2311 32 D1 4C         ld (sprite4 + spr_x), a
 75+  2314 32 D3 4C         ld (sprite5 + spr_x), a
 76+  2317 32 D5 4C         ld (sprite6 + spr_x), a
 77+  231A
 78+  231A D6 02            sub 2
 79+  231C 32 C9 4C         ld (sprite0 + spr_x), a
 80+  231F 32 CB 4C         ld (sprite1 + spr_x), a
 81+  2322
 82+  2322 3E 12            ld a, palette_green_white_red
 83+  2324                 ; ld (sprite3 + spr_pal), a
 84+  2324                 ; ld (sprite4 + spr_pal), a
 85+  2324                 ; ld (sprite5 + spr_pal), a
 86+  2324                 ; ld (sprite6 + spr_pal), a
 87+  2324                 ; ld (sprite7 + spr_pal), a
 88+  2324
 89+  2324
 90+  2324
 91+  2324 C3 78 3F         jp wait                                                                                ;wait for next game loop
 92+  2327
 93+  2327
 94+  2327              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 95+  2327              ; performs logic for game over mode
 96+  2327              ; just a countdown timer so no other functions needed
 97+  2327              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 98+  2327              game_over_logic:
 99+  2327
100+  2327 3A 88 4C         ld a, (harry_land_timer)
101+  232A FE 00            cp 0
102+  232C CA 33 23         jp z, noMore2
103+  232F
104+  232F 3D               dec a
105+  2330 32 88 4C         ld (harry_land_timer), a
106+  2333
107+  2333              noMore2:
108+  2333
109+  2333
110+  2333 DD 21 BF 4C      ld ix, sprite3
111+  2337
112+  2337 06 04            ld b, 4
113+  2339
114+  2339              scroll_loop2:
115+  2339
116+  2339 DD 7E 11         ld a, (ix + spr_y)
117+  233C 3C               inc a
118+  233D 3C               inc a
119+  233E DD 77 11         ld (ix + spr_y), a
120+  2341 FE 28            cp 40
121+  2343 DA 4B 23         jp c, hide2
122+  2346
123+  2346 FE FA            cp 250
124+  2348 DA 61 23         jp c, noHide2
125+  234B
126+  234B
127+  234B              hide2:
128+  234B 3E 00            ld a, 0
129+  234D DD 77 01         ld (ix +spr_pal),a
130+  2350
131+  2350 3A 88 4C         ld a, (harry_land_timer)
132+  2353 FE 00            cp 0
133+  2355 C2 76 23         jp nz, nextSprite2
134+  2358
135+  2358 78               ld a, b
136+  2359 FE 01            cp 1
137+  235B CA 7F 23         jp z, finish_game_over
138+  235E
139+  235E C3 76 23         jp nextSprite2
140+  2361
141+  2361              noHide2:
142+  2361
143+  2361 3A 88 4C         ld a, (harry_land_timer)
144+  2364 FE 00            cp 0
145+  2366 C2 F9 28         jp nz, okToColour
146+  2369
147+  2369 DD 7E 11         ld a, (ix+spr_y)
148+  236C FE 3C            cp 60
149+  236E DA 4B 23         jp c, hide2
150+  2371
151+  2371              okToColour2:
152+  2371
153+  2371 3E 12            ld a, palette_green_white_red
154+  2373 DD 77 01         ld (ix +spr_pal),a
155+  2376
156+  2376              nextSprite2:
157+  2376
158+  2376 DD 23            inc ix
159+  2378 DD 23            inc ix
160+  237A
161+  237A 10 BD            djnz scroll_loop2
162+  237C
163+  237C
164+  237C
165+  237C              exit_game_over_update:
166+  237C
167+  237C
168+  237C
169+  237C
170+  237C C3 78 3F         jp wait                                                                                ;finished setup goto wait section
171+  237F
172+  237F
173+  237F              finish_game_over:
174+  237F
175+  237F 3E 00            ld a, viewing_high_score
176+  2381 32 78 4C         ld (high_score_state), a
177+  2384
178+  2384 3A 7B 4C         ld a, (high_score_index)
179+  2387 FE FF            cp 255
180+  2389 CA 0B 01         jp z, start_title_mode
181+  238C
182+  238C
183+  238C 3E 02            ld a, entering_high_score
184+  238E 32 78 4C         ld (high_score_state), a
185+  2391
186+  2391 C3 8A 08         jp start_high_score
187+  2394
188+  2394
189+  2394
# file closed: scripts/system/screens/game_over.asm
 39   2394                  include "scripts/system/input.asm"
# file opened: scripts/system/input.asm
  1+  2394              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2+  2394              ; input manager packages the input data from the two io ports
  3+  2394              ; so it can be used to track button/joystick state in a nice format
  4+  2394              ;
  5+  2394              ; keeps stack of current and previous state of inputs
  6+  2394              ; so we can test whether they are just pressed, held or released
  7+  2394              ; input manager constants 0 is down 1 is up
  8+  2394              ; mask status byte first using these
  9+  2394              ; for joystick_state
 10+  2394              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 11+  2394              inp_chk_up:                                equ $11                                                                ;mask for looking at up (bits 4 and 0)
 12+  2394              inp_chk_left:                        equ $22                                                                ;mask for looking at left (bits 5 and 1)
 13+  2394              inp_chk_right:                        equ $44                                                                ;mask for looking at right (bits 6 and 2)
 14+  2394              inp_chk_down:                        equ $88                                                                ;mask for looking at down (bits 7 and 3)
 15+  2394              ;for start_state
 16+  2394              inp_chk_p1st:                        equ $50                                                                ;mask for looking at p1 start (bits 6 and 4)
 17+  2394              inp_chk_p2st:                        equ $a0                                                                ;mask for looking at p2 start (bits 7 and 5)
 18+  2394
 19+  2394              CPU_UP         equ %00010001
 20+  2394
 21+  2394              CPU_LEFT       equ %00100010
 22+  2394
 23+  2394              CPU_RIGHT      equ %01000100
 24+  2394
 25+  2394              CPU_DOWN         equ %10001000
 26+  2394              CPU_FIRE       equ 0
 27+  2394
 28+  2394
 29+  2394
 30+  2394              ;comparison constants for player 1 and 2 start buttons
 31+  2394              inp_p1_presd:                        equ $40                                                                ;check for p1 start pressed bit 6 previous 1 -up bit 4 current down 0 )
 32+  2394              inp_p2_presd:                        equ $80                                                                ;check for p2 start pressed
 33+  2394
 34+  2394
 35+  2394              inp_p1_relsd:                        equ $10                                                                ;check for p1 start released bit 6 previous 0 -down bit 4 current up 1 )
 36+  2394              inp_p2_relsd:                        equ $20                                                                ;check for p2 start released
 37+  2394
 38+  2394              inp_p1_fire:    equ %00010000
 39+  2394
 40+  2394              ;comparison constants to check wether just pressed or released
 41+  2394              inp_up_presd:                        equ $10                                                                ;check for up pressed
 42+  2394              inp_left_presd:                        equ $20                                                                ;check for left pressed
 43+  2394              inp_right_presd:                equ $40                                                                ;check for right pressed
 44+  2394              inp_down_presd:                        equ $80                                                                ;check for down pressed
 45+  2394
 46+  2394
 47+  2394              inp_up_relsd:                        equ $01                                                                ;check for up released
 48+  2394              inp_left_relsd:                        equ $02                                                                ;check for left released
 49+  2394              inp_right_relsd:                equ $04                                                                ;check for right released
 50+  2394              inp_down_relsd:                        equ $08                                                                ;check for down released
 51+  2394
 52+  2394
 53+  2394
 54+  2394
 55+  2394              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 56+  2394              ; manages processing of previous and current states, for pressed and released behaviour checking
 57+  2394              ; as well as allowing standard up and down checking
 58+  2394              ; gets new state and packs this into a byte with the previous state in the upper nibble
 59+  2394              ; uses a byte for joystick direction and a separate byte for the start buttons
 60+  2394              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 61+  2394              input_manager:
 62+  2394                                              ;bit 0 - 3 up,left,right,down
 63+  2394 3A 32 4C                                     ld a,(joystick_state)                                                ;get joystick state
 64+  2397 87                                           add a,a
 65+  2398 87                                           add a,a
 66+  2399 87                                           add a,a
 67+  239A 87                                           add a,a                                                                                ;shift lower nibble to upper nibble to move to previous state location
 68+  239B E6 F0                                        and $f0                                                                                ;clear lower nibble
 69+  239D 47                                           ld b,a                                                                                ;store temporarily
 70+  239E 3A 00 50                                     ld a,($5000)                                                                ;get IN0
 71+  23A1 E6 0F                                        and $0f                                                                                ;clear upper nibble
 72+  23A3 B0                                           or b                                                                                ;combine current state with previous state PPPP CCCC
 73+  23A4 32 32 4C                                    ld (joystick_state),a                                                ;and store new previous and current state
 74+  23A7
 75+  23A7
 76+  23A7                                              ;bit 5 is 1p start, bit 6 is 2pstart
 77+  23A7                                              ;do start button states - PPCC xxxx upper hi bits of upper nibble contain previous state, low bits of upper nibble contain current state
 78+  23A7 3A 33 4C                                     ld a,(start_state)                                                        ;get start button state
 79+  23AA 87                                           add a,a
 80+  23AB 87                                           add a,a                                                                                ;shift current two bits to previous position
 81+  23AC E6 C0                                        and $c0                                                                                ;clear lower 2 bits of upper nibble - and the lower nibble
 82+  23AE 47                                           ld b,a                                                                                ;store temporaily
 83+  23AF 3A 40 50                                     ld a,($5040)                                                                ;get IN1
 84+  23B2 1F                                           rra                                                                                        ;shift two bits to low bits of upper nibble
 85+  23B3 E6 30                                        and $30                                                                                ;clear all bits other than 4 and 5
 86+  23B5 B0                                           or b                                                                                ;combine previous with current PP CC XXXX
 87+  23B6 32 33 4C                                     ld (start_state),a                                                        ;store previous and new states
 88+  23B9 C9                                           ret
 89+  23BA
# file closed: scripts/system/input.asm
 40   23BA                  include "scripts/system/display/sprite.asm"
# file opened: scripts/system/display/sprite.asm
  1+  23BA
  2+  23BA              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  23BA              ; not being used just a little mess at flipping screen tiles and also flipping sprites to maintain
  4+  23BA              ; there relative position and velocities
  5+  23BA              ; check player 2 start button test this with up
  6+  23BA              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  23BA
  8+  23BA              flip_input:
  9+  23BA 3A 33 4C             ld a,(start_state)                                                        ;get state
 10+  23BD E6 A0                and inp_chk_p2st                                                        ;examine p2 start
 11+  23BF FE 80                cp inp_p2_presd                                                                ;check for pressed
 12+  23C1 C0                   ret nz                                                                                ;not held held 0 means pressed
 13+  23C2 3A AF 4C             ld a,(flip_screen)                                                        ;get flip screen status value
 14+  23C5 2F                   cpl                                                                                        ;flip bit
 15+  23C6 32 AF 4C             ld (flip_screen),a                                                        ;store again
 16+  23C9 32 03 50             ld (flip_screen_addr),a
 17+  23CC                                                                      ;write to flip screen ram - this is a write only location so we need to maintain state ourselves
 18+  23CC              ;Notes
 19+  23CC              ; sprites have to be flipped manually
 20+  23CC              ; this loop works through each sprite it needs to:
 21+  23CC              ; flip the x and y flip bits
 22+  23CC              ; negate (*-1) the x and y velocities
 23+  23CC              ; adjust and compliment the x and y positions
 24+  23CC
 25+  23CC              flip_all_sprites:
 26+  23CC
 27+  23CC 11 11 0D             ld de,$0d11                                                                        ;amount to subtract from positions 0d for x and $11 for y
 28+  23CF 0E 03                ld c,$03                                                                        ;mask for toggling flip bits (bits 1 and 0)
 29+  23D1
 30+  23D1 DD 21 B9 4C          ld ix,sprite_data                                                        ;load up sprite number data
 31+  23D5 06 08                ld b,NUM_SPRITES
 32+  23D7                                                                                                    ;need to do 6 sprites
 33+  23D7              .flip_bits:
 34+  23D7
 35+  23D7 79           		ld a,c                                                                                ;load up flip mask for x and y flip bits
 36+  23D8 DD AE 00             xor (ix + spr_num)
 37+  23DB DD 77 00             ld (ix + spr_num),a                                                        ;store flipped version
 38+  23DE
 39+  23DE                      ;addjust position
 40+  23DE DD 7E 10             ld a,(ix + spr_x)                                                        ;get x position
 41+  23E1 92                   sub d                                                                                ;subtract offset
 42+  23E2 2F                   cpl                                                                                        ;flip bits
 43+  23E3 DD 77 10             ld (ix + spr_x),a                                                        ;and store
 44+  23E6
 45+  23E6 DD 7E 11             ld a,(ix + spr_y)                                                        ;get y position
 46+  23E9 93                   sub e                                                                                ;subtract offset
 47+  23EA 2F                   cpl                                                                                        ;flip bits
 48+  23EB DD 77 11             ld (ix + spr_y),a                                                        ;and store
 49+  23EE
 50+  23EE
 51+  23EE                      ;adjust velocities
 52+  23EE DD 7E 18             ld a,(ix + spr_vel_x)                                                ;get x velocity
 53+  23F1 ED 44                neg                                                                                        ;and negate
 54+  23F3 DD 77 18             ld (ix + spr_vel_x),a                                                ;and store
 55+  23F6
 56+  23F6
 57+  23F6 DD 7E 19             ld a,(ix + spr_vel_y)                                                ;get y velocity
 58+  23F9 ED 44                neg                                                                                        ;and negate
 59+  23FB DD 77 19             ld (ix + spr_vel_y),a                                                ;and store
 60+  23FE
 61+  23FE
 62+  23FE DD 23                inc ix
 63+  2400 DD 23                inc ix                                                                                ;skip two bytes to move to next sprite block
 64+  2402 10 D3                djnz .flip_bits                                                                ;perform loop until b is zero
 65+  2404 C9                   ret
 66+  2405
 67+  2405
 68+  2405              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 69+  2405              ; copies sprite data from ram to the sprite registers
 70+  2405              ; places data from sprite variables into the sprite registers
 71+  2405              ; this happens once a frame, but for efficiency you could just manage this manually
 72+  2405              ; for each sprite using custom code
 73+  2405              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 74+  2405
 75+  2405              set_sprite_data:
 76+  2405                      ;first block of data is sprite number(+flip data) and pallete number
 77+  2405 21 B9 4C             ld hl,sprite_data                                                        ;point to sprite data in ram
 78+  2408 11 F0 4F             ld de,sprite_reg                                                        ;point to sprite registers
 79+  240B 01 10 00             ld bc,NUM_SPRITES*2                                                                       ;do for all 6 sprites 2 bytes of data
 80+  240E ED B0                ldir                                                                                ;copy byte (hl) -> (de) inc de and hl, dec bc stop when bc is 0
 81+  2410
 82+  2410
 83+  2410                      ;second block of data is the position data
 84+  2410 11 60 50             ld de,spriteXY_reg                                                        ;point to xy position regsiters
 85+  2413 01 10 00             ld bc,NUM_SPRITES*2                                                                        ;do for all 6 sprites 2 bytes of data
 86+  2416 ED B0                ldir                                                                                ;copy byte (hl) -> (de) inc de and hl, dec bc stop when bc is 0
 87+  2418
 88+  2418
 89+  2418 C9                   ret
 90+  2419
 91+  2419
 92+  2419
 93+  2419              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 94+  2419              ; hides a sprite (by setting it's colour palette to 0)
 95+  2419              ; ix contains base address of sprite data
 96+  2419              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 97+  2419              hide_sprite:
 98+  2419 AF                   xor a                                                                                ;set a to zero
 99+  241A DD 77 01             ld (ix + spr_pal), a                                                ;store 0 palette for sprite
100+  241D C9                   ret
101+  241E
102+  241E              hide_sprites:
103+  241E
104+  241E DD 21 B9 4C          ld ix, sprite0
105+  2422 CD 19 24             call hide_sprite
106+  2425
107+  2425 DD 21 BB 4C          ld ix, sprite1
108+  2429 CD 19 24             call hide_sprite
109+  242C
110+  242C DD 21 BD 4C          ld ix, sprite2
111+  2430 CD 19 24             call hide_sprite
112+  2433
113+  2433 DD 21 BF 4C          ld ix, sprite3
114+  2437 CD 19 24             call hide_sprite
115+  243A
116+  243A DD 21 C1 4C          ld ix, sprite4
117+  243E CD 19 24             call hide_sprite
118+  2441
119+  2441 DD 21 C3 4C          ld ix, sprite5
120+  2445 CD 19 24             call hide_sprite
121+  2448
122+  2448 DD 21 C5 4C          ld ix, sprite6
123+  244C CD 19 24             call hide_sprite
124+  244F
125+  244F DD 21 C7 4C          ld ix, sprite7
126+  2453 CD 19 24             call hide_sprite
127+  2456
128+  2456 C9                   ret
129+  2457
130+  2457              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
131+  2457              ; checks to see if a sprite is visible (it's colour is not 0)
132+  2457              ; ix contains base address of sprite data
133+  2457              ; sets status register, zero indicates sprite is hidden
134+  2457              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
135+  2457              is_sprite_hidden:
136+  2457 DD 7E 01             ld a,(ix + spr_pal)                                                        ;pick up palette
137+  245A A7                   and a                                                                                ;test for zero
138+  245B C9                   ret
139+  245C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
140+  245C              ; checks to see if a sprite is visible (it's colour is not 0)
141+  245C              ; ix contains base address of sprite data
142+  245C              ; sets status register, non zero indicates sprite is visible
143+  245C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
144+  245C              is_sprite_visible:
145+  245C DD 7E 01             ld a,(ix + spr_pal)                                                        ;pick up pallete in use
146+  245F 2F                   cpl                                                                                        ;compliment
147+  2460 A7                   and a                                                                                ;set flags
148+  2461 C9                   ret
149+  2462
150+  2462
151+  2462              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
152+  2462              ; shows a sprite (by setting it's colour palette to a)
153+  2462              ; ix contains base address of sprite data
154+  2462              ; a contains colour pallete to use
155+  2462              ;
156+  2462              ; to be honest this is written for clarity, you'd do this inline in reality
157+  2462              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
158+  2462              show_sprite:
159+  2462 DD 77 01             ld (ix + spr_pal), a                                                ;store chosen palette for given sprite
160+  2465 C9                   ret
161+  2466
162+  2466
163+  2466
164+  2466              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
165+  2466              ; performs intial copy of sprite data over
166+  2466              ; to the sprite ram area for game mode
167+  2466              ; hl holds address to copy sprite data from
168+  2466              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
169+  2466              set_sprites:
170+  2466 11 B9 4C             ld de,sprite_data                                                        ;address of sprite data in ram
171+  2469 01 20 00             ld bc,4 * NUM_SPRITES                                                                       ;get ready to copy all bytes (6 on hardware)
172+  246C ED B0                ldir
173+  246E                                                                                                    ;copy data to ram
174+  246E C9                   ret
175+  246F
176+  246F              set_player:
177+  246F
178+  246F 11 B9 4C             ld de,sprite_data                                                        ;address of sprite data in ram
179+  2472 01 04 00             ld bc,4 * 1                                                                       ;get ready to copy all bytes (6 on hardware)
180+  2475 ED B0                ldir                                                                                ;copy data to ram
181+  2477
182+  2477 C9                   ret
183+  2478
# file closed: scripts/system/display/sprite.asm
 41   2478                  include "scripts/system/display/debug.asm"
# file opened: scripts/system/display/debug.asm
  1+  2478
  2+  2478
  3+  2478
  4+  2478              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  2478              ; HELPER FUNCTIONS
  6+  2478              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  2478              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8+  2478              ; takes a byte and outputs the hex value to top or bottom rows only
  9+  2478              ; hl holds address of vram to place data
 10+  2478              ; c holds value to output
 11+  2478              ; a little tricky as tiles stored in ascii, so need to do adjustments to move between
 12+  2478              ; the stock digits and the 6 hex additional digits
 13+  2478              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 14+  2478              show_hex:
 15+  2478 06 02                ld b,2
 16+  247A                                                                                                                   ;do this twice
 17+  247A              .nibbleout:
 18+  247A
 19+  247A AF                   xor a                                                                                                ;clear carry
 20+  247B 79                   ld a,c                                                                                                ;get byte to output
 21+  247C 07                   rlca
 22+  247D 07                   rlca
 23+  247E 07                   rlca
 24+  247F 07                   rlca                                                                                                ;rotate 4 times to swap nibbles
 25+  2480 4F                   ld c,a                                                                                                ;store temp for next time
 26+  2481 E6 0F                and $f                                                                                                ;mask
 27+  2483 FE 0A                cp $a                                                                                                ;are we bigger than 9
 28+  2485 F2 8D 24             jp p,.alphahex                                                                                ;adjust for a to f
 29+  2488 C6 30                add 48                                                                                                ;it's 0-9 so add 48 for tile number
 30+  248A C3 8F 24             jp .output                                                                                        ;now render to screen
 31+  248D              .alphahex:
 32+  248D C6 37                add 55                                                                                                ;add 55 (so a becomes 65 - ASCII A)
 33+  248F              .output:
 34+  248F 77                   ld (hl),a                                                                                        ;write tile value to vram
 35+  2490 23                   inc hl                                                                                                ;move to next column on the right for lower nibble
 36+  2491 10 E7                djnz .nibbleout
 37+  2493 C9                   ret
 38+  2494
 39+  2494
 40+  2494              show_hex_small:
 41+  2494 06 02                ld b,2
 42+  2496                                                                                                                   ;do this twice
 43+  2496              .nibbleout:
 44+  2496
 45+  2496 AF                   xor a                                                                                                ;clear carry
 46+  2497 79                   ld a,c                                                                                                ;get byte to output
 47+  2498 07                   rlca
 48+  2499 07                   rlca
 49+  249A 07                   rlca
 50+  249B 07                   rlca                                                                                                ;rotate 4 times to swap nibbles
 51+  249C 4F                   ld c,a                                                                                                ;store temp for next time
 52+  249D E6 0F                and $f                                                                                                ;mask
 53+  249F FE 0A                cp $a                                                                                                ;are we bigger than 9
 54+  24A1 F2 A7 24             jp p,.alphahex                                                                                ;adjust for a to f
 55+  24A4                      ;add 48                                                                                                ;it's 0-9 so add 48 for tile number
 56+  24A4 C3 A9 24             jp .output                                                                                        ;now render to screen
 57+  24A7              .alphahex:
 58+  24A7 C6 37                add 55                                                                                                ;add 55 (so a becomes 65 - ASCII A)
 59+  24A9              .output:
 60+  24A9 77                   ld (hl),a                                                                                        ;write tile value to vram
 61+  24AA 23                   inc hl                                                                                                ;move to next column on the right for lower nibble
 62+  24AB 10 E9                djnz .nibbleout
 63+  24AD C9                   ret
 64+  24AE
# file closed: scripts/system/display/debug.asm
 42   24AE
 43   24AE                  include "scripts/system/sound/sound_wave.asm"
# file opened: scripts/system/sound/sound_wave.asm
  1+  24AE
  2+  24AE
  3+  24AE              process_wave:
  4+  24AE
  5+  24AE
  6+  24AE 3A 4C 4D     	ld a, (song_number)
  7+  24B1 FE 00        	cp 0
  8+  24B3 C8           	ret z
  9+  24B4
 10+  24B4 21 D2 16     	ld hl, channel_1_3BC8
 11+  24B7
 12+  24B7
 13+  24B7 DD 21 CC 4E  	ld ix, CH1_W_NUM
 14+  24BB FD 21 8C 4E  	ld iy, CH1_FREQ0
 15+  24BF
 16+  24BF CD FF 24     	call process_wave_voice
 17+  24C2
 18+  24C2 47           	ld b, a
 19+  24C3 3A CC 4E     	ld a, (CH1_W_NUM)
 20+  24C6 A7           	and a
 21+  24C7 28 04        	jr z, channel2
 22+  24C9
 23+  24C9 78           	ld a, b
 24+  24CA 32 91 4E     	ld (CH1_VOL), a
 25+  24CD
 26+  24CD              channel2:
 27+  24CD
 28+  24CD 21 DA 16     	ld hl, channel_2_3BCC
 29+  24D0 DD 21 DC 4E  	ld ix, CH2_W_NUM
 30+  24D4 FD 21 92 4E  	ld iy, CH2_FREQ1
 31+  24D8
 32+  24D8 CD FF 24     	call process_wave_voice
 33+  24DB
 34+  24DB 47           	ld b, a
 35+  24DC 3A DC 4E     	ld a, (CH2_W_NUM)
 36+  24DF A7           	and a
 37+  24E0 28 04        	jr z, channel3
 38+  24E2
 39+  24E2 78           	ld a, b
 40+  24E3 32 96 4E     	ld (CH2_VOL), a
 41+  24E6
 42+  24E6              channel3:
 43+  24E6
 44+  24E6
 45+  24E6 21 E2 16     	ld hl, channel_3_3CD0
 46+  24E9 DD 21 EC 4E  	ld ix, CH3_W_NUM
 47+  24ED FD 21 97 4E  	ld iy, CH3_FREQ1
 48+  24F1
 49+  24F1 CD FF 24     	call process_wave_voice
 50+  24F4
 51+  24F4 47           	ld b, a
 52+  24F5 3A EC 4E     	ld a, (CH3_W_NUM)
 53+  24F8 A7           	and a
 54+  24F9 C8           	ret z
 55+  24FA
 56+  24FA 78           	ld a, b
 57+  24FB 32 9B 4E     	ld (CH3_VOL), a
 58+  24FE
 59+  24FE C9           	ret
 60+  24FF
 61+  24FF
 62+  24FF
 63+  24FF
 64+  24FF              process_wave_voice:
 65+  24FF
 66+  24FF DD 7E 00     	ld a, (ix + 0)
 67+  2502 A7           	and a
 68+  2503 CA 98 04     	jp z, init_param
 69+  2506
 70+  2506 4F           	ld c, a
 71+  2507 06 08        	ld b, 8
 72+  2509 1E 80        	ld e, $80
 73+  250B
 74+  250B              find_bit2:
 75+  250B
 76+  250B 7B           	ld a, e
 77+  250C A1           	and c
 78+  250D 20 05        	jr nz, process_wav_bit
 79+  250F
 80+  250F CB 3B        	srl e
 81+  2511 10 F8        	djnz find_bit2
 82+  2513
 83+  2513 C9           	ret
 84+  2514
 85+  2514
 86+  2514              process_wav_bit:
 87+  2514
 88+  2514 DD 7E 02     	ld a, (ix+2)
 89+  2517 A3           	and e
 90+  2518 20 0C        	jr nz, dec_duration
 91+  251A
 92+  251A DD 73 02     	ld (ix+2),e
 93+  251D 06 01        	ld b, 1
 94+  251F CD D1 25     	call select_song
 95+  2522 C3 32 25     	jp process_wave_byte
 96+  2525
 97+  2525 0C           	inc c
 98+  2526
 99+  2526
100+  2526              dec_duration:
101+  2526
102+  2526 DD 35 0C     	dec (ix+$0C)
103+  2529 C2 2B 26     	jp nz, compute_wave_freq
104+  252C
105+  252C              return_from_rst_20:
106+  252C
107+  252C DD 6E 06     	ld l, (ix+6)
108+  252F DD 66 07     	ld h, (ix+7)
109+  2532
110+  2532
111+  2532              process_wave_byte:
112+  2532
113+  2532 7E           	ld a, (hl)
114+  2533 23           	inc hl
115+  2534 DD 75 06     	ld (ix+6), l
116+  2537
117+  2537 DD 74 07     	ld (ix+7), h
118+  253A FE F0        	cp $F0
119+  253C DA F9 25     	jp c, process_regular_byte
120+  253F
121+  253F 21 2C 25     	ld hl, return_from_rst_20
122+  2542 E5           	push hl
123+  2543 E6 0F        	and $0F
124+  2545 E7           	rst $20
125+  2546
126+  2546              jump_table:
127+  2546
128+  2546 66 25        	defw special_F0
129+  2548 76 25        	defw special_F1
130+  254A 88 25        	defw special_F2
131+  254C 9A 25        	defw special_F3
132+  254E AC 25        	defw special_F4
133+  2550 D0 25        	defw special_F5
134+  2552 D0 25        	defw special_F5
135+  2554 D0 25        	defw special_F5
136+  2556 D0 25        	defw special_F5
137+  2558 D0 25        	defw special_F5
138+  255A D0 25        	defw special_F5
139+  255C D0 25        	defw special_F5
140+  255E D0 25        	defw special_F5
141+  2560 D0 25        	defw special_F5
142+  2562 D0 25        	defw special_F5
143+  2564 BE 25        	defw special_FF
144+  2566
145+  2566
146+  2566              special_F0:
147+  2566
148+  2566 DD 6E 06     	ld l, (ix+6)
149+  2569 DD 66 07     	ld h, (ix+7)
150+  256C 7E           	ld a,(hl)
151+  256D DD 77 06     	ld (ix+6), a
152+  2570 23           	inc hl
153+  2571 7E           	ld a,(hl)
154+  2572 DD 77 07     	ld (ix+7), a
155+  2575 C9           	ret
156+  2576
157+  2576
158+  2576              special_F1:
159+  2576
160+  2576 DD 6E 06     	ld l, (ix+6)
161+  2579 DD 66 07     	ld h, (ix+7)
162+  257C 7E           	ld a,(hl)
163+  257D 23           	inc hl
164+  257E DD 75 06     	ld (ix+6), l
165+  2581 DD 74 07     	ld (ix+7), h
166+  2584 DD 77 03     	ld (ix+3), a
167+  2587
168+  2587 C9           	ret
169+  2588
170+  2588
171+  2588              special_F2:
172+  2588
173+  2588 DD 6E 06     	ld l,(ix+6)
174+  258B DD 66 07     	ld h,(ix+7)
175+  258E 7E           	ld a, (hl)
176+  258F 23           	inc hl
177+  2590 DD 75 06     	ld (ix+6),l
178+  2593 DD 74 07     	ld (ix+7),h
179+  2596 DD 77 04     	ld (ix+4),a
180+  2599 C9           	ret
181+  259A
182+  259A              special_F3:
183+  259A
184+  259A DD 6E 06     	ld l, (ix+6)
185+  259D DD 66 07     	ld h, (ix+7)
186+  25A0 7E           	ld a, (hl)
187+  25A1 23           	inc hl
188+  25A2 DD 75 06     	ld (ix+6), l
189+  25A5 DD 74 07     	ld (ix+7), h
190+  25A8 DD 77 09     	ld (ix+9), a
191+  25AB C9           	ret
192+  25AC
193+  25AC
194+  25AC              special_F4:
195+  25AC
196+  25AC DD 6E 06     	ld l, (ix+6)
197+  25AF DD 66 07     	ld h, (ix+7)
198+  25B2 7E           	ld a, (hl)
199+  25B3 23           	inc hl
200+  25B4 DD 75 06     	ld (ix+6),l
201+  25B7 DD 74 07     	ld (ix+7),h
202+  25BA DD 77 0B     	ld (ix+$0b), a
203+  25BD C9           	ret
204+  25BE
205+  25BE              special_FF:
206+  25BE
207+  25BE DD 7E 02     	ld a, (ix+2)
208+  25C1 2F           	cpl
209+  25C2 DD A6 00     	and (ix+0)
210+  25C5 DD 77 00     	ld (ix+0), a
211+  25C8
212+  25C8 3E 00        	ld a, 0
213+  25CA 32 4C 4D     	ld (song_number), a
214+  25CD C3 98 04     	jp init_param
215+  25D0
216+  25D0              special_F5:
217+  25D0
218+  25D0 C9           	ret
219+  25D1
220+  25D1
221+  25D1              select_song:
222+  25D1
223+  25D1 3A 4C 4D     	ld a, (song_number)
224+  25D4 47           	ld b, a
225+  25D5 3E 01        	ld a, 1
226+  25D7 C3 F4 25     	jp goto_rst_18
227+  25DA 05           	dec b
228+  25DB
229+  25DB              	;push bc
230+  25DB
231+  25DB 78           	ld a, b
232+  25DC FE 01        	cp 1
233+  25DE 28 04        	jr z, skip44
234+  25E0
235+  25E0 06 00        	ld b, 0
236+  25E2 18 10        	jr goto_rst_18
237+  25E4
238+  25E4              skip44:
239+  25E4
240+  25E4 3E 01        	ld a, 1
241+  25E6 06 01        	ld b, 1
242+  25E8 FE 01        	cp 1
243+  25EA 28 08        	jr z, goto_rst_18
244+  25EC
245+  25EC 06 02        	ld b, 2
246+  25EE FE 04        	cp 4
247+  25F0 28 02        	jr z, goto_rst_18
248+  25F2
249+  25F2 06 03        	ld b,3
250+  25F4
251+  25F4              goto_rst_18:
252+  25F4
253+  25F4 DF           	rst $18
254+  25F5
255+  25F5 C1           	pop bc
256+  25F6 C3 32 25     	jp process_wave_byte
257+  25F9
258+  25F9
259+  25F9              process_regular_byte:
260+  25F9
261+  25F9 47           	ld b, a
262+  25FA E6 1F        	and $1F
263+  25FC 28 03        	jr z, skip45
264+  25FE
265+  25FE DD 70 0D     	ld (ix+$0d),b
266+  2601
267+  2601
268+  2601              skip45:
269+  2601
270+  2601 DD 4E 09     	ld c, (ix+9)
271+  2604 DD 7E 0B     	ld a, (ix+$0B)
272+  2607 E6 08        	and 8
273+  2609 28 02        	jr z, skip46
274+  260B
275+  260B 0E 00        	ld c,0
276+  260D
277+  260D              skip46:
278+  260D
279+  260D DD 71 0F     	ld (ix+$0f),c
280+  2610 78           	ld a,b
281+  2611 07           	rlca
282+  2612 07           	rlca
283+  2613 07           	rlca
284+  2614 E6 07        	and $7
285+  2616 21 BA 16     	ld hl, lookup_3bb0
286+  2619 D7           	rst $10
287+  261A
288+  261A DD 77 0C     	ld (ix+$0C), a
289+  261D 78           	ld a,b
290+  261E E6 1F        	and $1F
291+  2620 28 09        	jr z, compute_wave_freq
292+  2622
293+  2622 E6 0F        	and $0F
294+  2624 21 C2 16     	ld hl, lookup_3bb8
295+  2627 D7           	rst $10
296+  2628
297+  2628 DD 77 0E     	ld (ix+$0e), a
298+  262B
299+  262B              compute_wave_freq:
300+  262B
301+  262B DD 6E 0E     	ld l, (ix+$0e)
302+  262E 26 00        	ld h, 0
303+  2630
304+  2630 DD 7E 0D     	ld a, (ix+$0d)
305+  2633 E6 10        	and $10
306+  2635 28 02        	jr z, skip47
307+  2637
308+  2637 3E 01        	ld a, 1
309+  2639
310+  2639
311+  2639              skip47:
312+  2639
313+  2639 DD 86 04     	add a, (ix+4)
314+  263C CA 8C 05     	jp z, skip3
315+  263F C3 88 05     	jp jump_from_wave
316+  2642
# file closed: scripts/system/sound/sound_wave.asm
 44   2642                  include "scripts/system/screens/complete_transition.asm"
# file opened: scripts/system/screens/complete_transition.asm
  1+  2642
  2+  2642
  3+  2642
  4+  2642
  5+  2642
  6+  2642              t1:
  7+  2642
  8+  2642 3A 10 01         defm $3a, blue, horizontal
  9+  2645
 10+  2645 05 06 02         defm  5, 6, 2
 11+  2648 05 05 02         defm  5, 5, 2
 12+  264B 05 11 0A         defm  5, 17, 10
 13+  264E 05 12 0A         defm  5, 18, 10
 14+  2651 19 11 02         defm  25, 17, 2
 15+  2654 19 12 02         defm  25, 18, 2
 16+  2657
 17+  2657 FF               defm -1
 18+  2658
 19+  2658 3A 01 01         defm $3A, red, horizontal
 20+  265B
 21+  265B 11 06 0A         defm  17, 6, 10
 22+  265E 11 05 0A         defm  17, 5, 10
 23+  2661
 24+  2661 FF               defm -1
 25+  2662 FD               defm -3
 26+  2663
 27+  2663
 28+  2663              t2:
 29+  2663
 30+  2663 3A 01 01         defm $3a, red, horizontal
 31+  2666
 32+  2666 04 07 04         defm  4, 7, 4
 33+  2669 04 04 04         defm  4, 4, 4
 34+  266C
 35+  266C 04 10 0C         defm  4, 16, 12
 36+  266F 04 13 0C         defm  4, 19, 12
 37+  2672
 38+  2672 18 10 04         defm  24, 16, 4
 39+  2675 18 13 04         defm  24, 19, 4
 40+  2678
 41+  2678 FF               defm -1
 42+  2679
 43+  2679 3A 01 00         defm $3a, red, vertical
 44+  267C
 45+  267C 04 05 02         defm 4, 5, 2
 46+  267F 07 05 02         defm 7, 5, 2
 47+  2682
 48+  2682 04 11 02         defm 4, 17, 2
 49+  2685 0F 11 02         defm 15, 17, 2
 50+  2688
 51+  2688 18 11 02         defm 24, 17, 2
 52+  268B 1B 11 02         defm 27, 17, 2
 53+  268E
 54+  268E FF               defm -1
 55+  268F
 56+  268F 3A 07 01         defm $3A, palette_white_blue_orange, horizontal
 57+  2692
 58+  2692 10 04 0C         defm  16, 4, 12
 59+  2695 10 07 0C         defm  16, 7, 12
 60+  2698
 61+  2698 FF               defm -1
 62+  2699
 63+  2699 3A 07 00         defm $3A, palette_white_blue_orange, vertical
 64+  269C
 65+  269C 10 05 02         defm  16, 5, 2
 66+  269F 1B 05 02         defm  27, 5, 2
 67+  26A2
 68+  26A2 FF               defm -1
 69+  26A3 FD               defm -3
 70+  26A4
 71+  26A4
 72+  26A4
 73+  26A4
 74+  26A4
 75+  26A4              t3:
 76+  26A4
 77+  26A4 3A 07 01         defm $3a, palette_white_blue_orange, horizontal
 78+  26A7
 79+  26A7 03 08 06         defm  3, 8, 6
 80+  26AA 03 03 06         defm  3, 3, 6
 81+  26AD
 82+  26AD
 83+  26AD 17 0F 06         defm  23, 15, 6
 84+  26B0 17 14 06         defm  23, 20, 6
 85+  26B3
 86+  26B3 03 0F 0E         defm  3, 15, 14
 87+  26B6 03 14 0E         defm  3, 20, 14
 88+  26B9
 89+  26B9
 90+  26B9 FF               defm -1
 91+  26BA
 92+  26BA 3A 07 00         defm $3a, palette_white_blue_orange, vertical
 93+  26BD
 94+  26BD 03 04 04         defm 3, 4, 4
 95+  26C0 08 04 04         defm 8, 4, 4
 96+  26C3
 97+  26C3 17 10 04         defm 23, 16, 4
 98+  26C6 1C 10 04         defm 28, 16, 4
 99+  26C9
100+  26C9 03 10 04         defm 3, 16, 4
101+  26CC 10 10 04         defm 16, 16, 4
102+  26CF
103+  26CF FF               defm -1
104+  26D0
105+  26D0 3B 15 01         defm $3b, palette_orange_green_orange, horizontal
106+  26D3
107+  26D3 0F 03 0E         defm  15, 3, 14
108+  26D6 0F 08 0E         defm  15, 8, 14
109+  26D9
110+  26D9 FF               defm -1
111+  26DA
112+  26DA 3B 15 00         defm $3B, palette_orange_green_orange, vertical
113+  26DD
114+  26DD 0F 04 04         defm  15, 4, 4
115+  26E0 1C 04 04         defm  28, 4, 4
116+  26E3
117+  26E3 FF               defm -1
118+  26E4 FD               defm -3
119+  26E5
120+  26E5
121+  26E5
122+  26E5
123+  26E5              t4:
124+  26E5
125+  26E5 3B 15 01         defm $3b, palette_orange_green_orange, horizontal
126+  26E8
127+  26E8 02 09 08         defm  2, 9, 8
128+  26EB 02 02 08         defm  2, 2, 8
129+  26EE
130+  26EE
131+  26EE 16 0E 08         defm  22, 14, 8
132+  26F1 16 15 08         defm  22, 21, 8
133+  26F4
134+  26F4 02 0E 10         defm  2, 14, 16
135+  26F7 02 15 10         defm  2, 21, 16
136+  26FA
137+  26FA
138+  26FA FF               defm -1
139+  26FB
140+  26FB 3B 15 00         defm $3b, palette_orange_green_orange, vertical
141+  26FE
142+  26FE 02 03 06         defm 2, 3, 6
143+  2701 09 03 06         defm 9, 3, 6
144+  2704
145+  2704 16 0F 06         defm 22, 15, 6
146+  2707 1D 0F 06         defm 29, 15, 6
147+  270A
148+  270A 02 0F 06         defm 2, 15, 6
149+  270D 11 0F 06         defm 17, 15, 6
150+  2710
151+  2710 FF               defm -1
152+  2711
153+  2711 3A 05 01         defm $3a, cyan, horizontal
154+  2714
155+  2714 0E 02 10         defm  14, 2, 16
156+  2717 0E 09 10         defm  14, 9, 16
157+  271A
158+  271A FF               defm -1
159+  271B
160+  271B 3A 05 00         defm $3a, cyan, vertical
161+  271E
162+  271E 0E 03 06         defm  14, 3, 6
163+  2721 1D 03 06         defm  29, 3, 6
164+  2724
165+  2724 FF               defm -1
166+  2725 FD               defm -3
167+  2726
168+  2726
169+  2726
170+  2726              t5:
171+  2726
172+  2726 3A 05 01         defm $3a, cyan, horizontal
173+  2729
174+  2729 01 0A 0A         defm  1, 10, 10
175+  272C 01 01 0A         defm  1, 1, 10
176+  272F
177+  272F
178+  272F 15 0D 0A         defm  21, 13, 10
179+  2732 15 16 0A         defm  21, 22, 10
180+  2735
181+  2735 01 0D 12         defm  1, 13, 18
182+  2738 01 16 12         defm  1, 22, 18
183+  273B
184+  273B
185+  273B FF               defm -1
186+  273C
187+  273C 3A 05 00         defm $3a, cyan, vertical
188+  273F
189+  273F 01 02 08         defm 1, 2, 8
190+  2742 0A 02 08         defm 10, 2, 8
191+  2745
192+  2745 15 0E 08         defm 21, 14, 8
193+  2748 1E 0E 08         defm 30, 14, 8
194+  274B
195+  274B 01 0E 08         defm 1, 14, 8
196+  274E 12 0E 08         defm 18, 14, 8
197+  2751
198+  2751 FF               defm -1
199+  2752
200+  2752 3A 09 01         defm $3a, yellow, horizontal
201+  2755
202+  2755 0D 01 12         defm  13, 1, 18
203+  2758 0D 0A 12         defm  13, 10, 18
204+  275B
205+  275B FF               defm -1
206+  275C
207+  275C 3A 09 00         defm $3a, yellow, vertical
208+  275F
209+  275F 0D 02 08         defm  13, 2, 8
210+  2762 1E 02 08         defm  30, 2, 8
211+  2765
212+  2765 FF               defm -1
213+  2766 FD               defm -3
214+  2767
215+  2767
216+  2767              t6:
217+  2767
218+  2767 3A 09 01         defm $3a, yellow, horizontal
219+  276A
220+  276A 00 0B 0C         defm  0, 11, 12
221+  276D 00 00 0C         defm  0, 0, 12
222+  2770
223+  2770
224+  2770 14 0C 0C         defm  20, 12, 12
225+  2773 14 17 0C         defm  20, 23, 12
226+  2776
227+  2776 00 0C 14         defm  0, 12, 20
228+  2779 00 17 14         defm  0, 23, 20
229+  277C
230+  277C
231+  277C FF               defm -1
232+  277D
233+  277D 3A 09 00         defm $3a, yellow, vertical
234+  2780
235+  2780 00 01 0A         defm 0, 1, 10
236+  2783 0B 01 0A         defm 11, 1, 10
237+  2786
238+  2786 14 0D 0A         defm 20, 13, 10
239+  2789 1F 0D 0A         defm 31, 13, 10
240+  278C
241+  278C 00 0D 0A         defm 0, 13, 10
242+  278F 13 0D 0A         defm 19, 13, 10
243+  2792
244+  2792 FF               defm -1
245+  2793
246+  2793 3A 16 01         defm $3a, palette_yellow_blue_white, horizontal
247+  2796
248+  2796 0C 00 14         defm  12, 0, 20
249+  2799 0C 0B 14         defm  12, 11, 20
250+  279C
251+  279C FF               defm -1
252+  279D
253+  279D 3A 16 00         defm $3a,palette_yellow_blue_white, vertical
254+  27A0
255+  27A0 0C 01 0A         defm  12, 1, 10
256+  27A3 1F 01 0A         defm  31, 1, 10
257+  27A6
258+  27A6 FF               defm -1
259+  27A7 FD               defm -3
260+  27A8
261+  27A8 42 26 63 26  transition_data:	defw t1, t2, t3, t4, t5, t6, t1, t2, t3, t4, t5, t6
261+  27AC A4 26 E5 26
261+  27B0 26 27 67 27
261+  27B4 42 26 63 26
261+  27B8 A4 26 E5 26
261+  27BC 26 27 67 27
262+  27C0
263+  27C0
264+  27C0              draw_rectangles:
265+  27C0
266+  27C0              	// a = set id
267+  27C0
268+  27C0
269+  27C0
270+  27C0 CB 27        	sla  a
271+  27C2 6F           	ld l, a
272+  27C3 26 00        	ld h, 0
273+  27C5 11 A8 27     	ld de, transition_data
274+  27C8 19           	add hl, de
275+  27C9
276+  27C9 7E           	ld a, (hl)
277+  27CA 23           	inc hl
278+  27CB 66           	ld h, (hl)
279+  27CC 6F           	ld l, a
280+  27CD
281+  27CD CD AF 07     	call draw_transition
282+  27D0
283+  27D0
284+  27D0
285+  27D0
286+  27D0
287+  27D0 C9           	ret
# file closed: scripts/system/screens/complete_transition.asm
 45   27D1                  include "scripts/system/screens/level_number.asm"
# file opened: scripts/system/screens/level_number.asm
  1+  27D1                                                                                                             ;fall through to game over setup
  2+  27D1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  27D1              ; performs logic for game over mode
  4+  27D1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  27D1              ;constants
  6+  27D1
  7+  27D1              start_x = 48
  8+  27D1              level_y = 130
  9+  27D1                                                                      ;address of bottom blank
 10+  27D1              start_level_number:
 11+  27D1
 12+  27D1 3E 20            ld a,number_mode                                                                ;set mode to game over
 13+  27D3 32 09 4D         ld (mode),a
 14+  27D6
 15+  27D6
 16+  27D6
 17+  27D6 CD AD 20         call clear_tile_ram
 18+  27D9
 19+  27D9
 20+  27D9 3A 92 4C         ld a, (level_hex)
 21+  27DC C6 01            add 1
 22+  27DE 27               daa
 23+  27DF 32 92 4C         ld (level_hex), a
 24+  27E2
 25+  27E2 3A 8E 4C         ld a, (level_right)
 26+  27E5 3C               inc a
 27+  27E6 32 8E 4C         ld (level_right), a
 28+  27E9 FE 0A            cp 10
 29+  27EB C2 04 28         jp nz, noTens
 30+  27EE
 31+  27EE 3E 00            ld a, 0
 32+  27F0 32 8E 4C         ld (level_right), a
 33+  27F3
 34+  27F3 3A 8D 4C         ld a, (level_left)
 35+  27F6 3C               inc a
 36+  27F7 32 8D 4C         ld (level_left), a
 37+  27FA FE 0A            cp 10
 38+  27FC C2 04 28         jp nz, noTens
 39+  27FF
 40+  27FF 3E 00            ld a, 0
 41+  2801 32 8D 4C         ld (level_left), a
 42+  2804
 43+  2804              noTens:
 44+  2804
 45+  2804 3A 86 4C         ld a, (is_attract_mode)
 46+  2807 FE 00            cp 0
 47+  2809 CA 0F 28         jp z, notAttractSkip
 48+  280C
 49+  280C C3 D2 02         jp next_level
 50+  280F
 51+  280F              notAttractSkip:
 52+  280F
 53+  280F
 54+  280F 3E 48            ld a, 18 * 4
 55+  2811 32 BF 4C         ld (sprite3 + spr_num), a
 56+  2814
 57+  2814 3E 4C            ld a, 19 * 4
 58+  2816 32 C1 4C         ld (sprite4 + spr_num), a
 59+  2819
 60+  2819 3E 50            ld a, 20 * 4
 61+  281B 32 C3 4C         ld (sprite5 + spr_num), a
 62+  281E
 63+  281E 3E 88            ld a, 34 * 4
 64+  2820 32 B9 4C         ld (sprite0 + spr_num), a
 65+  2823 32 BB 4C         ld (sprite1+ spr_num), a
 66+  2826
 67+  2826 3E 10            ld a, 16
 68+  2828 32 CA 4C         ld (sprite0 + spr_y), a
 69+  282B
 70+  282B C6 10            add 16
 71+  282D 32 CC 4C         ld (sprite1 + spr_y), a
 72+  2830
 73+  2830 3E 00            ld a, 0
 74+  2832 32 D7 4C         ld (sprite7 + spr_x), a
 75+  2835
 76+  2835
 77+  2835 3E 64            ld a, 100
 78+  2837 32 88 4C         ld (harry_land_timer) , a
 79+  283A
 80+  283A 3E 0E            ld a, palette_white_black_pink
 81+  283C                  ;ld a, 1
 82+  283C 32 BA 4C         ld (sprite0 + spr_pal),a
 83+  283F 32 BC 4C         ld (sprite1 + spr_pal),a
 84+  2842
 85+  2842
 86+  2842 3E 30            ld a, start_x
 87+  2844 32 D0 4C         ld (sprite3 + spr_y), a
 88+  2847
 89+  2847 D6 10            sub 16
 90+  2849 32 D2 4C         ld (sprite4 + spr_y), a
 91+  284C
 92+  284C D6 10            sub 16
 93+  284E 32 D4 4C         ld (sprite5 + spr_y), a
 94+  2851
 95+  2851 D6 10            sub 16
 96+  2853 32 D6 4C         ld (sprite6 + spr_y), a
 97+  2856
 98+  2856 D6 08            sub 8
 99+  2858 32 D8 4C         ld (sprite7 + spr_y), a
100+  285B
101+  285B 3E 82            ld a, level_y
102+  285D 32 CF 4C         ld (sprite3 + spr_x), a
103+  2860 32 D1 4C         ld (sprite4 + spr_x), a
104+  2863 32 D3 4C         ld (sprite5 + spr_x), a
105+  2866 C6 01            add 1
106+  2868 32 D5 4C         ld (sprite6 + spr_x), a
107+  286B
108+  286B D6 02            sub 2
109+  286D 32 C9 4C         ld (sprite0 + spr_x), a
110+  2870 32 CB 4C         ld (sprite1 + spr_x), a
111+  2873
112+  2873 3E 12            ld a, palette_green_white_red
113+  2875                 ; ld (sprite3 + spr_pal), a
114+  2875                 ; ld (sprite4 + spr_pal), a
115+  2875                 ; ld (sprite5 + spr_pal), a
116+  2875                 ; ld (sprite6 + spr_pal), a
117+  2875                 ; ld (sprite7 + spr_pal), a
118+  2875
119+  2875 3A 8D 4C         ld a, (level_left)
120+  2878 FE 00            cp 0
121+  287A C2 80 28         jp nz, useTens
122+  287D
123+  287D 3A 8E 4C         ld a, (level_right)
124+  2880
125+  2880              useTens:
126+  2880
127+  2880 C6 18            add 24
128+  2882 CB 27            sla a
129+  2884 CB 27            sla a
130+  2886 32 C5 4C         ld (sprite6 + spr_num), a
131+  2889
132+  2889 3A 8D 4C         ld a, (level_left)
133+  288C FE 00            cp 0
134+  288E CA AC 28         jp z, skipTens
135+  2891
136+  2891 3A 8E 4C         ld a, (level_right)
137+  2894 C6 18            add 24
138+  2896 CB 27            sla a
139+  2898 CB 27            sla a
140+  289A 32 C7 4C         ld (sprite7 + spr_num), a
141+  289D
142+  289D 3A 8D 4C         ld a, (level_left)
143+  28A0 FE 00            cp 0
144+  28A2 CA AC 28         jp z, skipTens
145+  28A5
146+  28A5 3E 82            ld a, level_y
147+  28A7 C6 01            add 1
148+  28A9 32 D7 4C         ld (sprite7 + spr_x), a
149+  28AC
150+  28AC
151+  28AC              skipTens:
152+  28AC
153+  28AC
154+  28AC
155+  28AC
156+  28AC C3 78 3F         jp wait                                                                                ;wait for next game loop
157+  28AF
158+  28AF
159+  28AF              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
160+  28AF              ; performs logic for game over mode
161+  28AF              ; just a countdown timer so no other functions needed
162+  28AF              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
163+  28AF              number_update:
164+  28AF
165+  28AF                ; jp next_level
166+  28AF
167+  28AF 3A 88 4C         ld a, (harry_land_timer)
168+  28B2 FE 00            cp 0
169+  28B4 CA BB 28         jp z, noMore
170+  28B7
171+  28B7 3D               dec a
172+  28B8 32 88 4C         ld (harry_land_timer), a
173+  28BB
174+  28BB              noMore:
175+  28BB
176+  28BB
177+  28BB DD 21 BF 4C      ld ix, sprite3
178+  28BF
179+  28BF 06 05            ld b, 5
180+  28C1
181+  28C1              scroll_loop:
182+  28C1
183+  28C1 DD 7E 11         ld a, (ix + spr_y)
184+  28C4 3C               inc a
185+  28C5 3C               inc a
186+  28C6 DD 77 11         ld (ix + spr_y), a
187+  28C9 FE 28            cp 40
188+  28CB DA D3 28         jp c, hide
189+  28CE
190+  28CE FE FA            cp 250
191+  28D0 DA E9 28         jp c, noHide
192+  28D3
193+  28D3
194+  28D3              hide:
195+  28D3 3E 00            ld a, 0
196+  28D5 DD 77 01         ld (ix +spr_pal),a
197+  28D8
198+  28D8 3A 88 4C         ld a, (harry_land_timer)
199+  28DB FE 00            cp 0
200+  28DD C2 FE 28         jp nz, nextSprite
201+  28E0
202+  28E0 78               ld a, b
203+  28E1 FE 01            cp 1
204+  28E3 CA D2 02         jp z, next_level
205+  28E6
206+  28E6 C3 FE 28         jp nextSprite
207+  28E9
208+  28E9              noHide:
209+  28E9
210+  28E9 3A 88 4C         ld a, (harry_land_timer)
211+  28EC FE 00            cp 0
212+  28EE C2 F9 28         jp nz, okToColour
213+  28F1
214+  28F1 DD 7E 11         ld a, (ix+spr_y)
215+  28F4 FE 3C            cp 60
216+  28F6 DA D3 28         jp c, hide
217+  28F9
218+  28F9              okToColour:
219+  28F9
220+  28F9 3E 12            ld a, palette_green_white_red
221+  28FB DD 77 01         ld (ix +spr_pal),a
222+  28FE
223+  28FE              nextSprite:
224+  28FE
225+  28FE DD 23            inc ix
226+  2900 DD 23            inc ix
227+  2902
228+  2902 10 BD            djnz scroll_loop
229+  2904
230+  2904
231+  2904
232+  2904              exit_number_update:
233+  2904
234+  2904
235+  2904
236+  2904
237+  2904 C3 78 3F         jp wait                                                                                ;finished setup goto wait section
238+  2907
239+  2907
240+  2907
241+  2907
242+  2907
# file closed: scripts/system/screens/level_number.asm
 46   2907                  include "scripts/gameplay/birds/hens.asm"
# file opened: scripts/gameplay/birds/hens.asm
  1+  2907              hens_update:
  2+  2907
  3+  2907 DD 21 BD 4C  	ld ix, sprite2
  4+  290B FD 21 0A 4C  	ld iy, hens
  5+  290F
  6+  290F              	;ret
  7+  290F
  8+  290F
  9+  290F 06 05        	ld b, 5
 10+  2911
 11+  2911
 12+  2911              hen_update_loop:
 13+  2911
 14+  2911 78           	ld a, b
 15+  2912 32 19 4D     	ld (temp_byte2), a
 16+  2915
 17+  2915 FD 7E 04     	ld a, (iy + hen_state)
 18+  2918 FE 00        	cp HEN_DEAD
 19+  291A CA 27 29     	jp z, nextHen
 20+  291D
 21+  291D FD 22 A8 4C  	ld (map_address), iy
 22+  2921
 23+  2921 CD 46 29     	call process_hen
 24+  2924 CD B4 29     	call check_hen_harry
 25+  2927
 26+  2927              nextHen:
 27+  2927
 28+  2927 DD 23        	inc ix
 29+  2929 DD 23        	inc ix
 30+  292B
 31+  292B FD 2A A8 4C  	ld iy, (map_address)
 32+  292F
 33+  292F FD 23        	inc iy
 34+  2931 FD 23        	inc iy
 35+  2933 FD 23        	inc iy
 36+  2935 FD 23        	inc iy
 37+  2937 FD 23        	inc iy
 38+  2939 FD 23        	inc iy
 39+  293B FD 23        	inc iy
 40+  293D FD 23        	inc iy
 41+  293F
 42+  293F
 43+  293F 3A 19 4D     	ld a, (temp_byte2)
 44+  2942 47           	ld b, a
 45+  2943
 46+  2943 10 CC        	djnz hen_update_loop
 47+  2945
 48+  2945
 49+  2945 C9           	ret
 50+  2946
 51+  2946
 52+  2946              process_hen:
 53+  2946
 54+  2946
 55+  2946 3A 19 4D     	ld a, (temp_byte2)
 56+  2949 FE 05        	cp 5
 57+  294B              	;jp nz, noDebug
 58+  294B
 59+  294B
 60+  294B              	;ld hl, (iy + hen_tile_address)
 61+  294B              	;ld de, tile_ram_start + row_0 + column_3
 62+  294B              	;ld a, (hl)
 63+  294B              	;ld (de), a
 64+  294B
 65+  294B              	;ld de, tile_ram_start + row_0 + column_4
 66+  294B              	;ld a, (iy + hen_direction)
 67+  294B              	;ld (de), a
 68+  294B
 69+  294B
 70+  294B FD 7E 05     	ld a, (iy + hen_timer)
 71+  294E FE 00        	cp 0
 72+  2950 CA 58 29     	jp z, henReady
 73+  2953
 74+  2953 3D           	dec a
 75+  2954 FD 77 05     	ld (iy + hen_timer), a
 76+  2957
 77+  2957 C9           	ret
 78+  2958
 79+  2958              henReady:
 80+  2958
 81+  2958
 82+  2958
 83+  2958
 84+  2958              	;jp nz, noDebug
 85+  2958
 86+  2958
 87+  2958 3A 19 4D     	ld a, (temp_byte2)
 88+  295B FE 05        	cp 5
 89+  295D              	;jp nz, noDebug
 90+  295D
 91+  295D CD 72 2A     	call hen_check_ladder
 92+  2960
 93+  2960 CD C1 2A     	call hen_check_ladder_state
 94+  2963 CD F8 2A     	call hen_check_blocked
 95+  2966              	;call hen_control_fake
 96+  2966
 97+  2966
 98+  2966
 99+  2966              	;call showHenDebug
100+  2966
101+  2966
102+  2966
103+  2966
104+  2966 FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
104+  296A 66 01
105+  296C CD D2 20     	call moveTileUpHL
106+  296F
107+  296F              	;ld a,4
108+  296F              ;	ld (hl), a
109+  296F
110+  296F
111+  296F              	;ret
112+  296F
113+  296F FD 7E 04     	ld a, (iy + hen_state)
114+  2972 FE 01        	cp HEN_WALKING
115+  2974 CA 48 2B     	jp z, hen_walking
116+  2977
117+  2977 FE 02        	cp HEN_CLIMBING
118+  2979 CA 3A 2C     	jp z, hen_climbing
119+  297C
120+  297C FE 03        	cp HEN_EATING
121+  297E CA AD 2D     	jp z, hen_eating
122+  2981
123+  2981
124+  2981              noDebug:
125+  2981
126+  2981 C9           	ret
127+  2982
128+  2982
129+  2982              showHenDebug:
130+  2982
131+  2982 21 60 41     	ld hl, tile_ram_start + row_0 + column_18
132+  2985
133+  2985
134+  2985 3A 4A 4C     	ld a, (hen_can_go_up_ladder)
135+  2988 77           	ld (hl), a
136+  2989
137+  2989
138+  2989 23           	inc hl
139+  298A 3A 49 4C     	ld a, (hen_over_ladder)
140+  298D 77           	ld (hl), a
141+  298E
142+  298E 23           	inc hl
143+  298F 3A 4B 4C     	ld a, (hen_can_go_down_ladder)
144+  2992 77           	ld (hl), a
145+  2993
146+  2993 23           	inc hl
147+  2994 3A 4C 4C     	ld a, (hen_blocked)
148+  2997 77           	ld (hl), a
149+  2998
150+  2998
151+  2998 CD C9 20     	call moveTileDownHL
152+  299B
153+  299B 2B           	dec hl
154+  299C 2B           	dec hl
155+  299D 2B           	dec hl
156+  299E 2B           	dec hl
157+  299F
158+  299F 23           	inc hl
159+  29A0 3A 4E 4C     	ld a, (hen_can_get_off_left)
160+  29A3 77           	ld (hl), a
161+  29A4
162+  29A4 23           	inc hl
163+  29A5 3A 4F 4C     	ld a, (hen_can_get_off_right)
164+  29A8 77           	ld (hl), a
165+  29A9
166+  29A9
167+  29A9 23           	inc hl
168+  29AA FD 7E 02     	ld a, (iy + hen_centred_x)
169+  29AD 77           	ld (hl), a
170+  29AE
171+  29AE 23           	inc hl
172+  29AF FD 7E 07     	ld a, (iy + hen_centred_y)
173+  29B2 77           	ld (hl), a
174+  29B3
175+  29B3
176+  29B3
177+  29B3 C9           	ret
178+  29B4
179+  29B4              check_hen_harry:
180+  29B4
181+  29B4              	//ld a, (alex_invincible_timer)
182+  29B4              	//cp 0
183+  29B4              	//ret nz
184+  29B4
185+  29B4 3A C9 4C     	ld a, (sprite0 + spr_x)
186+  29B7 4F           	ld c, a
187+  29B8
188+  29B8 DD 7E 10     	ld a, (ix + spr_x)
189+  29BB FE 00        	cp 0
190+  29BD C8           	ret z
191+  29BE
192+  29BE 91           	sub c
193+  29BF C6 09        	add 9
194+  29C1 FE 12        	cp 18
195+  29C3 D0           	ret nc
196+  29C4
197+  29C4 3A CA 4C     	ld a, (sprite0 + spr_y)
198+  29C7 FE 02        	cp 2
199+  29C9              	;ret c
200+  29C9 4F           	ld c, a
201+  29CA
202+  29CA DD 7E 11     	ld a, (ix + spr_y)
203+  29CD 91           	sub c
204+  29CE C6 06        	add 6
205+  29D0 FE 0C        	cp 12
206+  29D2 D0           	ret nc
207+  29D3
208+  29D3
209+  29D3 C3 7C 07     	jp lose_set
210+  29D6
211+  29D6
212+  29D6
213+  29D6
214+  29D6
215+  29D6
216+  29D6
217+  29D6
218+  29D6
219+  29D6
220+  29D6
221+  29D6
222+  29D6
223+  29D6              initialise_hens:
224+  29D6
225+  29D6
226+  29D6 22 3E 4C     	ld (hen_data_address), hl
227+  29D9
228+  29D9
229+  29D9              	// ix = sprite data
230+  29D9              	// iy = enemy ram
231+  29D9 DD 21 BD 4C  	ld ix, sprite2
232+  29DD FD 21 0A 4C  	ld iy, hens
233+  29E1
234+  29E1              	;ld a, (number_hens)
235+  29E1              	;ld de, tile_ram_start +row_0 + column_16
236+  29E1              	;ld (de), a
237+  29E1
238+  29E1
239+  29E1              hen_init_loop:
240+  29E1
241+  29E1 23           	inc hl
242+  29E2
243+  29E2 7E           	ld a, (hl)
244+  29E3 FE FD        	cp -3
245+  29E5 CA C2 0B     	jp z, lifts_init
246+  29E8
247+  29E8 23           	inc hl
248+  29E9
249+  29E9 47           	ld b, a
250+  29EA
251+  29EA 3A 95 4C     	ld a, (number_hens)
252+  29ED FE 00        	cp 0
253+  29EF C2 FA 29     	jp nz, stillHens
254+  29F2
255+  29F2 3E 00        	ld a, HEN_DEAD
256+  29F4 FD 77 04     	ld (iy + hen_state), a
257+  29F7
258+  29F7 C3 4E 2A     	jp skipThisHen
259+  29FA
260+  29FA
261+  29FA              stillHens:
262+  29FA 78           	ld a, b
263+  29FB DD 77 10     	ld (ix+spr_x), a
264+  29FE
265+  29FE 7E           	ld a, (hl)
266+  29FF DD 77 11     	ld (ix+spr_y), a
267+  2A02
268+  2A02 22 B0 4C     	ld (temp_address), hl
269+  2A05
270+  2A05 CD 64 21     	call convert_hen_sprite_to_tile
271+  2A08
272+  2A08 CD 13 35     	call calculate_offsets
273+  2A0B
274+  2A0B 3E 01        	ld a, HEN_WALKING
275+  2A0D FD 77 04     	ld (iy + hen_state), a
276+  2A10
277+  2A10 FD 75 00     	ld (iy + hen_tile_address), l
278+  2A13 FD 74 01     	ld (iy + hen_tile_address + 1), h
279+  2A16
280+  2A16 3A 95 4C     	ld a, (number_hens)
281+  2A19 FD 77 05     	ld (iy + hen_timer), a
282+  2A1C
283+  2A1C 3E 01        	ld a, 1
284+  2A1E FD 77 06     	ld (iy + hen_frame), a
285+  2A21 FD 77 07     	ld (iy + hen_centred_y), a
286+  2A24
287+  2A24 3E 00        	ld a, 0
288+  2A26 FD 77 02     	ld (iy + hen_centred_x), a
289+  2A29
290+  2A29 DD CB 00 86  	res flipy, (ix)
291+  2A2D
292+  2A2D 3A 20 4D     	ld a, (x_pos_offset)
293+  2A30 FE 05        	cp 5
294+  2A32 C2 3A 2A     	jp nz, notCentered
295+  2A35
296+  2A35 3E 01        	ld a, 1
297+  2A37 FD 77 02     	ld (iy + hen_centred_x), a
298+  2A3A
299+  2A3A
300+  2A3A              notCentered:
301+  2A3A
302+  2A3A CD BB 21     	call random
303+  2A3D
304+  2A3D E6 01        	and %00000001
305+  2A3F FD 77 03     	ld (iy + hen_direction), a
306+  2A42 FE 00        	cp 0
307+  2A44 C2 4B 2A     	jp nz, notLeftHen
308+  2A47
309+  2A47 DD CB 00 C6  	set flipy, (ix)
310+  2A4B
311+  2A4B              notLeftHen:
312+  2A4B
313+  2A4B 2A B0 4C     	ld hl, (temp_address)
314+  2A4E
315+  2A4E              skipThisHen:
316+  2A4E
317+  2A4E DD 23        	inc ix
318+  2A50 DD 23        	inc ix
319+  2A52
320+  2A52 FD 23        	inc iy
321+  2A54 FD 23        	inc iy
322+  2A56 FD 23        	inc iy
323+  2A58 FD 23        	inc iy
324+  2A5A FD 23        	inc iy
325+  2A5C FD 23        	inc iy
326+  2A5E FD 23        	inc iy
327+  2A60 FD 23        	inc iy
328+  2A62
329+  2A62 3A 95 4C     	ld a, (number_hens)
330+  2A65 FE 00        	cp 0
331+  2A67 CA 6E 2A     	jp z, noReduceHens
332+  2A6A 3D           	dec a
333+  2A6B 32 95 4C     	ld (number_hens), a
334+  2A6E
335+  2A6E              noReduceHens:
336+  2A6E
337+  2A6E C3 E1 29     	jp hen_init_loop
338+  2A71
339+  2A71
340+  2A71 C9           	ret
# file closed: scripts/gameplay/birds/hens.asm
 47   2A72                  include "scripts/gameplay/birds/hen_collision.asm"
# file opened: scripts/gameplay/birds/hen_collision.asm
  1+  2A72
  2+  2A72
  3+  2A72              hen_check_ladder:
  4+  2A72
  5+  2A72 3E 00        	ld a, 0
  6+  2A74 32 49 4C     	ld (hen_over_ladder), a
  7+  2A77 32 4A 4C     	ld (hen_can_go_up_ladder), a
  8+  2A7A 32 4B 4C     	ld (hen_can_go_down_ladder), a
  9+  2A7D
 10+  2A7D FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
 10+  2A81 66 01
 11+  2A83
 12+  2A83
 13+  2A83 FD 7E 02     	ld a, (iy + hen_centred_x)
 14+  2A86 FE 01        	cp 1
 15+  2A88 C8           	ret z
 16+  2A89
 17+  2A89
 18+  2A89 7E           	ld a, (hl)
 19+  2A8A FE F1        	cp tile_ladder_left
 20+  2A8C C0           	ret nz
 21+  2A8D
 22+  2A8D FD 7E 07     	ld a, (iy + hen_centred_y)
 23+  2A90 FE 00        	cp 0
 24+  2A92 CA B8 2A     	jp z, hen_between_steps
 25+  2A95
 26+  2A95 3E 01        	ld a, 1
 27+  2A97 32 49 4C     	ld (hen_over_ladder), a
 28+  2A9A
 29+  2A9A CD C9 20     	call moveTileDownHL
 30+  2A9D
 31+  2A9D 7E           	ld a, (hl)
 32+  2A9E FE F1        	cp tile_ladder_left
 33+  2AA0 C2 A8 2A     	jp nz, noDownLadder
 34+  2AA3
 35+  2AA3 3E 01        	ld a, 1
 36+  2AA5 32 4B 4C     	ld (hen_can_go_down_ladder), a
 37+  2AA8
 38+  2AA8              noDownLadder:
 39+  2AA8
 40+  2AA8 CD E4 20     	call moveTwoTilesUpHL
 41+  2AAB CD D2 20     	call moveTileUpHL
 42+  2AAE
 43+  2AAE 7E           	ld a, (hl)
 44+  2AAF FE F1        	cp tile_ladder_left
 45+  2AB1 C0           	ret nz
 46+  2AB2
 47+  2AB2 3E 01        	ld a, 1
 48+  2AB4 32 4A 4C     	ld (hen_can_go_up_ladder), a
 49+  2AB7
 50+  2AB7
 51+  2AB7
 52+  2AB7 C9           	ret
 53+  2AB8
 54+  2AB8
 55+  2AB8              hen_between_steps:
 56+  2AB8
 57+  2AB8
 58+  2AB8
 59+  2AB8 3E 01        	ld a, 1
 60+  2ABA 32 4A 4C     	ld (hen_can_go_up_ladder), a
 61+  2ABD 32 4B 4C     	ld (hen_can_go_down_ladder), a
 62+  2AC0
 63+  2AC0 C9           	ret
 64+  2AC1
 65+  2AC1
 66+  2AC1
 67+  2AC1              hen_check_ladder_state:
 68+  2AC1
 69+  2AC1 3E 00        	ld a, 0
 70+  2AC3 32 4E 4C     	ld (hen_can_get_off_left), a
 71+  2AC6 32 4F 4C     	ld (hen_can_get_off_right), a
 72+  2AC9
 73+  2AC9 FD 7E 04     	ld a, (iy + hen_state)
 74+  2ACC FE 02        	cp HEN_CLIMBING
 75+  2ACE C0           	ret nz
 76+  2ACF
 77+  2ACF FD 7E 07     	ld a, (iy + hen_centred_y)
 78+  2AD2 FE 00        	cp 0
 79+  2AD4 C8           	ret z
 80+  2AD5
 81+  2AD5 FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
 81+  2AD9 66 01
 82+  2ADB 2B           	dec hl
 83+  2ADC CD C9 20     	call moveTileDownHL
 84+  2ADF
 85+  2ADF 7E           	ld a, (hl)
 86+  2AE0 FE F0        	cp tile_platform
 87+  2AE2 C2 EA 2A     	jp nz, notLeftHenOff
 88+  2AE5
 89+  2AE5
 90+  2AE5 3E 01        	ld a, 1
 91+  2AE7 32 4E 4C     	ld (hen_can_get_off_left), a
 92+  2AEA
 93+  2AEA              notLeftHenOff:
 94+  2AEA
 95+  2AEA 23           	inc hl
 96+  2AEB 23           	inc hl
 97+  2AEC 23           	inc hl
 98+  2AED
 99+  2AED 7E           	ld a, (hl)
100+  2AEE FE F0        	cp tile_platform
101+  2AF0 C0           	ret nz
102+  2AF1
103+  2AF1 3E 01        	ld a, 1
104+  2AF3 32 4F 4C     	ld (hen_can_get_off_right), a
105+  2AF6
106+  2AF6 C9           	ret
107+  2AF7
108+  2AF7
109+  2AF7
110+  2AF7
111+  2AF7
112+  2AF7
113+  2AF7 C9           	ret
114+  2AF8
115+  2AF8              hen_check_blocked:
116+  2AF8
117+  2AF8 3E 00        	ld a, 0
118+  2AFA 32 4C 4C     	ld (hen_blocked), a
119+  2AFD
120+  2AFD FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
120+  2B01 66 01
121+  2B03
122+  2B03 3A 49 4C     	ld a, (hen_over_ladder)
123+  2B06 FE 01        	cp 1
124+  2B08 C8           	ret z
125+  2B09
126+  2B09 FD 7E 02     	ld a, (iy + hen_centred_x)
127+  2B0C FE 00        	cp 0
128+  2B0E C8           	ret z
129+  2B0F
130+  2B0F
131+  2B0F FD 7E 03     	ld a, (iy + hen_direction)
132+  2B12 FE 00        	cp LEFT
133+  2B14 CA 2E 2B     	jp z, checkLeft
134+  2B17
135+  2B17
136+  2B17
137+  2B17              checkRight:
138+  2B17
139+  2B17
140+  2B17 23           		inc hl
141+  2B18 7E           		ld a, (hl)
142+  2B19 FE F0        		cp tile_platform
143+  2B1B CA 42 2B     		jp z, isBlockedHen
144+  2B1E
145+  2B1E CD C9 20     		call moveTileDownHL
146+  2B21 7E           		ld a, (hl)
147+  2B22 FE F0        		cp tile_platform
148+  2B24 C8           		ret z
149+  2B25
150+  2B25 FE F1        		cp tile_ladder_left
151+  2B27 C8           		ret z
152+  2B28
153+  2B28 FE F2        		cp tile_ladder_right
154+  2B2A C8           		ret z
155+  2B2B
156+  2B2B C3 42 2B     		jp isBlockedHen
157+  2B2E
158+  2B2E              checkLeft:
159+  2B2E
160+  2B2E
161+  2B2E 2B           		dec hl
162+  2B2F 7E           		ld a, (hl)
163+  2B30 FE F0        		cp tile_platform
164+  2B32 CA 42 2B     		jp z, isBlockedHen
165+  2B35
166+  2B35
167+  2B35
168+  2B35 CD C9 20     		call moveTileDownHL
169+  2B38 7E           		ld a, (hl)
170+  2B39 FE F0        		cp tile_platform
171+  2B3B C8           		ret z
172+  2B3C
173+  2B3C FE F1        		cp tile_ladder_left
174+  2B3E C8           		ret z
175+  2B3F
176+  2B3F FE F2        		cp tile_ladder_right
177+  2B41 C8           		ret z
178+  2B42
179+  2B42
180+  2B42              isBlockedHen:
181+  2B42
182+  2B42 3E 01        		ld a, 1
183+  2B44 32 4C 4C     		ld (hen_blocked), a
184+  2B47
185+  2B47
186+  2B47
187+  2B47
188+  2B47
189+  2B47
190+  2B47 C9           	ret
# file closed: scripts/gameplay/birds/hen_collision.asm
 48   2B48                  include "scripts/gameplay/birds/hen_walking.asm"
# file opened: scripts/gameplay/birds/hen_walking.asm
  1+  2B48
  2+  2B48              hen_walking:
  3+  2B48
  4+  2B48 CD E5 2D     	call hen_check_seed
  5+  2B4B
  6+  2B4B              hen_walking_no_seed:
  7+  2B4B
  8+  2B4B FD 7E 04     	ld a, (iy + hen_state)
  9+  2B4E FE 03        	cp HEN_EATING
 10+  2B50 C8           	ret z
 11+  2B51
 12+  2B51              	;ld hl, (iy + hen_tile_address)
 13+  2B51
 14+  2B51              	;call moveTileUpHL
 15+  2B51              	;ld a, 4
 16+  2B51              	;ld (hl), a
 17+  2B51
 18+  2B51 3A 4C 4C     	ld a, (hen_blocked)
 19+  2B54 FE 01        	cp 1
 20+  2B56 CC E4 2B     	call z, hen_turn_around
 21+  2B59
 22+  2B59 3A 49 4C     	ld a, (hen_over_ladder)
 23+  2B5C FE 01        	cp 1
 24+  2B5E CC 71 2D     	call z, hen_decide_ladder
 25+  2B61
 26+  2B61
 27+  2B61 FD 7E 04     	ld a, (iy + hen_state)
 28+  2B64 FE 01        	cp HEN_WALKING
 29+  2B66 C0           	ret nz
 30+  2B67
 31+  2B67              hen_walk_skip_check:
 32+  2B67
 33+  2B67 FD 7E 03     	ld a, (iy + hen_direction)
 34+  2B6A FE 00        	cp LEFT
 35+  2B6C CA 7C 2B     	jp z, moveHenLeft
 36+  2B6F
 37+  2B6F C3 B5 2B     	jp moveHenRight
 38+  2B72
 39+  2B72
 40+  2B72
 41+  2B72              fakeMoveLeft:
 42+  2B72
 43+  2B72 3E 00        	ld a, LEFT
 44+  2B74 FD 77 03     	ld (iy + hen_direction), a
 45+  2B77
 46+  2B77 3E 01        	ld a, HEN_WALKING
 47+  2B79 FD 77 04     	ld (iy + hen_state), a
 48+  2B7C
 49+  2B7C              moveHenLeft:
 50+  2B7C
 51+  2B7C
 52+  2B7C DD 7E 11     	ld a, (ix + spr_y)
 53+  2B7F C6 04        	add 4
 54+  2B81 DD 77 11     	ld (ix + spr_y), a
 55+  2B84
 56+  2B84 FD 7E 02     	ld a, (iy + hen_centred_x)
 57+  2B87 EE 01        	xor %00000001
 58+  2B89 FD 77 02     	ld (iy + hen_centred_x), a
 59+  2B8C
 60+  2B8C FD 7E 06     	ld a, (iy + hen_frame)
 61+  2B8F EE 01        	xor %00000001
 62+  2B91 FD 77 06     	ld (iy + hen_frame), a
 63+  2B94
 64+  2B94
 65+  2B94 CD ED 2B     	call setWalkFrame
 66+  2B97
 67+  2B97 FD 7E 02     	ld a, (iy + hen_centred_x)
 68+  2B9A FE 01        	cp 1
 69+  2B9C C8           	ret z
 70+  2B9D
 71+  2B9D FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
 71+  2BA1 66 01
 72+  2BA3 2B           	dec hl
 73+  2BA4 FD 75 00 FD  	ld (iy + hen_tile_address), hl
 73+  2BA8 74 01
 74+  2BAA
 75+  2BAA
 76+  2BAA C9           	ret
 77+  2BAB
 78+  2BAB              fakeMoveRight:
 79+  2BAB
 80+  2BAB 3E 01        	ld a, RIGHT
 81+  2BAD FD 77 03     	ld (iy + hen_direction), a
 82+  2BB0
 83+  2BB0 3E 01        	ld a, HEN_WALKING
 84+  2BB2 FD 77 04     	ld (iy + hen_state), a
 85+  2BB5
 86+  2BB5              moveHenRight:
 87+  2BB5
 88+  2BB5
 89+  2BB5 DD 7E 11     	ld a, (ix + spr_y)
 90+  2BB8 D6 04        	sub 4
 91+  2BBA DD 77 11     	ld (ix + spr_y), a
 92+  2BBD
 93+  2BBD FD 7E 02     	ld a, (iy + hen_centred_x)
 94+  2BC0 EE 01        	xor %00000001
 95+  2BC2 FD 77 02     	ld (iy + hen_centred_x), a
 96+  2BC5
 97+  2BC5 FD 7E 06     	ld a, (iy + hen_frame)
 98+  2BC8 EE 01        	xor %00000001
 99+  2BCA FD 77 06     	ld (iy + hen_frame), a
100+  2BCD
101+  2BCD
102+  2BCD CD ED 2B     	call setWalkFrame
103+  2BD0
104+  2BD0
105+  2BD0 FD 7E 02     	ld a, (iy + hen_centred_x)
106+  2BD3 FE 00        	cp 0
107+  2BD5 C8           	ret z
108+  2BD6
109+  2BD6 FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
109+  2BDA 66 01
110+  2BDC 23           	inc hl
111+  2BDD FD 75 00 FD  	ld (iy + hen_tile_address), hl
111+  2BE1 74 01
112+  2BE3
113+  2BE3
114+  2BE3 C9           	ret
115+  2BE4
116+  2BE4
117+  2BE4
118+  2BE4              hen_turn_around:
119+  2BE4
120+  2BE4              	;push hl
121+  2BE4              	;ld hl, tile_ram_start + row_0 + column_6
122+  2BE4              	;;inc (hl)
123+  2BE4
124+  2BE4              	;pop hl
125+  2BE4              ;
126+  2BE4
127+  2BE4 FD 7E 03     	ld a, (iy + hen_direction)
128+  2BE7 EE 01        	xor %00000001
129+  2BE9 FD 77 03     	ld (iy + hen_direction), a
130+  2BEC
131+  2BEC
132+  2BEC C9           	ret
133+  2BED
134+  2BED
135+  2BED              setWalkFrame:
136+  2BED
137+  2BED 3E 20        	ld a, hen_walk_sprite - 4
138+  2BEF 47           	ld b, a
139+  2BF0
140+  2BF0 FD 7E 06     	ld a, (iy + hen_frame)
141+  2BF3 CB 27        	sla a
142+  2BF5 CB 27            sla a
143+  2BF7 80               add b
144+  2BF8 DD 77 00         ld (ix + spr_num), a
145+  2BFB
146+  2BFB
147+  2BFB 3A 4D 4C     	ld a, (hen_speed)
148+  2BFE FD 77 05     	ld (iy + hen_timer), a
149+  2C01
150+  2C01
151+  2C01
152+  2C01 FD 7E 03     	ld a, (iy + hen_direction)
153+  2C04
154+  2C04 FE 00        	cp LEFT
155+  2C06 CA 0E 2C     	jp z, fliphen
156+  2C09
157+  2C09
158+  2C09 DD CB 00 86  	res flipy, (ix)
159+  2C0D C9           	ret
160+  2C0E
161+  2C0E              fliphen:
162+  2C0E
163+  2C0E DD CB 00 C6  	set flipy, (ix)
164+  2C12
165+  2C12 C9           	ret
166+  2C13
167+  2C13
168+  2C13
169+  2C13
170+  2C13
171+  2C13
172+  2C13              hen_control_fake:
173+  2C13
174+  2C13 3A 19 4D     	ld a, (temp_byte2)
175+  2C16 FE 05        	cp 5
176+  2C18 C0           	ret nz
177+  2C19
178+  2C19 3A 32 4C     	ld a, (joystick_state)
179+  2C1C E6 22        	and inp_chk_left
180+  2C1E C2 72 2B     	jp nz, fakeMoveLeft
181+  2C21
182+  2C21
183+  2C21 3A 32 4C     	ld a, (joystick_state)
184+  2C24 E6 44        	and inp_chk_right
185+  2C26 C2 AB 2B     	jp nz, fakeMoveRight
186+  2C29
187+  2C29 3A 32 4C     	ld a, (joystick_state)
188+  2C2C E6 11        	and inp_chk_up
189+  2C2E C2 AD 2C     	jp nz, fakeMoveUp
190+  2C31
191+  2C31
192+  2C31 3A 32 4C     	ld a, (joystick_state)
193+  2C34 E6 88        	and inp_chk_down
194+  2C36 C2 FD 2C     	jp nz, fakeMoveDown
195+  2C39
196+  2C39
197+  2C39 C9           	ret
198+  2C3A
# file closed: scripts/gameplay/birds/hen_walking.asm
 49   2C3A                  include "scripts/gameplay/birds/hen_ladder.asm"
# file opened: scripts/gameplay/birds/hen_ladder.asm
  1+  2C3A
  2+  2C3A
  3+  2C3A
  4+  2C3A              CHANCE_OF_STAYING_ON_LADDER = 120
  5+  2C3A              CHANCE_WHEN_END_OF_LADDER = 180
  6+  2C3A
  7+  2C3A
  8+  2C3A              hen_climbing:
  9+  2C3A
 10+  2C3A 3E 78        	ld a, CHANCE_OF_STAYING_ON_LADDER
 11+  2C3C 32 99 4C     	ld (ladder_off_chance), a
 12+  2C3F CB 2F        	sra a
 13+  2C41 32 9A 4C     	ld (ladder_half_chance), a
 14+  2C44
 15+  2C44
 16+  2C44
 17+  2C44 3A 4B 4C     	ld a, (hen_can_go_down_ladder)
 18+  2C47 47           	ld b, a
 19+  2C48 3A 4A 4C     	ld a, (hen_can_go_up_ladder)
 20+  2C4B 80           	add b
 21+  2C4C FE 02        	cp 2
 22+  2C4E CA 5B 2C     	jp z, probStayOn
 23+  2C51
 24+  2C51 3E B4        	ld a, CHANCE_WHEN_END_OF_LADDER
 25+  2C53 32 99 4C     	ld (ladder_off_chance), a
 26+  2C56 CB 2F        	sra a
 27+  2C58 32 9A 4C     	ld (ladder_half_chance), a
 28+  2C5B
 29+  2C5B
 30+  2C5B              probStayOn:
 31+  2C5B
 32+  2C5B
 33+  2C5B CD BB 21     	call random
 34+  2C5E
 35+  2C5E 47           	ld b, a
 36+  2C5F 3A 99 4C     	ld a, (ladder_off_chance)
 37+  2C62 B8           	cp b
 38+  2C63 DA 9C 2C     	jp c, carryOnClimbing
 39+  2C66
 40+  2C66              checkGetOffLeft:
 41+  2C66
 42+  2C66 3A 4E 4C     	ld a, (hen_can_get_off_left)
 43+  2C69 FE 00        	cp 0
 44+  2C6B CA 94 2C     	jp z, checkGetOffRight
 45+  2C6E
 46+  2C6E 3A 4F 4C     	ld a, (hen_can_get_off_right)
 47+  2C71 FE 00        	cp 0
 48+  2C73 CA 89 2C     	jp z, startWalkLeft
 49+  2C76
 50+  2C76 78           	ld a, b
 51+  2C77 3A 9A 4C     	ld a, (ladder_half_chance)
 52+  2C7A B8           	cp b
 53+  2C7B DA 89 2C     	jp c, startWalkLeft
 54+  2C7E
 55+  2C7E
 56+  2C7E              startWalkRight:
 57+  2C7E
 58+  2C7E 3E 01        	ld a, HEN_WALKING
 59+  2C80 FD 77 04     	ld (iy + hen_state), a
 60+  2C83
 61+  2C83 3E 01        	ld a, RIGHT
 62+  2C85 FD 77 03     	ld (iy + hen_direction), a
 63+  2C88
 64+  2C88 C9           	ret
 65+  2C89
 66+  2C89
 67+  2C89              startWalkLeft:
 68+  2C89
 69+  2C89 3E 01        	ld a, HEN_WALKING
 70+  2C8B FD 77 04     	ld (iy + hen_state), a
 71+  2C8E
 72+  2C8E 3E 00        	ld a, LEFT
 73+  2C90 FD 77 03     	ld (iy + hen_direction), a
 74+  2C93
 75+  2C93 C9           	ret
 76+  2C94
 77+  2C94
 78+  2C94              checkGetOffRight:
 79+  2C94
 80+  2C94 3A 4F 4C     	ld a, (hen_can_get_off_right)
 81+  2C97 FE 01        	cp 1
 82+  2C99 CA 7E 2C     	jp z, startWalkRight
 83+  2C9C
 84+  2C9C
 85+  2C9C              carryOnClimbing:
 86+  2C9C
 87+  2C9C FD 7E 04     	ld a, (iy + hen_state)
 88+  2C9F FE 02        	cp HEN_CLIMBING
 89+  2CA1 C0           	ret nz
 90+  2CA2
 91+  2CA2
 92+  2CA2 FD 7E 03     	ld a, (iy + hen_direction)
 93+  2CA5 FE 02        	cp UP
 94+  2CA7 CA C4 2C     	jp z, moveHenUp
 95+  2CAA
 96+  2CAA C3 14 2D     	jp moveHenDown
 97+  2CAD
 98+  2CAD
 99+  2CAD
100+  2CAD              fakeMoveUp:
101+  2CAD
102+  2CAD FD 7E 04     	ld a, (iy + hen_state)
103+  2CB0 FE 02        	cp HEN_CLIMBING
104+  2CB2 CA C4 2C     	jp z, moveHenUp
105+  2CB5
106+  2CB5 3E 01        	ld a, 1
107+  2CB7 FD 77 07     	ld (iy + hen_centred_y), a
108+  2CBA
109+  2CBA 3E 02        	ld a, HEN_CLIMBING
110+  2CBC FD 77 04     	ld (iy + hen_state), a
111+  2CBF
112+  2CBF 3E 02        	ld a, UP
113+  2CC1 FD 77 03     	ld (iy + hen_direction), a
114+  2CC4
115+  2CC4
116+  2CC4              moveHenUp:
117+  2CC4
118+  2CC4 3A 4A 4C     	ld a, (hen_can_go_up_ladder)
119+  2CC7 FE 00        	cp 0
120+  2CC9 CA 4D 2D     	jp z, hen_turn_ladder
121+  2CCC
122+  2CCC
123+  2CCC
124+  2CCC DD 7E 10     	ld a, (ix + spr_x)
125+  2CCF D6 04        	sub 4
126+  2CD1 DD 77 10     	ld (ix + spr_x), a
127+  2CD4
128+  2CD4 FD 7E 06     	ld a, (iy + hen_frame)
129+  2CD7 EE 01        	xor %00000001
130+  2CD9 FD 77 06     	ld (iy + hen_frame), a
131+  2CDC
132+  2CDC
133+  2CDC FD 7E 07     	ld a, (iy + hen_centred_y)
134+  2CDF EE 01        	xor %00000001
135+  2CE1 FD 77 07     	ld (iy + hen_centred_y), a
136+  2CE4
137+  2CE4 CD 58 2D     	call setClimbFrame
138+  2CE7
139+  2CE7 FD 7E 07     	ld a, (iy + hen_centred_y)
140+  2CEA FE 00        	cp 0
141+  2CEC C8           	ret z
142+  2CED
143+  2CED FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
143+  2CF1 66 01
144+  2CF3 CD D2 20     	call moveTileUpHL
145+  2CF6 FD 75 00 FD  	ld (iy + hen_tile_address), hl
145+  2CFA 74 01
146+  2CFC
147+  2CFC
148+  2CFC C9           	ret
149+  2CFD
150+  2CFD              fakeMoveDown:
151+  2CFD
152+  2CFD
153+  2CFD FD 7E 04     	ld a, (iy + hen_state)
154+  2D00 FE 02        	cp HEN_CLIMBING
155+  2D02 CA 14 2D     	jp z, moveHenDown
156+  2D05
157+  2D05 3E 01        	ld a, 1
158+  2D07 FD 77 07     	ld (iy + hen_centred_y), a
159+  2D0A
160+  2D0A 3E 02        	ld a, HEN_CLIMBING
161+  2D0C FD 77 04     	ld (iy + hen_state), a
162+  2D0F
163+  2D0F 3E 06        	ld a, DOWN
164+  2D11 FD 77 03     	ld (iy + hen_direction), a
165+  2D14
166+  2D14
167+  2D14              moveHenDown:
168+  2D14
169+  2D14
170+  2D14 3A 4B 4C     	ld a, (hen_can_go_down_ladder)
171+  2D17 FE 00        	cp 0
172+  2D19 CA 4D 2D     	jp z, hen_turn_ladder
173+  2D1C
174+  2D1C DD 7E 10     	ld a, (ix + spr_x)
175+  2D1F C6 04        	add 4
176+  2D21 DD 77 10     	ld (ix + spr_x), a
177+  2D24
178+  2D24              	;ld de, tile_ram_start + row_0 + column_4
179+  2D24
180+  2D24
181+  2D24 FD 7E 07     	ld a, (iy + hen_centred_y)
182+  2D27              	;ld (de), a
183+  2D27 EE 01        	xor %00000001
184+  2D29 FD 77 07     	ld (iy + hen_centred_y), a
185+  2D2C              	;inc de
186+  2D2C              	;ld (de), a
187+  2D2C
188+  2D2C FD 7E 06     	ld a, (iy + hen_frame)
189+  2D2F EE 01        	xor %00000001
190+  2D31 FD 77 06     	ld (iy + hen_frame), a
191+  2D34
192+  2D34
193+  2D34 CD 58 2D     	call setClimbFrame
194+  2D37
195+  2D37
196+  2D37 FD 7E 07     	ld a, (iy + hen_centred_y)
197+  2D3A FE 01        	cp 1
198+  2D3C C8           	ret z
199+  2D3D
200+  2D3D FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
200+  2D41 66 01
201+  2D43 CD C9 20     	call moveTileDownHL
202+  2D46 FD 75 00 FD  	ld (iy + hen_tile_address), hl
202+  2D4A 74 01
203+  2D4C
204+  2D4C
205+  2D4C C9           	ret
206+  2D4D
207+  2D4D
208+  2D4D
209+  2D4D              hen_turn_ladder:
210+  2D4D
211+  2D4D FD 7E 03     	ld a, (iy + hen_direction)
212+  2D50 EE 04        	xor %00000100
213+  2D52 FD 77 03     	ld (iy + hen_direction), a
214+  2D55
215+  2D55 C3 9C 2C     	jp carryOnClimbing
216+  2D58
217+  2D58
218+  2D58              setClimbFrame:
219+  2D58
220+  2D58 3E 2C        	ld a, hen_climb_sprite
221+  2D5A 47           	ld b, a
222+  2D5B
223+  2D5B FD 7E 06     	ld a, (iy + hen_frame)
224+  2D5E CB 27        	sla a
225+  2D60 CB 27            sla a
226+  2D62 80               add b
227+  2D63 DD 77 00         ld (ix + spr_num), a
228+  2D66
229+  2D66
230+  2D66 3A 4D 4C     	ld a, (hen_speed)
231+  2D69 FD 77 05     	ld (iy + hen_timer), a
232+  2D6C
233+  2D6C DD CB 00 86  	res flipy, (ix)
234+  2D70 C9           	ret
235+  2D71
236+  2D71
237+  2D71
238+  2D71
239+  2D71
240+  2D71
241+  2D71
242+  2D71              hen_decide_ladder:
243+  2D71
244+  2D71
245+  2D71
246+  2D71 CD BB 21     	call random
247+  2D74 47           	ld b, a
248+  2D75
249+  2D75 FE 80        	cp 128
250+  2D77 D0           	ret nc
251+  2D78
252+  2D78 3A 4A 4C     	ld a, (hen_can_go_up_ladder)
253+  2D7B FE 00        	cp 0
254+  2D7D CA A4 2D     	jp z, checkHenDownLadder
255+  2D80
256+  2D80 3A 4B 4C     	ld a, (hen_can_go_down_ladder)
257+  2D83 FE 00        	cp 0
258+  2D85 CA 8E 2D     	jp z, henMakeUp
259+  2D88
260+  2D88 78           	ld a, b
261+  2D89 FE 40        	cp 64
262+  2D8B D2 99 2D     	jp nc, henMakeDown
263+  2D8E
264+  2D8E              henMakeUp:
265+  2D8E
266+  2D8E 3E 02        	ld a, UP
267+  2D90 FD 77 03     	ld (iy + hen_direction), a
268+  2D93
269+  2D93 3E 02        	ld a, HEN_CLIMBING
270+  2D95 FD 77 04     	ld (iy + hen_state), a
271+  2D98
272+  2D98
273+  2D98 C9           	ret
274+  2D99
275+  2D99
276+  2D99              henMakeDown:
277+  2D99
278+  2D99
279+  2D99 3E 06        	ld a, DOWN
280+  2D9B FD 77 03     	ld (iy + hen_direction), a
281+  2D9E
282+  2D9E 3E 02        	ld a, HEN_CLIMBING
283+  2DA0 FD 77 04     	ld (iy + hen_state), a
284+  2DA3
285+  2DA3 C9           	ret
286+  2DA4
287+  2DA4              checkHenDownLadder:
288+  2DA4
289+  2DA4 3A 4B 4C     	ld a, (hen_can_go_down_ladder)
290+  2DA7 FE 01        	cp 1
291+  2DA9 CA 99 2D     	jp z, henMakeDown
292+  2DAC
293+  2DAC
294+  2DAC C9           	ret
# file closed: scripts/gameplay/birds/hen_ladder.asm
 50   2DAD                  include "scripts/gameplay/birds/hen_eat.asm"
# file opened: scripts/gameplay/birds/hen_eat.asm
  1+  2DAD
  2+  2DAD
  3+  2DAD              hen_eating:
  4+  2DAD
  5+  2DAD 3E 01        	ld a, HEN_WALKING
  6+  2DAF FD 77 04     	ld (iy + hen_state), a
  7+  2DB2
  8+  2DB2 FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
  8+  2DB6 66 01
  9+  2DB8
 10+  2DB8 FD 7E 03     	ld a, (iy + hen_direction)
 11+  2DBB FE 00        	cp LEFT
 12+  2DBD CA D3 2D     	jp z, eatSeedLeft
 13+  2DC0
 14+  2DC0              eatSeedRight:
 15+  2DC0
 16+  2DC0 23           	inc hl
 17+  2DC1 23           	inc hl
 18+  2DC2
 19+  2DC2 3E 40        	ld a, blank_tile
 20+  2DC4 77           	ld (hl), a
 21+  2DC5
 22+  2DC5 DD 7E 11     	ld a, (ix + spr_y)
 23+  2DC8 C6 04        	add 4
 24+  2DCA DD 77 11     	ld (ix + spr_y), a
 25+  2DCD
 26+  2DCD CD ED 2B     	call setWalkFrame
 27+  2DD0
 28+  2DD0 C3 48 2B     	jp hen_walking
 29+  2DD3
 30+  2DD3
 31+  2DD3              eatSeedLeft:
 32+  2DD3
 33+  2DD3 2B           	dec hl
 34+  2DD4
 35+  2DD4 3E 40        	ld a, blank_tile
 36+  2DD6 77           	ld (hl), a
 37+  2DD7
 38+  2DD7
 39+  2DD7 DD 7E 11     	ld a, (ix + spr_y)
 40+  2DDA D6 04        	sub 4
 41+  2DDC DD 77 11     	ld (ix + spr_y), a
 42+  2DDF
 43+  2DDF CD ED 2B     	call setWalkFrame
 44+  2DE2
 45+  2DE2 C3 48 2B     	jp hen_walking
 46+  2DE5
 47+  2DE5
 48+  2DE5
 49+  2DE5
 50+  2DE5              hen_check_seed:
 51+  2DE5
 52+  2DE5
 53+  2DE5
 54+  2DE5 FD 7E 04     	ld a, (iy + hen_state)
 55+  2DE8 FE 01        	cp HEN_WALKING
 56+  2DEA C0           	ret nz
 57+  2DEB
 58+  2DEB FD 7E 02     	ld a, (iy + hen_centred_x)
 59+  2DEE FE 00        	cp 0
 60+  2DF0 C0           	ret nz
 61+  2DF1
 62+  2DF1 FD 6E 00 FD  	ld hl, (iy + hen_tile_address)
 62+  2DF5 66 01
 63+  2DF7
 64+  2DF7 FD 7E 03     	ld a, (iy + hen_direction)
 65+  2DFA FE 00        	cp LEFT
 66+  2DFC CA 15 2E     	jp z, checkSeedLeft
 67+  2DFF
 68+  2DFF              checkSeedRight:
 69+  2DFF
 70+  2DFF 23           	inc hl
 71+  2E00 23           	inc hl
 72+  2E01 7E           	ld a, (hl)
 73+  2E02 FE F3        	cp tile_seed
 74+  2E04 C0           	ret nz
 75+  2E05
 76+  2E05 DD 7E 11     	ld a, (ix + spr_y)
 77+  2E08 D6 04        	sub 4
 78+  2E0A DD 77 11     	ld (ix + spr_y), a
 79+  2E0D
 80+  2E0D
 81+  2E0D 3E 28        	ld a, hen_eat_sprite
 82+  2E0F DD 77 00     	ld (ix +spr_num), a
 83+  2E12
 84+  2E12 C3 2B 2E     	jp makeEat
 85+  2E15
 86+  2E15              checkSeedLeft:
 87+  2E15
 88+  2E15 2B           	dec hl
 89+  2E16 7E           	ld a, (hl)
 90+  2E17 FE F3        	cp tile_seed
 91+  2E19 C0           	ret nz
 92+  2E1A
 93+  2E1A DD 7E 11     	ld a, (ix + spr_y)
 94+  2E1D C6 04        	add 4
 95+  2E1F DD 77 11     	ld (ix + spr_y), a
 96+  2E22
 97+  2E22
 98+  2E22 3E 28        	ld a, hen_eat_sprite
 99+  2E24 DD 77 00     	ld (ix +spr_num), a
100+  2E27
101+  2E27 DD CB 00 C6  	set flipy, (ix)
102+  2E2B
103+  2E2B
104+  2E2B              makeEat:
105+  2E2B
106+  2E2B 3E 1E        	ld a, 30
107+  2E2D FD 77 05     	ld (iy + hen_timer), a
108+  2E30
109+  2E30
110+  2E30 3E 03        	ld a, HEN_EATING
111+  2E32 FD 77 04     	ld (iy + hen_state), a
112+  2E35
113+  2E35
114+  2E35
115+  2E35
116+  2E35 C9           	ret
117+  2E36
118+  2E36
# file closed: scripts/gameplay/birds/hen_eat.asm
 51   2E36                  include "scripts/gameplay/birds/mother.asm"
# file opened: scripts/gameplay/birds/mother.asm
  1+  2E36              mother_move_speed = 16
  2+  2E36              mother_frame_time = 10
  3+  2E36
  4+  2E36              mother_update:
  5+  2E36
  6+  2E36 FD 21 B9 4C  	ld iy, sprite0  // iy = player
  7+  2E3A DD 21 BB 4C  	ld ix, sprite1  // ix = mother
  8+  2E3E
  9+  2E3E CD 74 2F     	call check_mother_harry
 10+  2E41
 11+  2E41
 12+  2E41 3A 98 4C     	ld a, (mother_timer)
 13+  2E44 FE 00        	cp 0
 14+  2E46 CA 4E 2E     	jp z, motherReady
 15+  2E49
 16+  2E49 3D           	dec a
 17+  2E4A 32 98 4C     	ld (mother_timer), a
 18+  2E4D
 19+  2E4D C9           	ret
 20+  2E4E
 21+  2E4E              motherReady:
 22+  2E4E
 23+  2E4E 3A 9B 4C     	ld a, (mother_frame)
 24+  2E51 EE 01        	xor %00000001
 25+  2E53 32 9B 4C     	ld (mother_frame), a
 26+  2E56 CB 27        	sla a
 27+  2E58 CB 27        	sla a
 28+  2E5A
 29+  2E5A C6 40        	add 64
 30+  2E5C DD 77 00     	ld (ix + spr_num), a
 31+  2E5F
 32+  2E5F 3E 10        	ld a, mother_move_speed
 33+  2E61 32 98 4C     	ld (mother_timer), a
 34+  2E64
 35+  2E64 3A 97 4C     	ld a, (mother_active)
 36+  2E67 FE 00        	cp 0
 37+  2E69 C8           	ret z
 38+  2E6A
 39+  2E6A CD EF 2E     	call checkMoveMotherX
 40+  2E6D CD B4 2E     	call checkMoveMotherY
 41+  2E70 CD 76 2E     	call moveMotherX
 42+  2E73 CD 95 2E     	call moveMotherY
 43+  2E76
 44+  2E76
 45+  2E76              moveMotherX:
 46+  2E76
 47+  2E76 3A 41 4C     	ld a, (mother_speed_x_pixel)
 48+  2E79 47           	ld b, a
 49+  2E7A DD 7E 11     	ld a, (ix + spr_y)
 50+  2E7D 80           	add b
 51+  2E7E DD 77 11     	ld (ix + spr_y), a
 52+  2E81 FE 14        	cp 20
 53+  2E83 DA 8C 2E     	jp c, bounceX
 54+  2E86
 55+  2E86 FE FC        	cp 252
 56+  2E88 D2 8C 2E     	jp nc, bounceX
 57+  2E8B
 58+  2E8B C9           	ret
 59+  2E8C
 60+  2E8C              bounceX:
 61+  2E8C
 62+  2E8C 3A 41 4C     	ld a, (mother_speed_x_pixel)
 63+  2E8F ED 44        	neg
 64+  2E91 32 41 4C     	ld (mother_speed_x_pixel), a
 65+  2E94
 66+  2E94 C9           	ret
 67+  2E95
 68+  2E95              moveMotherY:
 69+  2E95
 70+  2E95 3A 43 4C     	ld a, (mother_speed_y_pixel)
 71+  2E98 47           	ld b, a
 72+  2E99 DD 7E 10     	ld a, (ix + spr_x)
 73+  2E9C 80           	add b
 74+  2E9D DD 77 10     	ld (ix + spr_x), a
 75+  2EA0 FE 28        	cp 40
 76+  2EA2 DA AB 2E     	jp c, bounceY
 77+  2EA5
 78+  2EA5 FE F0        	cp 240
 79+  2EA7 D2 AB 2E     	jp nc, bounceY
 80+  2EAA
 81+  2EAA C9           	ret
 82+  2EAB
 83+  2EAB              bounceY:
 84+  2EAB
 85+  2EAB 3A 43 4C     	ld a, (mother_speed_y_pixel)
 86+  2EAE ED 44        	neg
 87+  2EB0 32 43 4C     	ld (mother_speed_y_pixel), a
 88+  2EB3
 89+  2EB3 C9           	ret
 90+  2EB4
 91+  2EB4              checkMoveMotherY:
 92+  2EB4
 93+  2EB4
 94+  2EB4
 95+  2EB4 DD 7E 10     	ld a, (ix + spr_x)  // bird
 96+  2EB7 D6 04        	sub 4
 97+  2EB9 FD BE 10     	cp (iy +spr_x)   // player
 98+  2EBC DA D7 2E     	jp c, moveMotherDown
 99+  2EBF
100+  2EBF
101+  2EBF
102+  2EBF              moveMotherUp:
103+  2EBF
104+  2EBF 3A 43 4C     	ld a, (mother_speed_y_pixel)
105+  2EC2 D6 01        	sub 1
106+  2EC4 32 43 4C     	ld (mother_speed_y_pixel), a
107+  2EC7 FE 05        	cp 5
108+  2EC9 DA D6 2E     	jp c, okRight2
109+  2ECC FE FC        	cp -4
110+  2ECE D2 D6 2E     	jp nc, okRight2
111+  2ED1
112+  2ED1 3E FC        	ld a, -4
113+  2ED3 32 43 4C     	ld (mother_speed_y_pixel), a
114+  2ED6
115+  2ED6
116+  2ED6              okRight2:
117+  2ED6
118+  2ED6
119+  2ED6 C9           	ret
120+  2ED7
121+  2ED7              moveMotherDown:
122+  2ED7
123+  2ED7 3A 43 4C     	ld a, (mother_speed_y_pixel)
124+  2EDA C6 01        	add 1
125+  2EDC 32 43 4C     	ld (mother_speed_y_pixel), a
126+  2EDF FE FC        	cp -4
127+  2EE1 D2 EE 2E     	jp nc, okLeft2
128+  2EE4
129+  2EE4 FE 05        	cp 5
130+  2EE6 DA EE 2E     	jp c, okLeft2
131+  2EE9
132+  2EE9 3E 04        	ld a, 4
133+  2EEB 32 43 4C     	ld (mother_speed_y_pixel), a
134+  2EEE
135+  2EEE
136+  2EEE              okLeft2:
137+  2EEE
138+  2EEE C9           	ret
139+  2EEF
140+  2EEF
141+  2EEF
142+  2EEF
143+  2EEF              checkMoveMotherX:
144+  2EEF
145+  2EEF DD 7E 11     	ld a, (ix + spr_y)  // bird
146+  2EF2 D6 04        	sub 4
147+  2EF4 FD BE 11     	cp (iy +spr_y)   // player
148+  2EF7 DA 16 2F     	jp c, moveMotherLeft
149+  2EFA
150+  2EFA
151+  2EFA
152+  2EFA              moveMotherRight:
153+  2EFA
154+  2EFA 3A 41 4C     	ld a, (mother_speed_x_pixel)
155+  2EFD D6 01        	sub 1
156+  2EFF 32 41 4C     	ld (mother_speed_x_pixel), a
157+  2F02 FE 05        	cp 5
158+  2F04 DA 11 2F     	jp c, okRight
159+  2F07 FE FB        	cp -5
160+  2F09 C2 11 2F     	jp nz, okRight
161+  2F0C
162+  2F0C
163+  2F0C
164+  2F0C
165+  2F0C 3E FC        	ld a, -4
166+  2F0E 32 41 4C     	ld (mother_speed_x_pixel), a
167+  2F11
168+  2F11              okRight:
169+  2F11
170+  2F11
171+  2F11 DD CB 00 86  	res flipy, (ix)
172+  2F15
173+  2F15 C9           	ret
174+  2F16
175+  2F16              moveMotherLeft:
176+  2F16
177+  2F16
178+  2F16 3A 41 4C     	ld a, (mother_speed_x_pixel)
179+  2F19 C6 01        	add 1
180+  2F1B 32 41 4C     	ld (mother_speed_x_pixel), a
181+  2F1E FE FB        	cp -5
182+  2F20 D2 2D 2F     	jp nc, okLeft
183+  2F23
184+  2F23 FE 05        	cp 5
185+  2F25 DA 2D 2F     	jp c, okLeft
186+  2F28
187+  2F28 3E 04        	ld a, 4
188+  2F2A 32 41 4C     	ld (mother_speed_x_pixel), a
189+  2F2D
190+  2F2D
191+  2F2D              okLeft:
192+  2F2D
193+  2F2D
194+  2F2D DD CB 00 C6  	set flipy, (ix)
195+  2F31
196+  2F31 C9           	ret
197+  2F32
198+  2F32
199+  2F32
200+  2F32              ;.movebigbird
201+  2F32
202+  2F32              	; Save facing direction
203+  2F32              ;	LDA bigbirdanim:AND #2:STA temp4		; temp4 = facing direction
204+  2F32
205+  2F32              	;; If there's no big bird flying, skip the movement code
206+  2F32              	;LDA bigbirdflag:BEQ animatebigbird
207+  2F32
208+  2F32              	; Move big bird horizontally
209+  2F32              	;LDA bigbirdxpos:CLC:ADC #4
210+  2F32              	;CMP playerx:BCS movebigbirdleft
211+  2F32
212+  2F32              	;.movebigbirdright
213+  2F32              	;INC bigbirdxspeed						; Increment xspeed, to a maximum of 5
214+  2F32              	;LDA bigbirdxspeed:CMP #6
215+  2F32              	;BMI P%+4:DEC bigbirdxspeed
216+  2F32              	;LDA #0:STA temp4						; Bird faces right
217+  2F32              	;JMP movebigbirdvertically
218+  2F32
219+  2F32              ;	.movebigbirdleft
220+  2F32              	;DEC bigbirdxspeed						; Decrement xspeed, to a minimum of -5
221+  2F32              	;LDA bigbirdxspeed:CMP #256-5
222+  2F32              	;BPL P%+4:INC bigbirdxspeed
223+  2F32              	;LDA #2:STA temp4						; Bird faces left
224+  2F32
225+  2F32              	; Move big bird vertically
226+  2F32              	;.movebigbirdvertically
227+  2F32              	;LDA playery:CLC:ADC #4
228+  2F32              	;CMP bigbirdypos:BCC movebigbirddown
229+  2F32
230+  2F32              	;.movebigbirdup
231+  2F32              	;INC bigbirdyspeed						; Increment yspeed, to a maximum of 5
232+  2F32              	;LDA bigbirdyspeed:CMP #6
233+  2F32              	;BMI P%+4:DEC bigbirdyspeed
234+  2F32              	;JMP bigbirdbounce
235+  2F32
236+  2F32              	;.movebigbirddown
237+  2F32              	;DEC bigbirdyspeed						; Decrement yspeed, to a minimum of -5
238+  2F32              	;LDA bigbirdyspeed:CMP #256-5
239+  2F32              	;BPL P%+4:INC bigbirdyspeed
240+  2F32
241+  2F32              	; Bounce big bird off the bottom of the screen
242+  2F32              	;.bigbirdbounce
243+  2F32              	;LDA bigbirdypos:CLC:ADC bigbirdyspeed
244+  2F32              	;CMP #40
245+  2F32              	;BCS dontbounceoffbottom
246+  2F32
247+  2F32              	;LDA bigbirdyspeed:EOR #255:STA bigbirdyspeed
248+  2F32              	;INC bigbirdyspeed
249+  2F32              	;.dontbounceoffbottom
250+  2F32
251+  2F32              	; Bounce big bird off the sides of the screen
252+  2F32              	;LDA bigbirdxpos:CLC:ADC bigbirdxspeed
253+  2F32              	;CMP #160-16
254+  2F32              	;BCC animatebigbird
255+  2F32
256+  2F32              	;LDA bigbirdxspeed:EOR #255:STA bigbirdxspeed
257+  2F32              	;INC bigbirdxspeed
258+  2F32
259+  2F32
260+  2F32              ;.animatebigbird
261+  2F32
262+  2F32              ;	LDA bigbirdanim
263+  2F32              ;	JSR plotbigbird							; Unplot old bird
264+  2F32
265+  2F32              ;	LDA bigbirdxpos:CLC:ADC bigbirdxspeed:STA bigbirdxpos
266+  2F32              ;	LDA bigbirdypos:CLC:ADC bigbirdyspeed:STA bigbirdypos
267+  2F32
268+  2F32              	;LDA bigbirdanim:AND #1:EOR #1:ORA temp4:STA bigbirdanim
269+  2F32              	;JSR plotbigbird							; Plot new bird
270+  2F32
271+  2F32              	;RTS
272+  2F32
273+  2F32
274+  2F32
275+  2F32              init_mother:
276+  2F32
277+  2F32 3E 00            ld a, 0
278+  2F34 32 40 4C         ld (mother_speed_x_frac), a
279+  2F37 32 41 4C         ld (mother_speed_x_pixel), a
280+  2F3A 32 42 4C         ld (mother_speed_y_frac), a
281+  2F3D 32 43 4C         ld (mother_speed_y_pixel), a
282+  2F40 32 44 4C         ld (mother_x_pos_frac), a
283+  2F43 32 45 4C         ld (mother_y_pos_frac), a
284+  2F46 32 9B 4C      	ld (mother_frame), a
285+  2F49
286+  2F49 3E 01            ld a, 1
287+  2F4B 32 46 4C         ld (mother_going_right), a
288+  2F4E 32 47 4C         ld (mother_going_down), a
289+  2F51
290+  2F51 3E 0A            ld a, mother_frame_time
291+  2F53 32 48 4C         ld (mother_frame_timer), a
292+  2F56
293+  2F56 3E 10            ld a, mother_move_speed
294+  2F58 32 98 4C         ld (mother_timer), a
295+  2F5B
296+  2F5B DD 21 BB 4C      ld ix, sprite1
297+  2F5F
298+  2F5F 3E 40            ld a, 16*4
299+  2F61 DD 77 00         ld (ix + spr_num), a
300+  2F64
301+  2F64 3E 09            ld a, palette_blue_red_yellow
302+  2F66 DD 77 01         ld (ix + spr_pal), a
303+  2F69
304+  2F69 3E 55            ld a, 85
305+  2F6B DD 77 10         ld (ix + spr_x), a
306+  2F6E
307+  2F6E 3E F8            ld a, 248
308+  2F70 DD 77 11         ld (ix + spr_y), a
309+  2F73
310+  2F73
311+  2F73 C9           	ret
312+  2F74
313+  2F74
314+  2F74              check_mother_harry:
315+  2F74
316+  2F74              	//ld a, (alex_invincible_timer)
317+  2F74              	//cp 0
318+  2F74              	//ret nz
319+  2F74
320+  2F74 3A C9 4C     	ld a, (sprite0 + spr_x)
321+  2F77 4F           	ld c, a
322+  2F78
323+  2F78 DD 7E 10     	ld a, (ix + spr_x)
324+  2F7B FE 00        	cp 0
325+  2F7D C8           	ret z
326+  2F7E
327+  2F7E 91           	sub c
328+  2F7F C6 0A        	add 10
329+  2F81 FE 14        	cp 20
330+  2F83 D0           	ret nc
331+  2F84
332+  2F84 3A CA 4C     	ld a, (sprite0 + spr_y)
333+  2F87 FE 02        	cp 2
334+  2F89              	;ret c
335+  2F89 4F           	ld c, a
336+  2F8A
337+  2F8A DD 7E 11     	ld a, (ix + spr_y)
338+  2F8D 91           	sub c
339+  2F8E C6 0B        	add 11
340+  2F90 FE 16        	cp 22
341+  2F92 D0           	ret nc
342+  2F93
343+  2F93
344+  2F93 C3 7C 07     	jp lose_set
345+  2F96
346+  2F96
# file closed: scripts/gameplay/birds/mother.asm
 52   2F96
 53   2F96
 54   2F96                  org $3000
 55   3000
 56   3000
 57   3000                  include "scripts/gameplay/game_loop.asm"
# file opened: scripts/gameplay/game_loop.asm
  1+  3000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2+  3000              ; performs logic for game mode
  3+  3000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  3000              game_logic:
  5+  3000
  6+  3000
  7+  3000 CD 05 31             call quit_to_title
  8+  3003
  9+  3003                      ;call check_song_restart                                                    ;see if we want to get back to title screen
 10+  3003
 11+  3003
 12+  3003
 13+  3003 3A 3C 4C             ld a, (pal_timer)
 14+  3006 3C                   inc a
 15+  3007 32 3C 4C             ld (pal_timer), a
 16+  300A FE 01                cp 1
 17+  300C                     ; jp z, skipUpdate
 18+  300C
 19+  300C FE 06                cp 6
 20+  300E C2 16 30             jp nz, noReset
 21+  3011
 22+  3011 3E 00                ld a, 0
 23+  3013 32 3C 4C             ld (pal_timer), a
 24+  3016
 25+  3016              noReset:
 26+  3016
 27+  3016 3A 13 4D             ld a, (level_complete)
 28+  3019 FE 01                cp 1
 29+  301B CA 41 31             jp z, start_complete
 30+  301E
 31+  301E 3A 86 4C             ld a, (is_attract_mode)
 32+  3021 FE 01                cp 1
 33+  3023 CC C8 30             call z, do_attract_mode
 34+  3026
 35+  3026 CD 6F 0A             call lifts_update
 36+  3029 CD B2 34             call harry_update
 37+  302C
 38+  302C CD 07 29             call hens_update
 39+  302F CD 36 2E             call mother_update
 40+  3032
 41+  3032
 42+  3032              skipUpdate:
 43+  3032
 44+  3032 CD 3E 30             call update_timers
 45+  3035 CD 51 22             call show_score
 46+  3038 CD E1 21             call show_lives
 47+  303B
 48+  303B C3 78 3F             jp wait                                                                                ;finished setup goto wait section
 49+  303E
 50+  303E
 51+  303E
 52+  303E              update_timers:
 53+  303E
 54+  303E 3A 8B 4C         ld a, (stop_timer)
 55+  3041 FE 00            cp 0
 56+  3043 CA 4B 30         jp z, noStopTime
 57+  3046
 58+  3046 3D               dec a
 59+  3047 32 8B 4C         ld (stop_timer), a
 60+  304A
 61+  304A C9               ret
 62+  304B
 63+  304B              noStopTime:
 64+  304B
 65+  304B 3A 38 4C         ld a, (time_remaining)
 66+  304E 47               ld b, a
 67+  304F 3A 39 4C         ld a, (time_remaining + 1)
 68+  3052 80               add b
 69+  3053 FE 00            cp 0
 70+  3055 C2 5B 30         jp nz, noLoseTime
 71+  3058
 72+  3058                ;  ld hl, tile_ram_start + row_0 + column_9
 73+  3058                  ;inc (hl)
 74+  3058
 75+  3058 C3 7C 07         jp lose_set
 76+  305B
 77+  305B
 78+  305B              noLoseTime:
 79+  305B
 80+  305B 3A 9E 4C         ld a, (time_reduce_timer)
 81+  305E FE 00            cp 0
 82+  3060 CA 68 30         jp z, reduceTime
 83+  3063
 84+  3063 3D               dec a
 85+  3064 32 9E 4C         ld (time_reduce_timer), a
 86+  3067 C9               ret
 87+  3068
 88+  3068
 89+  3068              reduceTime:
 90+  3068
 91+  3068 3E 08            ld a, time_frames
 92+  306A                 ; ld a, 0
 93+  306A 32 9E 4C         ld (time_reduce_timer), a
 94+  306D
 95+  306D 3A 38 4C         ld a, (time_remaining)
 96+  3070 3D               dec a
 97+  3071 27               daa
 98+  3072 32 38 4C         ld (time_remaining), a
 99+  3075
100+  3075 3A 39 4C         ld a, (time_remaining + 1)
101+  3078 DE 00            sbc 0
102+  307A 27               daa
103+  307B 32 39 4C         ld (time_remaining + 1), a
104+  307E
105+  307E
106+  307E
107+  307E 3A 9D 4C         ld a, (bonus_reduce_counter)
108+  3081 3C               inc a
109+  3082 32 9D 4C         ld (bonus_reduce_counter), a
110+  3085 FE 05            cp 5
111+  3087 C0               ret nz
112+  3088
113+  3088 3E 00            ld a, 0
114+  308A 32 9D 4C         ld (bonus_reduce_counter),a
115+  308D
116+  308D 3A 3B 4C         ld a, (bonus_remaining + 1)
117+  3090 47               ld b, a
118+  3091 3A 3A 4C         ld a, (bonus_remaining)
119+  3094 80               add b
120+  3095 FE 00            cp 0
121+  3097 CA AD 30         jp z, zeroBonus
122+  309A
123+  309A 3A 3A 4C         ld a, (bonus_remaining)
124+  309D D6 10            sub $10
125+  309F 27               daa
126+  30A0 32 3A 4C         ld (bonus_remaining), a
127+  30A3 47               ld b, a
128+  30A4
129+  30A4
130+  30A4 3A 3B 4C         ld a, (bonus_remaining + 1)
131+  30A7 DE 00            sbc 0
132+  30A9 27               daa
133+  30AA 32 3B 4C         ld (bonus_remaining + 1), a
134+  30AD
135+  30AD              zeroBonus:
136+  30AD
137+  30AD
138+  30AD
139+  30AD
140+  30AD
141+  30AD
142+  30AD
143+  30AD
144+  30AD C9               ret
145+  30AE
146+  30AE
147+  30AE              check_song_restart:
148+  30AE
149+  30AE 3A 4C 4D             ld a, (song_number)
150+  30B1 FE 00                cp 0
151+  30B3 C2 C7 30             jp nz, soundNotPause
152+  30B6
153+  30B6 3A 36 4C             ld a, (attract_mode_timer)
154+  30B9 FE 00                cp 0
155+  30BB CA C5 30             jp z, restart_song
156+  30BE
157+  30BE 3D                   dec a
158+  30BF 32 36 4C             ld (attract_mode_timer), a
159+  30C2
160+  30C2 C3 C7 30             jp soundNotPause
161+  30C5
162+  30C5              restart_song:
163+  30C5
164+  30C5                     ; jp restart_song
165+  30C5
166+  30C5 3E 02                ld a, 2
167+  30C7                      ;call play_song
168+  30C7
169+  30C7              soundNotPause:
170+  30C7
171+  30C7
172+  30C7 C9                   ret
173+  30C8
174+  30C8              do_attract_mode:
175+  30C8
176+  30C8
177+  30C8 3A 36 4C             ld a, (attract_mode_timer)
178+  30CB FE 00                cp 0
179+  30CD C2 E6 30             jp nz, noNewControl
180+  30D0
181+  30D0 2A 34 4C             ld hl, (attract_mode_address)
182+  30D3 23                   inc hl
183+  30D4 23                   inc hl
184+  30D5 22 34 4C             ld (attract_mode_address), hl
185+  30D8
186+  30D8 7E                   ld a, (hl)
187+  30D9 FE FF                cp 255
188+  30DB C2 E4 30             jp nz, notRunOut
189+  30DE
190+  30DE 21 3A 1B             ld hl, attract_mode_data
191+  30E1 22 34 4C             ld (attract_mode_address), hl
192+  30E4
193+  30E4              notRunOut:
194+  30E4
195+  30E4 23                   inc hl
196+  30E5 7E                   ld a, (hl)
197+  30E6
198+  30E6              noNewControl:
199+  30E6
200+  30E6 3D                   dec a
201+  30E7 32 36 4C             ld (attract_mode_timer), a
202+  30EA
203+  30EA 3E FF                ld a, $ff
204+  30EC 32 32 4C             ld (joystick_state), a
205+  30EF 32 85 4C             ld (fire_override), a
206+  30F2
207+  30F2 2A 34 4C             ld hl, (attract_mode_address)
208+  30F5 7E                   ld a, (hl)
209+  30F6 FE 00                cp 0
210+  30F8 CA FF 30             jp z, isFire
211+  30FB 32 32 4C             ld (joystick_state),a
212+  30FE
213+  30FE C9                   ret
214+  30FF
215+  30FF
216+  30FF
217+  30FF              isFire:
218+  30FF
219+  30FF 3E 00                ld a, 0
220+  3101 32 85 4C             ld (fire_override), a
221+  3104
222+  3104
223+  3104 C9                   ret
224+  3105
225+  3105
226+  3105
227+  3105
228+  3105              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
229+  3105              ; checks to see if player pressed p2 start so they can get
230+  3105              ; quickly back to title screen
231+  3105              ;;;;;;;;;;;;;;;;
232+  3105              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
233+  3105              quit_to_title:
234+  3105 3A 33 4C             ld a,(start_state)                                                       ;get state
235+  3108 E6 A0                and inp_chk_p2st                                                        ;examine p2 start
236+  310A FE 80                cp inp_p2_presd                                                                ;check for pressed
237+  310C C2 17 31             jp nz,time_tick
238+  310F
239+  310F 3A 86 4C             ld a, (is_attract_mode)
240+  3112 FE 01                cp 1
241+  3114 CA 0B 01             jp z, start_title_mode
242+  3117
243+  3117                     ; jp lose_set
244+  3117
245+  3117
246+  3117              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
247+  3117              ; checks to see if whole second has passed
248+  3117              ; if so reduces time, if it's zero goes to game over
249+  3117              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
250+  3117              time_tick:
251+  3117
252+  3117 3A 33 4C             ld a,(start_state)                                                       ;get state
253+  311A E6 50                and inp_chk_p1st                                                        ;examine p2 start
254+  311C FE 40                cp inp_p1_presd                                                                ;check for pressed
255+  311E C2 29 31             jp nz,noQuit
256+  3121
257+  3121 3A 86 4C             ld a, (is_attract_mode)
258+  3124 FE 01                cp 1
259+  3126 CA 0B 01             jp z, start_title_mode
260+  3129
261+  3129
262+  3129              noQuit:
263+  3129
264+  3129 3A A6 4C             ld a,(frame_number)                                                        ;get frame number
265+  312C A7                   and a                                                                                ;see if it is zero
266+  312D C0                   ret nz                                                                                ;if not then second is not up yet
267+  312E
268+  312E 3A 12 4D             ld a,(game_time)
269+  3131 FE 00                cp 0
270+  3133 C8                   ret z
271+  3134                                                                              ;get game time
272+  3134 3D                   dec a                                                                                ;reduce by one
273+  3135 27                   daa                                                                                        ;correct for bcd
274+  3136 32 12 4D             ld (game_time),a
275+  3139
276+  3139 3A 87 4C             ld a, (seconds_left)
277+  313C 3D                   dec a
278+  313D 32 87 4C             ld (seconds_left), a
279+  3140                                                                           ;store new time
280+  3140 C9                   ret
# file closed: scripts/gameplay/game_loop.asm
 58   3141                  include "scripts/system/screens/level_complete.asm"
# file opened: scripts/system/screens/level_complete.asm
  1+  3141                                                                                                              ;fall through to game over setup
  2+  3141              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  3141              ; performs logic for game over mode
  4+  3141              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  3141              ;constants
  6+  3141
  7+  3141                                                                      ;address of bottom blank
  8+  3141              start_complete:
  9+  3141
 10+  3141
 11+  3141 3E 10                ld a,complete_mode                                                                ;set mode to game over
 12+  3143 32 09 4D             ld (mode),a
 13+  3146
 14+  3146
 15+  3146 3E 1E                ld a, 30
 16+  3148 32 93 4C             ld (transition_timer), a
 17+  314B
 18+  314B 3E 00                ld a, 0
 19+  314D 32 94 4C             ld (transition_progress), a
 20+  3150 32 13 4D             ld (level_complete), a
 21+  3153
 22+  3153
 23+  3153 3E 01                ld a, 1
 24+  3155 32 3D 4C             ld (busy), a
 25+  3158                   ;   call play_song
 26+  3158
 27+  3158 06 14                ld b, 20
 28+  315A
 29+  315A              wait_for_sound:
 30+  315A
 31+  315A 32 C0 50             ld        (watchdog),a
 32+  315D 76                   halt
 33+  315E
 34+  315E
 35+  315E 10 FA                djnz wait_for_sound
 36+  3160
 37+  3160
 38+  3160
 39+  3160                      ;ld a, $90
 40+  3160                      ;ld (bonus_remaining + 1), a                                                                ;and store
 41+  3160
 42+  3160
 43+  3160              per_frame:
 44+  3160
 45+  3160 06 0A                ld b, 10
 46+  3162
 47+  3162              time_loop:
 48+  3162
 49+  3162 78                   ld a, b
 50+  3163 32 12 4D             ld (game_time), a
 51+  3166
 52+  3166 3A 3A 4C             ld a, (bonus_remaining)
 53+  3169 FE 00                cp 0
 54+  316B C2 78 31             jp nz, notExpired
 55+  316E
 56+  316E 57                   ld d, a
 57+  316F 3A 3B 4C             ld a, (bonus_remaining + 1)
 58+  3172 82                   add d
 59+  3173 FE 00                cp 0
 60+  3175 CA A5 31             jp z, noBonus
 61+  3178
 62+  3178              notExpired:
 63+  3178
 64+  3178 3A 3A 4C             ld a, (bonus_remaining)
 65+  317B D6 0A                sub 10
 66+  317D 27                   daa
 67+  317E 32 3A 4C             ld (bonus_remaining), a
 68+  3181
 69+  3181 3A 3B 4C             ld a, (bonus_remaining + 1)
 70+  3184 DE 00                sbc 0
 71+  3186 27                   daa
 72+  3187 32 3B 4C             ld (bonus_remaining + 1), a
 73+  318A
 74+  318A 3E 10                ld a, $10
 75+  318C CD 00 20             call score_points
 76+  318F CD 51 22             call show_score
 77+  3192 CD FB 21             call show_bonus
 78+  3195
 79+  3195
 80+  3195
 81+  3195 3A 12 4D             ld a, (game_time)
 82+  3198 47                   ld b, a
 83+  3199
 84+  3199 10 C7                djnz time_loop
 85+  319B
 86+  319B 32 C0 50             ld        (watchdog),a
 87+  319E 76                   halt
 88+  319F
 89+  319F CD 7C 06              call sfx_got_key
 90+  31A2
 91+  31A2 C3 60 31             jp per_frame
 92+  31A5
 93+  31A5
 94+  31A5              noBonus:
 95+  31A5
 96+  31A5
 97+  31A5 3E 00                ld a, 0
 98+  31A7 32 3D 4C             ld (busy), a
 99+  31AA
100+  31AA
101+  31AA 3E 03                ld a, 3
102+  31AC CD B0 06             call play_song
103+  31AF
104+  31AF
105+  31AF C3 78 3F             jp wait                                                                                ;wait for next game loop
106+  31B2
107+  31B2
108+  31B2              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
109+  31B2              ; performs logic for game over mode
110+  31B2              ; just a countdown timer so no other functions needed
111+  31B2              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
112+  31B2              complete_update:
113+  31B2
114+  31B2 3A 3D 4C         ld a, (busy)
115+  31B5 FE 01            cp 1
116+  31B7 CA 78 3F         jp z, wait
117+  31BA
118+  31BA 3A 93 4C         ld a, (transition_timer)
119+  31BD FE 00            cp 0
120+  31BF CA C9 31         jp z, ready_next_box
121+  31C2
122+  31C2 3D               dec a
123+  31C3 32 93 4C         ld (transition_timer), a
124+  31C6
125+  31C6 C3 FA 31         jp exit_update
126+  31C9
127+  31C9
128+  31C9              ready_next_box:
129+  31C9
130+  31C9 3A 94 4C         ld a, (transition_progress)
131+  31CC
132+  31CC CD C0 27         call draw_rectangles
133+  31CF CD 1E 24         call hide_sprites
134+  31D2
135+  31D2 3E 05            ld a, transition_delay + 1
136+  31D4 32 93 4C         ld (transition_timer), a
137+  31D7
138+  31D7 3A 94 4C         ld a, (transition_progress)
139+  31DA 3C               inc a
140+  31DB 32 94 4C         ld (transition_progress), a
141+  31DE FE 0C            cp 12
142+  31E0 CA D1 27         jp z, start_level_number
143+  31E3
144+  31E3 FE 06            cp 6
145+  31E5 C2 FA 31         jp nz, exit_update
146+  31E8
147+  31E8 3E 00            ld a, black
148+  31EA 32 7D 4C         ld (force_colour), a
149+  31ED
150+  31ED
151+  31ED
152+  31ED C3 FA 31         jp exit_update
153+  31F0
154+  31F0                  ;call quit_to_title                                                        ;see if we want to get back to title screen
155+  31F0                 ; call show_lives
156+  31F0
157+  31F0                  ;ld a,(frame_number)                                                        ;get frame number
158+  31F0                  ;and a                                                                                ;see if it is zero
159+  31F0                  ;jp nz,wait                                                                        ;if not then second is not up yet
160+  31F0
161+  31F0
162+  31F0 3A 12 4D         ld a,(game_time)                                                        ;get game time
163+  31F3 3D               dec a                                                                                ;reduce by one
164+  31F4 32 12 4D         ld (game_time),a                                                        ;store new time
165+  31F7 CA D2 02         jp z, next_level                                           ;if zero then go back to title
166+  31FA
167+  31FA
168+  31FA
169+  31FA
170+  31FA              exit_update:
171+  31FA
172+  31FA C3 78 3F         jp wait                                                                                ;finished setup goto wait section
173+  31FD
174+  31FD
175+  31FD
176+  31FD
177+  31FD
# file closed: scripts/system/screens/level_complete.asm
 59   31FD                  include "scripts/data/text.asm"
# file opened: scripts/data/text.asm
  1+  31FD
  2+  31FD
  3+  31FD
  4+  31FD A3 A3 A3...  logo_1:                 BLOCK 24, $A3
  5+  3215 00                                   defm 0
  6+  3216
  7+  3216 A3 C0 C1 C2  logo_2:                 defm $A3, $C0,$C1,$C2,$C3,$C4,$C5,$C0,$C1,$C6,$C7,$C8,$C9,$A3,$A3,$C0,$C1,$CA,$CB,$C8,$C9,$CC,$CD,$A3,0
  7+  321A C3 C4 C5 C0
  7+  321E C1 C6 C7 C8
  7+  3222 C9 A3 A3 C0
  7+  3226 C1 CA CB C8
  7+  322A C9 CC CD A3
  7+  322E 00
  8+  322F A3 D0 D1 D2  logo_3:                 defm $A3, $D0,$D1,$D2,$D3,$D4,$D5,$D0,$D1,$D6,$D7,$D8,$D9,$A3,$A3,$D0,$D1,$DA,$DB,$D8,$D9,$DC,$DD,$A3,0
  8+  3233 D3 D4 D5 D0
  8+  3237 D1 D6 D7 D8
  8+  323B D9 A3 A3 D0
  8+  323F D1 DA DB D8
  8+  3243 D9 DC DD A3
  8+  3247 00
  9+  3248
 10+  3248
 11+  3248 A4 A5 A6 A7  arla_1:                 defm $A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB, 0
 11+  324C A8 A9 AA AB
 11+  3250 00
 12+  3251 B4 B5 B6 B7  arla_2:                 defm $B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB, 0
 12+  3255 B8 B9 BA BB
 12+  3259 00
 13+  325A
 14+  325A 11 12 13 14  af_1:                 defm 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, $3E, 0
 14+  325E 15 16 17 18
 14+  3262 19 1A 1B 1C
 14+  3266 1D 1E 1F 3E
 14+  326A 00
 15+  326B 3D 22 23 24  af_2:                 defm $3D, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, $3F, 0
 15+  326F 25 26 27 28
 15+  3273 29 2A 2B 2C
 15+  3277 2D 2E 2F 3F
 15+  327B 00
 16+  327C                                                         ;0123456789012345678901234567 - for alignment purposes
 17+  327C              ;msg_instruction:        defm        "WELCOME TO  THIS LITTLE GAME",0
 18+  327C              ;msg_quit_game:                defm    " 2P START  TO QUIT TO TITLE ",0
 19+  327C 20 53 43 4F  msg_scoring:                defm        " SCORE    TIME LEVEL   HIGH",0
 19+  3280 52 45 20 20
 19+  3284 20 20 54 49
 19+  3288 4D 45 20 4C
 19+  328C 45 56 45 4C
 19+  3290 20 20 20 48
 19+  3294 49 47 48 00
 20+  3298 20 53 43 4F  msg_scoring_t:                defm      " SCORE                 HIGH",0
 20+  329C 52 45 20 20
 20+  32A0 20 20 20 20
 20+  32A4 20 20 20 20
 20+  32A8 20 20 20 20
 20+  32AC 20 20 20 48
 20+  32B0 49 47 48 00
 21+  32B4              msg_brick_floor:
 22+  32B4
 23+  32B4 63 63 63...      BLOCK   32, tile_wall
 24+  32D4 00                                   defm 0
 25+  32D5
 26+  32D5
 27+  32D5 20 50 52 4F  msg_written_for:                defm " PRODUCED EXCLUSIVELY", 0
 27+  32D9 44 55 43 45
 27+  32DD 44 20 45 58
 27+  32E1 43 4C 55 53
 27+  32E5 49 56 45 4C
 27+  32E9 59 00
 28+  32EB 46 4F 52 20  msg_written_for_1:              defm "FOR THE ARCADE ARCHIVE ", 0
 28+  32EF 54 48 45 20
 28+  32F3 41 52 43 41
 28+  32F7 44 45 20 41
 28+  32FB 52 43 48 49
 28+  32FF 56 45 20 00
 29+  3303 42 45 4C 56  msg_written_for_2:              defm "BELVEDERE MILL, STROUD", 0
 29+  3307 45 44 45 52
 29+  330B 45 20 4D 49
 29+  330F 4C 4C 2C 20
 29+  3313 53 54 52 4F
 29+  3317 55 44 00
 30+  331A
 31+  331A 20 20 47 41  msg_game_over:                defm        "  GAME    OVER  ",0
 31+  331E 4D 45 20 20
 31+  3322 20 20 4F 56
 31+  3326 45 52 20 20
 31+  332A 00
 32+  332B 20 20 20 20  msg_gameover_blank:        defm        "                 ",0
 32+  332F 20 20 20 20
 32+  3333 20 20 20 20
 32+  3337 20 20 20 20
 32+  333B 20 00
 33+  333D 20 20 20 20  msg_blank:                        defm        "                            ",0 ;use this label to also refer to a blank message
 33+  3341 20 20 20 20
 33+  3345 20 20 20 20
 33+  3349 20 20 20 20
 33+  334D 20 20 20 20
 33+  3351 20 20 20 20
 33+  3355 20 20 20 20
 33+  3359 00
 34+  335A 20 4C 45 56  msg_level_complete:              defm      " LEVEL COMPLETE ", 0
 34+  335E 45 4C 20 43
 34+  3362 4F 4D 50 4C
 34+  3366 45 54 45 20
 34+  336A 00
 35+  336B 4A 41 4D 4D  msg_jammy                        defm       "JAMMY DODGERS   0000",0
 35+  336F 59 20 44 4F
 35+  3373 44 47 45 52
 35+  3377 53 20 20 20
 35+  337B 30 30 30 30
 35+  337F 00
 36+  3380 4D 41 43 48  msg_machine                      defm       "MACHINES SAVED  0000" ,0
 36+  3384 49 4E 45 53
 36+  3388 20 53 41 56
 36+  338C 45 44 20 20
 36+  3390 30 30 30 30
 36+  3394 00
 37+  3395 4E 4F 20 4C  msg_lives_lost                     defm     "NO LIVES LOST   0000",0
 37+  3399 49 56 45 53
 37+  339D 20 4C 4F 53
 37+  33A1 54 20 20 20
 37+  33A5 30 30 30 30
 37+  33A9 00
 38+  33AA 54 49 4D 45  msg_time_bonus                     defm     "TIME BONUS      0000",0
 38+  33AE 20 42 4F 4E
 38+  33B2 55 53 20 20
 38+  33B6 20 20 20 20
 38+  33BA 30 30 30 30
 38+  33BE 00
 39+  33BF
 40+  33BF 44 45 53 49  msg_nigel:					defm  "DESIGNED BY NIGEL ALDERTON",0
 40+  33C3 47 4E 45 44
 40+  33C7 20 42 59 20
 40+  33CB 4E 49 47 45
 40+  33CF 4C 20 41 4C
 40+  33D3 44 45 52 54
 40+  33D7 4F 4E 00
 41+  33DA 50 52 45 53  msg_presents:				defm  "PRESENTS", 0
 41+  33DE 45 4E 54 53
 41+  33E2 00
 42+  33E3
 43+  33E3 47 55 49 44  msg_ins_1:					defm "GUIDE HEN HOUSE HARRY AROUND THE",0
 43+  33E7 45 20 48 45
 43+  33EB 4E 20 48 4F
 43+  33EF 55 53 45 20
 43+  33F3 48 41 52 52
 43+  33F7 59 20 41 52
 43+  33FB 4F 55 4E 44
 43+  33FF 20 54 48 45
 43+  3403 00
 44+  3404 53 43 52 45  msg_ins_2:					defm "SCREENS TO COLLECT A DOZEN EGGS!",0
 44+  3408 45 4E 53 20
 44+  340C 54 4F 20 43
 44+  3410 4F 4C 4C 45
 44+  3414 43 54 20 41
 44+  3418 20 44 4F 5A
 44+  341C 45 4E 20 45
 44+  3420 47 47 53 21
 44+  3424 00
 45+  3425
 46+  3425 48 49 47 48  msg_high_table:					defm "HIGH SCORE TABLE",0
 46+  3429 20 53 43 4F
 46+  342D 52 45 20 54
 46+  3431 41 42 4C 45
 46+  3435 00
 47+  3436
 48+  3436
 49+  3436 F5 F6 F7 00  msg_score:			defm $F5, $F6, $F7, 0
 50+  343A EB EC ED 00  msg_high:			defm $EB, $EC, $ED, 0
 51+  343E F8 F9 FA FB  msg_player:			defm $F8, $F9, $FA, $FB, $FC, 0
 51+  3442 FC 00
 52+  3444 E8 E9 EA 3A  msg_level:			defm $E8, $E9, $EA, $3A, $3A, $3A, 0
 52+  3448 3A 3A 00
 53+  344B E5 E6 E7 3A  msg_bonus:			defm $E5, $E6, $E7, $3A, $3A, $3A, $3A, $3A, 0
 53+  344F 3A 3A 3A 3A
 53+  3453 00
 54+  3454 FD FE FF 3A  msg_time:			defm $FD, $FE, $FF, $3A, $3A, $3A, $3A, 0
 54+  3458 3A 3A 3A 00
 55+  345C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 56+  345C              ; a list of message width of the screen (28 columns)
 57+  345C              ; to display
 58+  345C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 59+  345C 00           bot_mess_seconds:        defm 0        ; change every second
 60+  345D 20 20 20 20  bot_mess_1:              defm "    PRESS FIRE TO PLAY    ",0
 60+  3461 50 52 45 53
 60+  3465 53 20 46 49
 60+  3469 52 45 20 54
 60+  346D 4F 20 50 4C
 60+  3471 41 59 20 20
 60+  3475 20 20 00
 61+  3478              bot_mess_2:
 62+  3478 41 52 43 41                           defm "ARCADE VERSION BY ARLASOFT",0
 62+  347C 44 45 20 56
 62+  3480 45 52 53 49
 62+  3484 4F 4E 20 42
 62+  3488 59 20 41 52
 62+  348C 4C 41 53 4F
 62+  3490 46 54 00
 63+  3493                                             ; defm    copyright_symbol
 64+  3493                                             ; defm        " ARLASOFT ",0
 65+  3493
 66+  3493                                                      ;                 0123456789012345678901234567 - for alignment purposes
 67+  3493              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 68+  3493              ; this is the addressess of the messages to display (above),
 69+  3493              ; the code looks for an address of zero to restart the list
 70+  3493              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 71+  3493 5D 34 3D 33  bottom_list:                defw        bot_mess_1,msg_blank,0
 71+  3497 00 00
 72+  3499
# file closed: scripts/data/text.asm
 60   3499                  include "scripts/gameplay/harry/harry.asm"
# file opened: scripts/gameplay/harry/harry.asm
  1+  3499
  2+  3499
  3+  3499              harry_initialise:
  4+  3499
  5+  3499 3E FF        	ld a, 255
  6+  349B 32 26 4D     	ld (harry_state), a
  7+  349E
  8+  349E CD 13 35     	call calculate_offsets
  9+  34A1
 10+  34A1 CD 42 38     	call harry_make_idle
 11+  34A4
 12+  34A4 3E 01        	ld a, 1
 13+  34A6 32 2A 4D     	ld (harry_face_right), a
 14+  34A9
 15+  34A9 3E 00        	ld a, 0
 16+  34AB 32 29 4D     	ld (harry_special_frame), a
 17+  34AE 32 46 4D     	ld (blocked_left), a
 18+  34B1
 19+  34B1
 20+  34B1 C9           	ret
 21+  34B2
 22+  34B2
 23+  34B2
 24+  34B2              harry_update:
 25+  34B2
 26+  34B2
 27+  34B2
 28+  34B2 DD 21 B9 4C  	ld ix, sprite0
 29+  34B6
 30+  34B6
 31+  34B6
 32+  34B6 CD 13 35     	call calculate_offsets
 33+  34B9 CD F2 34     	call adjust_gravity
 34+  34BC CD 2B 0C     	call checkLift
 35+  34BF CD 15 36     	call checkCollisions
 36+  34C2
 37+  34C2 3A 09 4D     	ld a,(mode)                                                                        ;get mode
 38+  34C5 FE 01            cp title_mode                                                                ;is it title mode
 39+  34C7 CA D5 34         jp z,skipControls
 40+  34CA
 41+  34CA FE 08            cp life_lost
 42+  34CC CA D5 34         jp z, skipControls
 43+  34CF
 44+  34CF
 45+  34CF CD 92 39         call checkJoystick
 46+  34D2 CD ED 39         call checkFire
 47+  34D5
 48+  34D5
 49+  34D5              skipControls:
 50+  34D5
 51+  34D5 CD FD 34     	 call checkOffScreen
 52+  34D8 CD 4A 35     	call handle_state
 53+  34DB
 54+  34DB DD 21 B9 4C  	ld ix, sprite0
 55+  34DF
 56+  34DF CD 30 3C     	call update_frame
 57+  34E2 CD 74 3C     	call calculate_frame
 58+  34E5              	;call check_invincible
 59+  34E5
 60+  34E5
 61+  34E5
 62+  34E5 DD 7E 10     	ld a, (ix +spr_x)
 63+  34E8 32 08 4C     	ld (harry_sprite_y), a
 64+  34EB
 65+  34EB DD 7E 11     	ld a, (ix + spr_y)
 66+  34EE 32 09 4C     	ld (harry_sprite_x), a
 67+  34F1
 68+  34F1 C9           	ret
 69+  34F2
 70+  34F2              adjust_gravity:
 71+  34F2
 72+  34F2 3A 82 4C     	ld a, (gravity)
 73+  34F5 FE 14        	cp max_gravity
 74+  34F7 C8           	ret z
 75+  34F8
 76+  34F8 3C           	inc a
 77+  34F9 32 82 4C     	ld (gravity), a
 78+  34FC
 79+  34FC C9           	ret
 80+  34FD
 81+  34FD
 82+  34FD              x_adjust = -2
 83+  34FD              y_adjust = 1
 84+  34FD              max_gravity = 20
 85+  34FD
 86+  34FD
 87+  34FD
 88+  34FD
 89+  34FD              checkOffScreen:
 90+  34FD
 91+  34FD DD 21 B9 4C  	ld ix, sprite0
 92+  3501
 93+  3501 DD 7E 10     	ld a, (ix + spr_x)
 94+  3504 FE 3E        	cp 62
 95+  3506 D2 0C 35     	jp nc, notOffTop
 96+  3509
 97+  3509 C3 7C 07     	jp lose_set
 98+  350C
 99+  350C              notOffTop:
100+  350C
101+  350C FE FA        	cp 250
102+  350E D8           	ret c
103+  350F
104+  350F
105+  350F
106+  350F C3 7C 07     	jp lose_set
107+  3512
108+  3512
109+  3512
110+  3512
111+  3512 C9           	ret
112+  3513
113+  3513              calculate_offsets:
114+  3513
115+  3513 DD 7E 10     	ld a, (ix+spr_x)
116+  3516 C6 FE        	add x_adjust
117+  3518 CB 3F        	srl a
118+  351A CB 3F        	srl a
119+  351C CB 3F        	srl a
120+  351E CB 27        	sla a
121+  3520 CB 27        	sla a
122+  3522 CB 27        	sla a
123+  3524 47           	ld b, a
124+  3525 DD 7E 10     	ld a, (ix+spr_x)
125+  3528 C6 FE        	add x_adjust
126+  352A 90           	sub b
127+  352B 32 21 4D     	ld (y_pos_offset), a
128+  352E
129+  352E
130+  352E DD 7E 11     	ld a, (ix+spr_y)
131+  3531 C6 01        	add y_adjust
132+  3533 CB 3F        	srl a
133+  3535 CB 3F        	srl a
134+  3537 CB 3F        	srl a
135+  3539 CB 27        	sla a
136+  353B CB 27        	sla a
137+  353D CB 27        	sla a
138+  353F 47           	ld b, a
139+  3540 DD 7E 11     	ld a, (ix+spr_y)
140+  3543 C6 01        	add y_adjust
141+  3545 90           	sub b
142+  3546 32 20 4D     	ld (x_pos_offset), a
143+  3549
144+  3549
145+  3549 C9           	ret
146+  354A
147+  354A
148+  354A
149+  354A
150+  354A              handle_state:
151+  354A
152+  354A
153+  354A 3A 26 4D     	ld a, (harry_state)
154+  354D FE 00        	cp STATE_IDLE
155+  354F CA 14 36     	jp z, harry_idle
156+  3552
157+  3552 FE 03        	cp STATE_FALLING
158+  3554 CA B0 35     	jp z, harry_falling
159+  3557
160+  3557 FE 02        	cp STATE_JUMPING
161+  3559 CA 85 35     	jp z, harry_jumping
162+  355C
163+  355C FE 01        	cp STATE_WALKING
164+  355E CA 73 35     	jp z, harry_walking
165+  3561
166+  3561 FE 04        	cp STATE_CLIMBING
167+  3563 CA 67 35     	jp z, harry_climbing
168+  3566
169+  3566
170+  3566 C9           	ret
171+  3567
172+  3567
173+  3567
174+  3567              harry_climbing:
175+  3567
176+  3567 3A A5 4C     	ld a, (frame_counter)
177+  356A E6 03        	and %00000011
178+  356C FE 02        	cp 2
179+  356E C0           	ret nz
180+  356F CD 84 06     	call sfx_climb
181+  3572
182+  3572
183+  3572 C9           	ret
184+  3573
185+  3573              harry_walking:
186+  3573
187+  3573 3A 09 4D     	ld a, (mode)
188+  3576 FE 02        	cp game_mode
189+  3578 C0           	ret nz
190+  3579
191+  3579 3A A5 4C     	ld a, (frame_counter)
192+  357C E6 03        	and %00000011
193+  357E FE 01        	cp 1
194+  3580 C0           	ret nz
195+  3581 CD 3C 06     	call sfx_walk
196+  3584
197+  3584
198+  3584 C9           	ret
199+  3585
200+  3585
201+  3585              harry_jumping:
202+  3585
203+  3585              	;ld b, gravity_force
204+  3585
205+  3585              	;ld a, (y_speed_frac)
206+  3585              	;sub b
207+  3585              	;ld (y_speed_frac), a
208+  3585
209+  3585              	;ld a, (y_speed_pixel)
210+  3585              	;sbc 0
211+  3585              	;ld (y_speed_pixel), a
212+  3585              	;jp p, notFallingNow
213+  3585
214+  3585              	;call harry_make_fall
215+  3585              	;ret
216+  3585
217+  3585              notFallingNow:
218+  3585
219+  3585 3A 1C 4D     	ld a, (y_speed_pixel)
220+  3588 4F               ld c, a
221+  3589
222+  3589 3A 1D 4D     	ld a, (y_speed_frac)
223+  358C 47               ld b, a
224+  358D 3A 1E 4D         ld a, (y_pos_frac)
225+  3590 80               add b
226+  3591 32 1E 4D         ld (y_pos_frac), a
227+  3594
228+  3594 3A C9 4C         ld a, (sprite0+spr_x)
229+  3597 47               ld b, a
230+  3598 99               sbc a, c
231+  3599 32 C9 4C         ld (sprite0+spr_x), a
232+  359C 90               sub b
233+  359D ED 44            neg
234+  359F 47               ld b, a
235+  35A0
236+  35A0 3A 84 4C         ld a, (jump_counter)
237+  35A3 80               add a, b
238+  35A4 32 84 4C         ld (jump_counter), a
239+  35A7 FE 0B            cp jump_height
240+  35A9 DA AF 35         jp c, noFall
241+  35AC
242+  35AC C3 19 39         jp harry_make_fall
243+  35AF
244+  35AF              noFall:
245+  35AF
246+  35AF
247+  35AF C9           	ret
248+  35B0
249+  35B0
250+  35B0
251+  35B0              harry_falling:
252+  35B0
253+  35B0 3A 83 4C     	ld a, (gravity_applies)
254+  35B3 FE 00        	cp 0
255+  35B5 CA E2 35     	jp z, notMaxFall
256+  35B8
257+  35B8 3A 82 4C     	ld a, (gravity)
258+  35BB 47           	ld b, a
259+  35BC
260+  35BC 3A 1D 4D     	ld a, (y_speed_frac)
261+  35BF 80           	add a, b
262+  35C0 32 1D 4D     	ld (y_speed_frac), a
263+  35C3
264+  35C3 3A 1C 4D     	ld a, (y_speed_pixel)
265+  35C6 CE 00        	adc 0
266+  35C8 32 1C 4D     	ld (y_speed_pixel), a
267+  35CB FE 00        	cp 0
268+  35CD CA E2 35     	jp z, notMaxFall
269+  35D0
270+  35D0 3A 1D 4D     	ld a, (y_speed_frac)
271+  35D3 FE 64        	cp 100
272+  35D5 DA E2 35     	jp c, notMaxFall
273+  35D8
274+  35D8 3E 01        	ld a, 1
275+  35DA 32 1C 4D     	ld (y_speed_pixel), a
276+  35DD
277+  35DD 3E 64        	ld a, 100
278+  35DF 32 1D 4D     	ld (y_speed_frac), a
279+  35E2
280+  35E2              notMaxFall:
281+  35E2
282+  35E2 3A 1C 4D     	ld a, (y_speed_pixel)
283+  35E5 4F               ld c, a
284+  35E6
285+  35E6 3A 1D 4D     	ld a, (y_speed_frac)
286+  35E9 47               ld b, a
287+  35EA 3A 1E 4D         ld a, (y_pos_frac)
288+  35ED 80               add b
289+  35EE 32 1E 4D         ld (y_pos_frac), a
290+  35F1
291+  35F1
292+  35F1 3A C9 4C         ld a, (sprite0+spr_x)
293+  35F4 47               ld b, a
294+  35F5 89               adc a, c
295+  35F6 32 C9 4C         ld (sprite0+spr_x), a
296+  35F9 90               sub b
297+  35FA 47               ld b, a
298+  35FB
299+  35FB 3A 83 4C         ld a, (gravity_applies)
300+  35FE FE 01            cp 1
301+  3600 CA 14 36         jp z, noStop
302+  3603
303+  3603 3A 84 4C         ld a, (jump_counter)
304+  3606 80               add a, b
305+  3607 32 84 4C         ld (jump_counter), a
306+  360A FE 0B            cp jump_height
307+  360C DA 14 36         jp c, noStop
308+  360F
309+  360F 3E 01            ld a, 1
310+  3611
311+  3611 32 83 4C         ld (gravity_applies), a
312+  3614
313+  3614              	;call checkFire
314+  3614
315+  3614              noStop:
316+  3614
317+  3614
318+  3614              harry_idle:
319+  3614
320+  3614
321+  3614
322+  3614 C9           	ret
# file closed: scripts/gameplay/harry/harry.asm
 61   3615                  include "scripts/gameplay/harry/harry_collision.asm"
# file opened: scripts/gameplay/harry/harry_collision.asm
  1+  3615
  2+  3615              checkCollisions:
  3+  3615
  4+  3615 DD 21 B9 4C  	ld ix, sprite0
  5+  3619
  6+  3619 CD 90 21     	call convert_sprite_to_tile
  7+  361C
  8+  361C
  9+  361C 22 4A 4D     	ld (harry_tile_address), hl
 10+  361F
 11+  361F 3A 18 4D     	ld a, (temp_byte)
 12+  3622 32 39 4D     	ld (harry_tile_x), a
 13+  3625
 14+  3625 3A 19 4D     	ld a, (temp_byte2)
 15+  3628 32 38 4D     	ld (harry_tile_y), a
 16+  362B
 17+  362B DD 21 B9 4C  	ld ix, sprite0
 18+  362F
 19+  362F
 20+  362F
 21+  362F CD 9E 3C     	call checkOverLadderL
 22+  3632 CD C8 3C     	call checkOverLadderR
 23+  3635 CD E9 3C     	call checkLadderAbove
 24+  3638 CD 00 3D     	call checkLadderTwoAbove
 25+  363B CD 17 3D     	call checkLadderBelow
 26+  363E
 27+  363E CD 7F 3D     	call checkFloor
 28+  3641 CD 31 3D     	call checkFootLadder
 29+  3644 CD FA 36     	call checkCanFall
 30+  3647 CD 20 37     	call checkStartFalling
 31+  364A
 32+  364A
 33+  364A
 34+  364A CD F1 3D     	call checkCollisionLeft
 35+  364D CD 35 3E     	call checkBounceLeft
 36+  3650
 37+  3650 CD 61 3E     	call checkBounceRight
 38+  3653 CD 85 3E     	call checkCollisionRight
 39+  3656 CD 5F 37     	call checkLand
 40+  3659
 41+  3659 CD 60 36     	call checkEgg
 42+  365C CD B1 36     	call checkCorn
 43+  365F
 44+  365F              	;call displayDebug
 45+  365F
 46+  365F
 47+  365F
 48+  365F C9           	ret
 49+  3660
 50+  3660
 51+  3660
 52+  3660              checkEgg:
 53+  3660
 54+  3660 2A 4A 4D     	ld hl, (harry_tile_address)
 55+  3663
 56+  3663 CD D2 20     	call moveTileUpHL
 57+  3666
 58+  3666 7E           	ld a, (hl)
 59+  3667 FE E3        	cp tile_egg
 60+  3669 CA 91 36     	jp z, gotEgg
 61+  366C
 62+  366C CD C9 20     	call moveTileDownHL
 63+  366F
 64+  366F
 65+  366F 7E           	ld a, (hl)
 66+  3670 FE E3        	cp tile_egg
 67+  3672 CA 91 36     	jp z, gotEgg
 68+  3675
 69+  3675 2B           	dec hl
 70+  3676 7E           	ld a, (hl)
 71+  3677 FE E3        	cp tile_egg
 72+  3679 C2 85 36     	jp nz, notEggLeft
 73+  367C
 74+  367C 3A 20 4D     	ld a, (x_pos_offset)
 75+  367F FE 06        	cp 6
 76+  3681 D8           	ret c
 77+  3682
 78+  3682 C3 91 36     	jp gotEgg
 79+  3685
 80+  3685              notEggLeft:
 81+  3685
 82+  3685
 83+  3685 23           	inc hl
 84+  3686 23           	inc hl
 85+  3687 7E           	ld a, (hl)
 86+  3688 FE E3        	cp tile_egg
 87+  368A C0           	ret nz
 88+  368B
 89+  368B 3A 20 4D     	ld a, (x_pos_offset)
 90+  368E FE 04        	cp 4
 91+  3690 D0           	ret nc
 92+  3691
 93+  3691              gotEgg:
 94+  3691
 95+  3691 3E 40        	ld a, blank_tile
 96+  3693 77           	ld (hl), a
 97+  3694
 98+  3694 3E 50        	ld a, $50
 99+  3696 CD 00 20     	call score_points
100+  3699
101+  3699 3E 50        	ld a, $50
102+  369B CD 00 20     	call score_points
103+  369E
104+  369E CD 64 06     	call sfx_got_egg
105+  36A1
106+  36A1              	// SCORE POINTS
107+  36A1
108+  36A1 3A 7E 4C     	ld a, (eggs_remaining)
109+  36A4 3D           	dec a
110+  36A5 32 7E 4C     	ld (eggs_remaining), a
111+  36A8              	;ld a, 0
112+  36A8 FE 00        	cp 0
113+  36AA C0           	ret nz
114+  36AB
115+  36AB 3E 01        	ld a, 1
116+  36AD 32 13 4D     	ld (level_complete), a
117+  36B0
118+  36B0
119+  36B0
120+  36B0
121+  36B0 C9           	ret
122+  36B1
123+  36B1
124+  36B1              checkCorn:
125+  36B1
126+  36B1 2A 4A 4D     	ld hl, (harry_tile_address)
127+  36B4 7E           	ld a, (hl)
128+  36B5 FE F3        	cp tile_seed
129+  36B7 CA E2 36     	jp z, gotCorn
130+  36BA
131+  36BA CD D2 20     	call moveTileUpHL
132+  36BD 7E           	ld a, (hl)
133+  36BE FE F3        	cp tile_seed
134+  36C0 CA E2 36     	jp z, gotCorn
135+  36C3
136+  36C3 CD C9 20     	call moveTileDownHL
137+  36C6
138+  36C6 2B           	dec hl
139+  36C7 7E           	ld a, (hl)
140+  36C8 FE F3        	cp tile_seed
141+  36CA C2 D6 36     	jp nz, notCornLeft
142+  36CD
143+  36CD 3A 20 4D     	ld a, (x_pos_offset)
144+  36D0 FE 04        	cp 4
145+  36D2 D8           	ret c
146+  36D3
147+  36D3 C3 E2 36     	jp gotCorn
148+  36D6
149+  36D6              notCornLeft:
150+  36D6
151+  36D6
152+  36D6 23           	inc hl
153+  36D7 23           	inc hl
154+  36D8 7E           	ld a, (hl)
155+  36D9 FE F3        	cp tile_seed
156+  36DB C0           	ret nz
157+  36DC
158+  36DC 3A 20 4D     	ld a, (x_pos_offset)
159+  36DF FE 04        	cp 4
160+  36E1 D0           	ret nc
161+  36E2
162+  36E2              gotCorn:
163+  36E2
164+  36E2 3E 40        	ld a, blank_tile
165+  36E4 77           	ld (hl), a
166+  36E5
167+  36E5 3E F0        	ld a, 240
168+  36E7 32 8B 4C     	ld (stop_timer), a
169+  36EA
170+  36EA 3E 50        	ld a, $50
171+  36EC CD 00 20     	call score_points
172+  36EF
173+  36EF CD 54 06     	call sfx_got_corn
174+  36F2
175+  36F2
176+  36F2              	;ld a, $100
177+  36F2              	// SCORE POINTS
178+  36F2
179+  36F2
180+  36F2 C9           	ret
181+  36F3
182+  36F3
183+  36F3
184+  36F3
185+  36F3              checkBlockingTile:
186+  36F3
187+  36F3 7E           	ld a, (hl)
188+  36F4              	;ld de, tile_ram_start + row_0  + column_10
189+  36F4              ;	ld (de), a
190+  36F4
191+  36F4              checkBlockRight:
192+  36F4
193+  36F4 FE F0        	cp tile_platform
194+  36F6 C8           	ret z
195+  36F7
196+  36F7
197+  36F7
198+  36F7              NoSolidLeft:
199+  36F7
200+  36F7 FE FF        	cp 255
201+  36F9 C0           	ret nz
202+  36FA
203+  36FA
204+  36FA
205+  36FA              checkCanFall:
206+  36FA
207+  36FA 3A 3B 4D     	ld a, (harry_on_lift)
208+  36FD FE 01        	cp 1
209+  36FF CA 1A 37     	jp z, noAlready
210+  3702
211+  3702 3A 26 4D     	ld a, (harry_state)
212+  3705 FE 03        	cp STATE_FALLING
213+  3707 CA 1A 37     	jp z, noAlready
214+  370A
215+  370A 3A 3D 4D     	ld a, (harry_right_foot_block)
216+  370D 47           	ld b, a
217+  370E 3A 45 4D     	ld a, (blocked_below)
218+  3711 80           	add b
219+  3712 47           	ld b, a
220+  3713 3A 40 4D     	ld a, (harry_land_ladder)
221+  3716 80           	add b
222+  3717 FE 00        	cp 0
223+  3719 C8           	ret z
224+  371A
225+  371A              noAlready:
226+  371A 3E 00        	ld a, 0
227+  371C 32 3E 4D     	ld (harry_can_fall), a
228+  371F
229+  371F C9           	ret
230+  3720
231+  3720
232+  3720              checkStartFalling:
233+  3720
234+  3720 3A 26 4D     	ld a, (harry_state)
235+  3723 FE 03        	cp STATE_FALLING
236+  3725 C8           	ret z
237+  3726
238+  3726 FE 02        	cp STATE_JUMPING
239+  3728 C8           	ret z
240+  3729
241+  3729 FE 04        	cp STATE_CLIMBING
242+  372B C8           	ret z
243+  372C
244+  372C 3A 2F 4D     	ld a, (harry_over_ladder)
245+  372F FE 01        	cp 1
246+  3731 C8           	ret z
247+  3732
248+  3732 3A 3E 4D     	ld a, (harry_can_fall)
249+  3735 FE 00        	cp 0
250+  3737 C8           	ret z
251+  3738
252+  3738 3A 26 4D     	ld a, (harry_state)
253+  373B FE 01        	cp STATE_WALKING
254+  373D C2 5B 37     	jp nz, notWalking
255+  3740
256+  3740 3A 2A 4D     	ld a, (harry_face_right)
257+  3743 FE 00        	cp 0
258+  3745 CA 53 37     	jp z, fallLeft
259+  3748
260+  3748              fallRight:
261+  3748
262+  3748 DD 7E 11     	ld a, (ix+spr_y)
263+  374B D6 02        	sub 2
264+  374D DD 77 11     	ld (ix+spr_y), a
265+  3750
266+  3750 C3 5B 37     	jp notWalking
267+  3753
268+  3753              fallLeft:
269+  3753
270+  3753
271+  3753 DD 7E 11     	ld a, (ix+spr_y)
272+  3756 C6 02        	add 2
273+  3758 DD 77 11     	ld (ix+spr_y), a
274+  375B
275+  375B              notWalking:
276+  375B
277+  375B
278+  375B C3 19 39     	jp harry_make_fall
279+  375E
280+  375E
281+  375E
282+  375E
283+  375E C9           	ret
284+  375F
285+  375F              checkLand:
286+  375F
287+  375F 3A 26 4D     	ld a, (harry_state)
288+  3762 FE 03        	cp STATE_FALLING
289+  3764 CA 76 37     	jp z, canLand
290+  3767
291+  3767 FE 00        	cp STATE_IDLE
292+  3769 C8           	ret z
293+  376A
294+  376A FE 02        	cp STATE_JUMPING
295+  376C CA 70 37     	jp z, canLandUpper
296+  376F
297+  376F C9           	ret
298+  3770
299+  3770              canLandUpper:
300+  3770
301+  3770 3A 84 4C     	ld a, (jump_counter)
302+  3773 FE 04        	cp 4
303+  3775 D8           	ret c
304+  3776
305+  3776              canLand:
306+  3776
307+  3776 3A 40 4D     	ld a, (harry_land_ladder)
308+  3779 FE 01        	cp 1
309+  377B CA A3 37     	jp z, checkSnapPoint
310+  377E
311+  377E 3A 2F 4D     	ld a, (harry_over_ladder)
312+  3781 FE 01        	cp 1
313+  3783 C2 9D 37     	jp nz, noLadderLand
314+  3786
315+  3786 3A 37 4D     	ld a, (harry_exit_right)
316+  3789 47           	ld b, a
317+  378A 3A 36 4D     	ld a, (harry_exit_left)
318+  378D 80           	add b
319+  378E FE 02        	cp 2
320+  3790 CA 9D 37     	jp z, noLadderLand
321+  3793
322+  3793
323+  3793 3A 26 4D     	ld a, (harry_state)
324+  3796 FE 02        	cp STATE_JUMPING
325+  3798 C8           	ret z
326+  3799
327+  3799 C9           	ret
328+  379A C3 B1 37     	jp checkRightFoot2
329+  379D
330+  379D              noLadderLand:
331+  379D
332+  379D
333+  379D 3A 3E 4D     	ld a, (harry_can_fall)
334+  37A0 FE 01        	cp 1
335+  37A2 C8           	ret z
336+  37A3
337+  37A3              checkSnapPoint:
338+  37A3
339+  37A3 3A 3F 4D     	ld a, (harry_snap_ground)
340+  37A6 FE 00        	cp 0
341+  37A8 C8           	ret z
342+  37A9
343+  37A9 3A 45 4D     	ld a, (blocked_below)
344+  37AC FE 01        	cp 1
345+  37AE CA C5 37     	jp z, stopFall
346+  37B1
347+  37B1              checkRightFoot2:
348+  37B1
349+  37B1
350+  37B1 3A 3F 4D     	ld a, (harry_snap_ground)
351+  37B4 FE 00        	cp 0
352+  37B6 C8           	ret z
353+  37B7
354+  37B7 3A 40 4D     	ld a, (harry_land_ladder)
355+  37BA FE 01        	cp 1
356+  37BC C0           	ret nz
357+  37BD
358+  37BD 3A 3D 4D     	ld a, (harry_right_foot_block)
359+  37C0 FE 01        	cp 1
360+  37C2 CA C5 37     	jp z, stopFall
361+  37C5
362+  37C5
363+  37C5
364+  37C5
365+  37C5
366+  37C5              stopFall:
367+  37C5
368+  37C5
369+  37C5 C3 42 38     	jp harry_make_idle
370+  37C8
371+  37C8
372+  37C8
373+  37C8
374+  37C8
375+  37C8
376+  37C8 C9           	ret
377+  37C9
378+  37C9
379+  37C9
380+  37C9
381+  37C9              displayDebug:
382+  37C9
383+  37C9
384+  37C9
385+  37C9
386+  37C9 21 80 41     	ld hl, tile_ram_start + row_0 + column_17
387+  37CC
388+  37CC
389+  37CC              ;	inc hl
390+  37CC 3A 34 4D     	ld a, (harry_ladder_above)
391+  37CF 77           	ld (hl), a
392+  37D0
393+  37D0 23           	inc hl
394+  37D1 3A 2F 4D     	ld a, (harry_over_ladder)
395+  37D4 77           	ld (hl), a
396+  37D5
397+  37D5 23           	inc hl
398+  37D6 3A 33 4D     	ld a, (harry_ladder_below)
399+  37D9 77           	ld (hl), a
400+  37DA
401+  37DA 23           	inc hl
402+  37DB 3A 30 4D     	ld a, (harry_can_climb_ladder)
403+  37DE 77           	ld (hl), a
404+  37DF
405+  37DF 23           	inc hl
406+  37E0 3A 35 4D     	ld a, (harry_ladder_two_above)
407+  37E3 77           	ld (hl), a
408+  37E4
409+  37E4
410+  37E4 2B           	dec hl
411+  37E5 2B           	dec hl
412+  37E6 2B           	dec hl
413+  37E7 2B           	dec hl
414+  37E8
415+  37E8
416+  37E8
417+  37E8 CD C9 20     	call moveTileDownHL
418+  37EB
419+  37EB
420+  37EB 3A 45 4D     	ld a, (blocked_below)
421+  37EE 77           	ld (hl), a
422+  37EF
423+  37EF
424+  37EF 23           	inc hl
425+  37F0 3A 3C 4D     	ld a, (harry_left_foot_block)
426+  37F3 77           	ld (hl), a
427+  37F4
428+  37F4 23           	inc hl
429+  37F5 3A 3D 4D     	ld a, (harry_right_foot_block)
430+  37F8 77           	ld (hl), a
431+  37F9
432+  37F9
433+  37F9 23           	inc hl
434+  37FA 3A 3F 4D     	ld a, (harry_snap_ground)
435+  37FD 77           	ld (hl), a
436+  37FE
437+  37FE
438+  37FE 23           	inc hl
439+  37FF 3A 3E 4D     	ld a, (harry_can_fall)
440+  3802 77           	ld (hl), a
441+  3803
442+  3803
443+  3803
444+  3803 2B           	dec hl
445+  3804 2B           	dec hl
446+  3805 2B           	dec hl
447+  3806 2B           	dec hl
448+  3807
449+  3807
450+  3807
451+  3807 CD C9 20     	call moveTileDownHL
452+  380A
453+  380A
454+  380A 3A 20 4D     	ld a, (x_pos_offset)
455+  380D 77           	ld (hl), a
456+  380E
457+  380E 23           	inc hl
458+  380F 3A 21 4D     	ld a, (y_pos_offset)
459+  3812 77           	ld (hl), a
460+  3813
461+  3813
462+  3813 23           	inc hl
463+  3814 3A 36 4D     	ld a, (harry_exit_left)
464+  3817 77           	ld (hl), a
465+  3818
466+  3818 23           	inc hl
467+  3819 3A 37 4D     	ld a, (harry_exit_right)
468+  381C 77           	ld (hl), a
469+  381D
470+  381D 23           	inc hl
471+  381E 3A 40 4D     	ld a, (harry_land_ladder)
472+  3821 77           	ld (hl), a
473+  3822
474+  3822
475+  3822 2B           	dec hl
476+  3823 2B           	dec hl
477+  3824 2B           	dec hl
478+  3825 2B           	dec hl
479+  3826
480+  3826
481+  3826 CD C9 20     	call moveTileDownHL
482+  3829
483+  3829
484+  3829 3A 46 4D     	ld a, (blocked_left)
485+  382C 77           	ld (hl), a
486+  382D
487+  382D 23           	inc hl
488+  382E 3A 47 4D     	ld a, (blocked_right)
489+  3831 77           	ld (hl), a
490+  3832
491+  3832
492+  3832 23           	inc hl
493+  3833 3A 42 4D     	ld a, (blocked_jump_left)
494+  3836 77           	ld (hl), a
495+  3837
496+  3837 23           	inc hl
497+  3838 3A 41 4D     	ld a, (blocked_jump_right)
498+  383B 77           	ld (hl), a
499+  383C
500+  383C 23           	inc hl
501+  383D 3A 40 4D     	ld a, (harry_land_ladder)
502+  3840 77           	ld (hl), a
503+  3841
504+  3841
505+  3841
506+  3841 C9           	ret
# file closed: scripts/gameplay/harry/harry_collision.asm
 62   3842                  include "scripts/gameplay/harry/harry_new_state.asm"
# file opened: scripts/gameplay/harry/harry_new_state.asm
  1+  3842              harry_make_idle:
  2+  3842
  3+  3842
  4+  3842 32 26 4D     	ld (harry_state), a
  5+  3845 FE 00        	cp STATE_IDLE
  6+  3847              	;;ret z
  7+  3847
  8+  3847 3E 00        	ld a, STATE_IDLE
  9+  3849 32 26 4D     	ld (harry_state), a
 10+  384C
 11+  384C 3E 00        	ld a, harry_idle_frame
 12+  384E 32 27 4D     	ld (harry_start_frame), a
 13+  3851
 14+  3851 3E 00        	ld a, 0
 15+  3853 32 28 4D     	ld (harry_frame), a
 16+  3856 32 1D 4D     	ld (y_speed_frac), a
 17+  3859 32 1C 4D     	ld (y_speed_pixel), a
 18+  385C 32 29 4D     	ld (harry_special_frame), a
 19+  385F
 20+  385F 3E 10        	ld a, 16
 21+  3861 32 2C 4D     	ld (harry_frame_time), a
 22+  3864 32 2B 4D     	ld (harry_frame_timer), a
 23+  3867
 24+  3867 3E 00        	ld a, 0
 25+  3869 32 2D 4D     	ld (harry_max_frame), a
 26+  386C 32 2E 4D     	ld (harry_frame_loop), a
 27+  386F 32 8A 4C     	ld (jump_direction), a
 28+  3872
 29+  3872 3A 3B 4D     	ld a, (harry_on_lift)
 30+  3875 FE 01        	cp 1
 31+  3877 C8           	ret z
 32+  3878
 33+  3878 3A 21 4D     	ld a, (y_pos_offset)
 34+  387B D6 04        	sub 4
 35+  387D 47           	ld b, a
 36+  387E DD 7E 10     	ld a, (ix + spr_x)
 37+  3881 90           	sub b
 38+  3882 DD 77 10     	ld (ix + spr_x), a
 39+  3885
 40+  3885 C9           	ret
 41+  3886
 42+  3886
 43+  3886              harry_make_climb:
 44+  3886
 45+  3886
 46+  3886
 47+  3886 3E 04        	ld a, STATE_CLIMBING
 48+  3888 32 26 4D     	ld (harry_state), a
 49+  388B
 50+  388B 3E 02        	ld a, harry_climb_frame
 51+  388D 32 27 4D     	ld (harry_start_frame), a
 52+  3890
 53+  3890 3E 00        	ld a, 0
 54+  3892 32 28 4D     	ld (harry_frame), a
 55+  3895 32 29 4D     	ld (harry_special_frame), a
 56+  3898
 57+  3898
 58+  3898 3E 01        	ld a, 1
 59+  389A 32 2C 4D     	ld (harry_frame_time), a
 60+  389D 32 2B 4D     	ld (harry_frame_timer), a
 61+  38A0 32 2E 4D     	ld (harry_frame_loop), a
 62+  38A3
 63+  38A3 3E 03        	ld a, 3
 64+  38A5 32 2D 4D     	ld (harry_max_frame), a
 65+  38A8
 66+  38A8 3A 31 4D     	ld a, (ladder_join_x)
 67+  38AB DD 77 11     	ld (ix + spr_y), a
 68+  38AE
 69+  38AE
 70+  38AE C9           	ret
 71+  38AF
 72+  38AF
 73+  38AF              harry_make_jump:
 74+  38AF
 75+  38AF
 76+  38AF CD 4C 06     	call sfx_jump
 77+  38B2
 78+  38B2              harry_jump_no_sound:
 79+  38B2
 80+  38B2
 81+  38B2 3E 01        	ld a, 1
 82+  38B4 32 9C 4C     	ld (jump_climb_straight), a
 83+  38B7
 84+  38B7 3A 26 4D     	ld a, (harry_state)
 85+  38BA FE 04        	cp STATE_CLIMBING
 86+  38BC C2 C7 38     	jp nz, notLadderJump
 87+  38BF
 88+  38BF
 89+  38BF 3A 89 4C     	ld a, (possible_jump_direction)
 90+  38C2 FE 00        	cp 0
 91+  38C4 CA D1 38     	jp z, noFrameChange
 92+  38C7
 93+  38C7
 94+  38C7              notLadderJump:
 95+  38C7
 96+  38C7
 97+  38C7 3E 00        	ld a, 0
 98+  38C9 32 9C 4C     	ld (jump_climb_straight), a
 99+  38CC
100+  38CC 3E 01        	ld a, harry_jump_frame
101+  38CE 32 27 4D     	ld (harry_start_frame), a
102+  38D1
103+  38D1              noFrameChange:
104+  38D1
105+  38D1 3E 02        	ld a, STATE_JUMPING
106+  38D3 32 26 4D     	ld (harry_state), a
107+  38D6
108+  38D6
109+  38D6
110+  38D6 3E 00        	ld a, 0
111+  38D8 32 28 4D     	ld (harry_frame), a
112+  38DB
113+  38DB 32 1E 4D     	ld (y_pos_frac), a
114+  38DE 32 2E 4D     	ld (harry_frame_loop), a
115+  38E1 32 29 4D     	ld (harry_special_frame), a
116+  38E4 32 84 4C     	ld (jump_counter), a
117+  38E7 32 1F 4D     	ld (x_pos_frac), a
118+  38EA 32 83 4C     	ld (gravity_applies), a
119+  38ED
120+  38ED 3A 89 4C     	ld a, (possible_jump_direction)
121+  38F0 21 02 43     	ld hl, tile_ram_start + column_5 + row_2
122+  38F3              	;ld (hl), a
123+  38F3 32 8A 4C     	ld (jump_direction), a
124+  38F6
125+  38F6 3E FF        	ld a, 255
126+  38F8 32 2C 4D     	ld (harry_frame_time), a
127+  38FB 32 2B 4D     	ld (harry_frame_timer), a
128+  38FE
129+  38FE 3E 00        	ld a, 0
130+  3900 32 2D 4D     	ld (harry_max_frame), a
131+  3903
132+  3903 3E 00        	ld a, 0
133+  3905 32 1C 4D     	ld (y_speed_pixel), a
134+  3908
135+  3908 3E 78        	ld a, 120
136+  390A 32 1D 4D     	ld (y_speed_frac), a
137+  390D
138+  390D 3A 3B 4D     	ld a, (harry_on_lift)
139+  3910 FE 00        	cp 0
140+  3912 C8           	ret z
141+  3913
142+  3913 3E AA        	ld a, 170
143+  3915 32 1D 4D     	ld (y_speed_frac), a
144+  3918
145+  3918 C9           	ret
146+  3919
147+  3919
148+  3919              harry_make_fall:
149+  3919
150+  3919 3E 00        	ld a, 0
151+  391B 32 83 4C     	ld (gravity_applies), a
152+  391E 32 28 4D     	ld (harry_frame), a
153+  3921 32 2E 4D     	ld (harry_frame_loop), a
154+  3924 32 2D 4D     	ld (harry_max_frame), a
155+  3927 32 29 4D     	ld (harry_special_frame), a
156+  392A 32 84 4C     	ld (jump_counter), a
157+  392D
158+  392D 3E 0F        	ld a, 15
159+  392F 32 82 4C     	ld (gravity), a
160+  3932
161+  3932 3E 78        	ld a, 120
162+  3934 32 1D 4D     	ld (y_speed_frac), a
163+  3937
164+  3937 3A 26 4D     	ld a, (harry_state)
165+  393A FE 02        	cp STATE_JUMPING
166+  393C CA 4C 39     	jp z, noGravityYet
167+  393F
168+  393F 3E 01        	ld a, 1
169+  3941 32 83 4C     	ld (gravity_applies), a
170+  3944
171+  3944 3E 05        	ld a, 5
172+  3946 32 1D 4D     	ld (y_speed_frac), a
173+  3949 32 82 4C     	ld (gravity), a
174+  394C
175+  394C              noGravityYet:
176+  394C
177+  394C
178+  394C
179+  394C 3E 03        	ld a, STATE_FALLING
180+  394E 32 26 4D     	ld (harry_state), a
181+  3951
182+  3951 3A 9C 4C     	ld a, (jump_climb_straight)
183+  3954 FE 01        	cp 1
184+  3956 CA 5E 39     	jp z, skipFrameSet
185+  3959
186+  3959
187+  3959 3E 01        	ld a, harry_fall_frame
188+  395B 32 27 4D     	ld (harry_start_frame), a
189+  395E
190+  395E              skipFrameSet:
191+  395E
192+  395E
193+  395E 3E FF        	ld a, 255
194+  3960 32 2C 4D     	ld (harry_frame_time), a
195+  3963 32 2B 4D     	ld (harry_frame_timer), a
196+  3966
197+  3966 3E 00        	ld a, 0
198+  3968 32 1C 4D     	ld (y_speed_pixel), a
199+  396B
200+  396B              	;ld a, 120
201+  396B              	;ld (y_speed_frac), a
202+  396B
203+  396B
204+  396B C9           	ret
205+  396C
206+  396C
207+  396C
208+  396C              harry_make_walk:
209+  396C
210+  396C 3E 01        	ld a, STATE_WALKING
211+  396E 32 26 4D     	ld (harry_state), a
212+  3971
213+  3971 3E 00        	ld a, harry_walk_frame
214+  3973 32 27 4D     	ld (harry_start_frame), a
215+  3976
216+  3976 3E 00        	ld a, 0
217+  3978 32 28 4D     	ld (harry_frame), a
218+  397B 32 29 4D     	ld (harry_special_frame), a
219+  397E 32 8A 4C     	ld (jump_direction), a
220+  3981
221+  3981
222+  3981 3E 01        	ld a, 1
223+  3983 32 2C 4D     	ld (harry_frame_time), a
224+  3986 32 2B 4D     	ld (harry_frame_timer), a
225+  3989
226+  3989 3E 01        	ld a, 1
227+  398B 32 2D 4D     	ld (harry_max_frame), a
228+  398E 32 2E 4D     	ld (harry_frame_loop), a
229+  3991
230+  3991 C9           	ret
231+  3992
# file closed: scripts/gameplay/harry/harry_new_state.asm
 63   3992                  include "scripts/gameplay/harry/harry_control.asm"
# file opened: scripts/gameplay/harry/harry_control.asm
  1+  3992              checkJoystick:
  2+  3992
  3+  3992 AF           		xor a
  4+  3993 32 49 4D     		ld (went_down_ladder), a
  5+  3996 32 48 4D     		ld (went_up_ladder), a
  6+  3999 32 89 4C     		ld (possible_jump_direction), a
  7+  399C
  8+  399C
  9+  399C 3A 8A 4C     		ld a, (jump_direction)
 10+  399F FE 01        		cp jump_left_state
 11+  39A1 C2 AA 39     		jp nz, .notForceLeft
 12+  39A4
 13+  39A4 CD 37 3A     		call go_left
 14+  39A7 C3 B8 39     		jp .notForceRight
 15+  39AA
 16+  39AA              .notForceLeft:
 17+  39AA
 18+  39AA 3A 8A 4C     		ld a, (jump_direction)
 19+  39AD FE 02        		cp jump_right_state
 20+  39AF C2 B8 39     		jp nz, .notForceRight
 21+  39B2
 22+  39B2 CD E1 3A     		call go_right
 23+  39B5
 24+  39B5 C3 D4 39     		jp .check_upndown
 25+  39B8
 26+  39B8              .notForceRight:
 27+  39B8
 28+  39B8              	  	                      ;it's non zero so isn't pressed
 29+  39B8 3A 26 4D              ld a, (harry_state)
 30+  39BB FE 03                cp STATE_FALLING
 31+  39BD CA D4 39             jp z, .check_upndown
 32+  39C0
 33+  39C0 FE 02                cp STATE_JUMPING
 34+  39C2 CA D4 39            jp z, .check_upndown
 35+  39C5
 36+  39C5 3A 32 4C     		ld a,(joystick_state)                                                ;get joystick state
 37+  39C8 47                   ld b,a                                                                                ;and save in b
 38+  39C9 E6 22                and inp_chk_left                                                        ;examine left
 39+  39CB                     ; and a                                                                                ;check for pressed
 40+  39CB C2 24 3A             jp nz, joy_left
 41+  39CE
 42+  39CE 78           		ld a,b           	                                                                     ;get state again
 43+  39CF E6 44                and inp_chk_right                                                        ;examine right
 44+  39D1                     ; and a                                                                                ;check if pressed
 45+  39D1 C2 CE 3A             jp nz, joy_right
 46+  39D4
 47+  39D4
 48+  39D4              .check_upndown:
 49+  39D4
 50+  39D4
 51+  39D4
 52+  39D4
 53+  39D4 CD 13 3A      		call check_stop_walk
 54+  39D7
 55+  39D7 3A 32 4C             ld a, (joystick_state)                                                       ;get state again
 56+  39DA E6 11                and inp_chk_up                                                                ;examine up
 57+  39DC                     ; and a                                                                                ;check if pressed
 58+  39DC C2 22 3B             jp nz, go_up                                                                      ;it's non zero so isn't pressed
 59+  39DF
 60+  39DF              .check_down:
 61+  39DF
 62+  39DF 3E 00        		ld a, 0
 63+  39E1 32 32 4D     		ld (moving_up_down), a
 64+  39E4
 65+  39E4 3A 32 4C     		ld a,(joystick_state)                                                                                  ;get state again
 66+  39E7 E6 88                and inp_chk_down                                                        ;examine down
 67+  39E9                     ; and a                                                                                ;check if pressed
 68+  39E9 C2 79 3B             jp nz, go_down                                                                               ;it's non zero so isn't pressed so finish
 69+  39EC
 70+  39EC
 71+  39EC C9                   ret
 72+  39ED
 73+  39ED
 74+  39ED              checkFire:
 75+  39ED
 76+  39ED 3A 85 4C     		ld a, (fire_override)
 77+  39F0 FE 00        		cp 0
 78+  39F2 CA 00 3A     		jp z, check_jump
 79+  39F5
 80+  39F5 3A 33 4C     		ld a,(start_state)	                                                                             ;get state again
 81+  39F8 E6 10                and inp_p1_fire                                                   ;examine down
 82+  39FA
 83+  39FA FE 00                cp 0                                                                        ;check if pressed
 84+  39FC C2 00 3A             jp nz, check_jump                                                                             ;it's non zero so isn't pressed so finish
 85+  39FF
 86+  39FF              .exit:
 87+  39FF
 88+  39FF
 89+  39FF
 90+  39FF C9           	ret
 91+  3A00
 92+  3A00              check_jump:
 93+  3A00
 94+  3A00 3A 26 4D     	ld a, (harry_state)
 95+  3A03 FE 01        	cp STATE_WALKING
 96+  3A05 CA AF 38     	jp z, harry_make_jump
 97+  3A08
 98+  3A08 FE 00        	cp STATE_IDLE
 99+  3A0A CA AF 38     	jp z, harry_make_jump
100+  3A0D
101+  3A0D FE 04        	cp STATE_CLIMBING
102+  3A0F CA AF 38     	jp z, harry_make_jump
103+  3A12
104+  3A12 C9           	ret
105+  3A13
106+  3A13
107+  3A13
108+  3A13              check_stop_walk:
109+  3A13
110+  3A13
111+  3A13 3A 26 4D     	ld a, (harry_state)
112+  3A16 FE 01        	cp STATE_WALKING
113+  3A18 CA 21 3A     	jp z, stop_anim
114+  3A1B
115+  3A1B FE 06        	cp STATE_PUSHING
116+  3A1D CA 21 3A     	jp z, stop_anim
117+  3A20
118+  3A20 C9           	ret
119+  3A21
120+  3A21              stop_anim:
121+  3A21 C3 42 38          jp harry_make_idle
122+  3A24
123+  3A24
124+  3A24              joy_left:
125+  3A24
126+  3A24
127+  3A24 3E 00        	ld a, 0
128+  3A26 32 2A 4D     	ld (harry_face_right), a
129+  3A29
130+  3A29 3E 01        	ld a, jump_left_state
131+  3A2B 32 89 4C     	ld (possible_jump_direction), a
132+  3A2E
133+  3A2E
134+  3A2E 3A 26 4D     	ld a, (harry_state)
135+  3A31 FE 02        	cp STATE_JUMPING
136+  3A33 C8           	ret z
137+  3A34
138+  3A34 FE 03        	cp STATE_FALLING
139+  3A36 C8           	ret z
140+  3A37
141+  3A37              go_left:
142+  3A37
143+  3A37 3A 26 4D     	ld a, (harry_state)
144+  3A3A FE 02        	cp STATE_JUMPING
145+  3A3C CA C5 3E     	jp z, jumping_left
146+  3A3F
147+  3A3F FE 03        	cp STATE_FALLING
148+  3A41 CA EE 3E     	jp z, falling_left
149+  3A44
150+  3A44
151+  3A44 3A 46 4D     	ld a, (blocked_left)
152+  3A47 FE 01        	cp 1
153+  3A49 C2 55 3A     	jp nz, not_blocked_L
154+  3A4C
155+  3A4C
156+  3A4C
157+  3A4C 3A 26 4D     	ld a, (harry_state)
158+  3A4F FE 01        	cp STATE_WALKING
159+  3A51 CA 42 38     	jp z, harry_make_idle
160+  3A54
161+  3A54 C9           	ret
162+  3A55
163+  3A55              not_blocked_L:
164+  3A55
165+  3A55
166+  3A55
167+  3A55 3A 26 4D     	ld a, (harry_state)
168+  3A58 FE 00        	cp STATE_IDLE
169+  3A5A CA 71 3A     	jp z, makeWalkLeft
170+  3A5D
171+  3A5D FE 01        	cp STATE_WALKING
172+  3A5F CA 74 3A     	jp z, walkLeft
173+  3A62
174+  3A62 FE 03        	cp STATE_FALLING
175+  3A64 CA 9D 3A     	jp z, jumpLeft
176+  3A67
177+  3A67 FE 02        	cp STATE_JUMPING
178+  3A69 CA 9D 3A     	jp z, jumpLeft
179+  3A6C
180+  3A6C FE 04        	cp STATE_CLIMBING
181+  3A6E CA BD 3B     	jp z,check_jump_off_left
182+  3A71
183+  3A71
184+  3A71              makeWalkLeft:
185+  3A71
186+  3A71
187+  3A71 CD 6C 39     	call harry_make_walk
188+  3A74
189+  3A74              walkLeft:
190+  3A74
191+  3A74 3E 00        	ld a, 0
192+  3A76 32 2A 4D     	ld (harry_face_right), a
193+  3A79
194+  3A79 DD 7E 11     	ld a, (ix + spr_y)
195+  3A7C FE 02        	cp 2
196+  3A7E DA 94 3A     	jp c, StopLeft
197+  3A81
198+  3A81
199+  3A81 3E 07        	ld a, walk_speed_frac
200+  3A83 CD D0 3B     	call increaseFracX
201+  3A86
202+  3A86 DD 7E 11     	ld a, (ix + spr_y)
203+  3A89 CE 01        	adc walk_speed_pixel
204+  3A8B DD 77 11     	ld (ix + spr_y), a
205+  3A8E
206+  3A8E FE 02        	cp 2
207+  3A90 DA 94 3A     	jp c, StopLeft
208+  3A93
209+  3A93 C9           	ret
210+  3A94              	;cp edgeLeftX
211+  3A94              	;jp c, notEdgeL
212+  3A94
213+  3A94              StopLeft:
214+  3A94 3E FF        	ld a, edgeLeftX
215+  3A96 DD 77 11     	ld (ix + spr_y), a
216+  3A99
217+  3A99
218+  3A99 C3 42 38     	jp harry_make_idle
219+  3A9C
220+  3A9C
221+  3A9C              notEdgeL:
222+  3A9C
223+  3A9C C9           	ret
224+  3A9D
225+  3A9D
226+  3A9D
227+  3A9D
228+  3A9D              edgeRightX:		equ 17
229+  3A9D              edgeLeftX:		equ 255
230+  3A9D
231+  3A9D
232+  3A9D              jumpLeft:
233+  3A9D
234+  3A9D
235+  3A9D 3A 20 4D     	ld a, (x_pos_offset)
236+  3AA0 FE 04        	cp 4
237+  3AA2 DA B5 3A     	jp c, noBounceL
238+  3AA5
239+  3AA5 3A 21 4D     	ld a, (y_pos_offset)
240+  3AA8 FE 04        	cp 4
241+  3AAA D2 B5 3A     	jp nc, noBounceL
242+  3AAD
243+  3AAD 3A 42 4D     	ld a, (blocked_jump_left)
244+  3AB0 FE 01        	cp 1
245+  3AB2 CA 1F 3F     	jp z, bounce_left
246+  3AB5
247+  3AB5              noBounceL:
248+  3AB5
249+  3AB5 3E C9        	ld a, air_speed_frac
250+  3AB7 CD D0 3B     	call increaseFracX
251+  3ABA
252+  3ABA DD 7E 11     	ld a, (ix + spr_y)
253+  3ABD CE 00        	adc 0
254+  3ABF DD 77 11     	ld (ix + spr_y), a
255+  3AC2
256+  3AC2 FE 02        	cp 2
257+  3AC4 DA C8 3A     	jp c, StopLeftJ
258+  3AC7
259+  3AC7 C9           	ret
260+  3AC8              	;cp edgeLeftX
261+  3AC8              	;jp c, notEdgeL
262+  3AC8
263+  3AC8              StopLeftJ:
264+  3AC8 3E FF        	ld a, edgeLeftX
265+  3ACA DD 77 11     	ld (ix + spr_y), a
266+  3ACD
267+  3ACD C9           	ret
268+  3ACE
269+  3ACE
270+  3ACE
271+  3ACE              joy_right:
272+  3ACE
273+  3ACE
274+  3ACE 3E 01        	ld a, 1
275+  3AD0 32 2A 4D     	ld (harry_face_right), a
276+  3AD3
277+  3AD3 3E 02        	ld a, jump_right_state
278+  3AD5 32 89 4C     	ld (possible_jump_direction), a
279+  3AD8
280+  3AD8 3A 26 4D     	ld a, (harry_state)
281+  3ADB FE 02        	cp STATE_JUMPING
282+  3ADD C8           	ret z
283+  3ADE
284+  3ADE FE 03        	cp STATE_FALLING
285+  3AE0 C8           	ret z
286+  3AE1
287+  3AE1
288+  3AE1              go_right:
289+  3AE1
290+  3AE1 3A 26 4D     	ld a, (harry_state)
291+  3AE4
292+  3AE4 FE 02        	cp STATE_JUMPING
293+  3AE6 CA B2 3E     	jp z, jumping_right
294+  3AE9
295+  3AE9 FE 03        	cp STATE_FALLING
296+  3AEB CA D8 3E     	jp z, falling_right
297+  3AEE
298+  3AEE
299+  3AEE 3A 47 4D     	ld a, (blocked_right)
300+  3AF1 FE 01        	cp 1
301+  3AF3 C2 FC 3A     	jp nz, not_blocked_R
302+  3AF6
303+  3AF6 FE 01        	cp STATE_WALKING
304+  3AF8 CA 42 38     	jp z, harry_make_idle
305+  3AFB
306+  3AFB C9           	ret
307+  3AFC
308+  3AFC              not_blocked_R:
309+  3AFC
310+  3AFC 3A 26 4D     	ld a, (harry_state)
311+  3AFF
312+  3AFF FE 00        	cp STATE_IDLE
313+  3B01 CA 0E 3B     	jp z, makeWalkRight
314+  3B04
315+  3B04 FE 01        	cp STATE_WALKING
316+  3B06 CA 11 3B     	jp z, walkRight
317+  3B09
318+  3B09 FE 04        	cp STATE_CLIMBING
319+  3B0B CA C6 3B     	jp z,check_jump_off_right
320+  3B0E
321+  3B0E              makeWalkRight:
322+  3B0E
323+  3B0E CD 6C 39     	call harry_make_walk
324+  3B11
325+  3B11              walkRight:
326+  3B11
327+  3B11
328+  3B11
329+  3B11 3E 01        	ld a, walk_speed_pixel
330+  3B13 4F           	ld c, a
331+  3B14
332+  3B14 3E 07        	ld a, walk_speed_frac
333+  3B16 CD D0 3B     	call increaseFracX
334+  3B19
335+  3B19 DD 7E 11     	ld a, (ix + spr_y)
336+  3B1C DE 01        	sbc a, walk_speed_pixel
337+  3B1E DD 77 11     	ld (ix + spr_y), a
338+  3B21
339+  3B21              	;cp edgeRightX
340+  3B21              	;jp nc, noEdgeR
341+  3B21
342+  3B21              	;ld a, edgeRightX
343+  3B21              	;ld (ix + spr_y), a
344+  3B21              ;
345+  3B21              	;jp harry_make_idle
346+  3B21
347+  3B21
348+  3B21
349+  3B21              noEdgeR:
350+  3B21
351+  3B21
352+  3B21 C9           	ret
353+  3B22
354+  3B22
355+  3B22
356+  3B22
357+  3B22
358+  3B22              go_up:
359+  3B22
360+  3B22              	;ld a, (ix + spr_x)
361+  3B22              	;dec a
362+  3B22              	;ld (ix+spr_x), a
363+  3B22
364+  3B22
365+  3B22 AF           	xor a
366+  3B23 32 48 4D     	ld (went_up_ladder), a
367+  3B26 32 32 4D     	ld (moving_up_down), a
368+  3B29
369+  3B29 3A 26 4D     	ld a, (harry_state)
370+  3B2C FE 04        	cp STATE_CLIMBING
371+  3B2E CA 55 3B     	jp z, alreadyOnLadder
372+  3B31
373+  3B31
374+  3B31 3A 2F 4D     	ld a, (harry_over_ladder)
375+  3B34 FE 00        	cp 0
376+  3B36 C8           	ret z
377+  3B37
378+  3B37 3A 34 4D     	ld a, (harry_ladder_above)
379+  3B3A FE 00        	cp 0
380+  3B3C C8           	ret z
381+  3B3D
382+  3B3D
383+  3B3D 3A 30 4D     	ld a, (harry_can_climb_ladder)
384+  3B40 FE 00        	cp 0
385+  3B42 C8           	ret z
386+  3B43
387+  3B43 3A 35 4D     	ld a, (harry_ladder_two_above)
388+  3B46 FE 00        	cp 0
389+  3B48 C8           	ret z
390+  3B49
391+  3B49 3E 01        	ld a, 1
392+  3B4B 32 48 4D     	ld (went_up_ladder), a
393+  3B4E 32 32 4D     	ld (moving_up_down), a
394+  3B51
395+  3B51 CD 86 38     	call harry_make_climb
396+  3B54
397+  3B54 C9           	ret
398+  3B55
399+  3B55
400+  3B55              alreadyOnLadder:
401+  3B55
402+  3B55 3A 34 4D     	ld a, (harry_ladder_above)
403+  3B58 FE 00        	cp 0
404+  3B5A C8           	ret z
405+  3B5B
406+  3B5B 3A 35 4D     	ld a, (harry_ladder_two_above)
407+  3B5E FE 01        	cp 1
408+  3B60 CA 69 3B     	jp z, canDefinitelyClimb
409+  3B63
410+  3B63 3A 21 4D     	ld a, (y_pos_offset)
411+  3B66 FE 05        	cp 5
412+  3B68 D8           	ret c
413+  3B69
414+  3B69              canDefinitelyClimb:
415+  3B69
416+  3B69 DD 7E 10     	ld a, (ix+spr_x)
417+  3B6C 3D            	dec a
418+  3B6D DD 77 10     	ld (ix+spr_x), a
419+  3B70
420+  3B70 3E 01        	ld a, 1
421+  3B72 32 48 4D     	ld (went_up_ladder), a
422+  3B75 32 32 4D     	ld (moving_up_down), a
423+  3B78
424+  3B78
425+  3B78 C9           	ret
426+  3B79
427+  3B79
428+  3B79
429+  3B79              go_down:
430+  3B79
431+  3B79              	;ld a, (ix + spr_x)
432+  3B79              	;inc a
433+  3B79              	;ld (ix+spr_x), a
434+  3B79
435+  3B79
436+  3B79 3E 01        	ld a, 1
437+  3B7B 32 32 4D     	ld (moving_up_down), a
438+  3B7E
439+  3B7E 3A 33 4D     	ld a, (harry_ladder_below)
440+  3B81 FE 01        	cp 1
441+  3B83 CA 97 3B     	jp z, checkDownLadder
442+  3B86
443+  3B86
444+  3B86 3A 3F 4D     	ld a, (harry_snap_ground)
445+  3B89 FE 01        	cp 1
446+  3B8B CA F1 3B     	jp z, check_crouch
447+  3B8E
448+  3B8E 3A 2F 4D     	ld a, (harry_over_ladder)
449+  3B91 FE 01        	cp 1
450+  3B93 CA 97 3B     	jp z, checkDownLadder
451+  3B96
452+  3B96 C9           	ret
453+  3B97
454+  3B97              checkDownLadder:
455+  3B97
456+  3B97 3A 26 4D     	ld a, (harry_state)
457+  3B9A FE 04        	cp STATE_CLIMBING
458+  3B9C C2 D9 3B     	jp nz, check_join_down
459+  3B9F
460+  3B9F
461+  3B9F
462+  3B9F
463+  3B9F              moveDown:
464+  3B9F
465+  3B9F DD 7E 10     	ld a, (ix+spr_x)
466+  3BA2 3C           	inc a
467+  3BA3 DD 77 10     	ld (ix+spr_x), a
468+  3BA6
469+  3BA6
470+  3BA6 C9           	ret
471+  3BA7
472+  3BA7
473+  3BA7
474+  3BA7              jumpRight:
475+  3BA7
476+  3BA7                 ; ld a, 1
477+  3BA7              	;ld (harry_face_right), a
478+  3BA7
479+  3BA7
480+  3BA7
481+  3BA7 3A 41 4D     	ld a, (blocked_jump_right)
482+  3BAA FE 01        	cp 1
483+  3BAC CA 11 3F     	jp z, bounce_right
484+  3BAF
485+  3BAF
486+  3BAF
487+  3BAF 3E C9        	ld a, air_speed_frac
488+  3BB1 CD D0 3B     	call increaseFracX
489+  3BB4
490+  3BB4 DD 7E 11     	ld a, (ix + spr_y)
491+  3BB7 DE 00        	sbc 0
492+  3BB9 DD 77 11     	ld (ix + spr_y), a
493+  3BBC
494+  3BBC
495+  3BBC C9           	ret
496+  3BBD
497+  3BBD              check_jump_off_left:
498+  3BBD
499+  3BBD
500+  3BBD 3A 36 4D         ld a, (harry_exit_left)
501+  3BC0 FE 00        	cp 0
502+  3BC2 C8           	ret z
503+  3BC3
504+  3BC3              	;ld a, (ix + spr_y)
505+  3BC3              	;add 2
506+  3BC3              	;ld (ix + spr_y), a
507+  3BC3
508+  3BC3              	;ld a, (y_pos_offset)
509+  3BC3              	;ld b, a
510+  3BC3
511+  3BC3              	;ld a, (ix + spr_x)
512+  3BC3              	;sub b
513+  3BC3              	;add 4
514+  3BC3              	;ld (ix + spr_x), a
515+  3BC3
516+  3BC3 C3 42 38     	jp harry_make_idle
517+  3BC6
518+  3BC6              check_jump_off_right:
519+  3BC6
520+  3BC6 3A 37 4D     	ld a, (harry_exit_right)
521+  3BC9 FE 00        	cp 0
522+  3BCB C8           	ret z
523+  3BCC
524+  3BCC              	;ld a, (ix + spr_y)
525+  3BCC              	;sub 2
526+  3BCC              	;ld (ix + spr_y), a
527+  3BCC
528+  3BCC              	;ld a, (y_pos_offset)
529+  3BCC              	;ld b, a
530+  3BCC
531+  3BCC              	;ld a, (ix + spr_x)
532+  3BCC              	;sub b
533+  3BCC              	;add 4
534+  3BCC              	;ld (ix + spr_x), a
535+  3BCC
536+  3BCC C3 42 38     	jp harry_make_idle
537+  3BCF
538+  3BCF C9           	ret
539+  3BD0
540+  3BD0
541+  3BD0              increaseFracX:
542+  3BD0
543+  3BD0 47           	ld b, a
544+  3BD1 3A 1F 4D     	ld a, (x_pos_frac)
545+  3BD4 80           	add a, b
546+  3BD5 32 1F 4D     	ld (x_pos_frac), a
547+  3BD8
548+  3BD8 C9           	ret
549+  3BD9
550+  3BD9
551+  3BD9
552+  3BD9
553+  3BD9
554+  3BD9              check_join_down:
555+  3BD9
556+  3BD9 3A 33 4D     	ld a, (harry_ladder_below)
557+  3BDC FE 00        	cp 0
558+  3BDE CA 00 3C     	jp z, check_fall_ladder
559+  3BE1
560+  3BE1 3A 30 4D     	ld a, (harry_can_climb_ladder)
561+  3BE4 FE 00        	cp 0
562+  3BE6 C8           	ret z
563+  3BE7
564+  3BE7
565+  3BE7 DD 7E 10     	ld a, (ix+spr_x)
566+  3BEA 3C           	inc a
567+  3BEB DD 77 10     	ld (ix+spr_x), a
568+  3BEE
569+  3BEE
570+  3BEE C3 86 38     	jp harry_make_climb
571+  3BF1
572+  3BF1              check_crouch:
573+  3BF1
574+  3BF1 3A 2F 4D     	ld a, (harry_over_ladder)
575+  3BF4 FE 01        	cp 1
576+  3BF6 CA FA 3B     	jp z, check_ladder_off
577+  3BF9
578+  3BF9              crouch_ladder:
579+  3BF9
580+  3BF9
581+  3BF9 C9           	ret
582+  3BFA
583+  3BFA              check_ladder_off:
584+  3BFA
585+  3BFA 3A 33 4D     	ld a, (harry_ladder_below)
586+  3BFD FE 01        	cp 1
587+  3BFF C8            	ret z
588+  3C00
589+  3C00
590+  3C00              check_fall_ladder:
591+  3C00
592+  3C00 3A 26 4D     	ld a, (harry_state)
593+  3C03 FE 04        	cp STATE_CLIMBING
594+  3C05 C2 2C 3C     	jp nz, crouch_in_front_ladder
595+  3C08
596+  3C08              	;ld a, 10
597+  3C08              	;ld (alex_land_timer), a
598+  3C08
599+  3C08 3A 45 4D     	ld a, (blocked_below)
600+  3C0B FE 00        	cp 0
601+  3C0D C2 29 3C     	jp nz, bottom_of_ladder
602+  3C10
603+  3C10 DD 7E 10     	ld a, (ix + spr_x)
604+  3C13 3C           	inc a
605+  3C14 DD 77 10     	ld (ix + spr_x), a
606+  3C17
607+  3C17 3A 21 4D     	ld a, (y_pos_offset)
608+  3C1A
609+  3C1A FE 05        	cp 5
610+  3C1C C0           	ret nz
611+  3C1D
612+  3C1D
613+  3C1D DD 7E 10     	ld a, (ix + spr_x)
614+  3C20 3C           	inc a
615+  3C21 3C           	inc a
616+  3C22 DD 77 10     	ld (ix + spr_x), a
617+  3C25
618+  3C25 C3 19 39     	jp harry_make_fall
619+  3C28
620+  3C28
621+  3C28
622+  3C28 C9           	ret
623+  3C29
624+  3C29              horse:
625+  3C29
626+  3C29
627+  3C29              	;jp harry_make_fall
628+  3C29
629+  3C29              bottom_of_ladder:
630+  3C29
631+  3C29
632+  3C29
633+  3C29 C3 42 38     	jp harry_make_idle
634+  3C2C
635+  3C2C              crouch_in_front_ladder:
636+  3C2C
637+  3C2C              	;ld a, (alex_land_timer)
638+  3C2C FE 00        	cp 0
639+  3C2E C0           	ret nz
640+  3C2F
641+  3C2F              	;jp crouch_ladder
642+  3C2F
643+  3C2F C9           	ret
# file closed: scripts/gameplay/harry/harry_control.asm
 64   3C30                  include "scripts/gameplay/harry/harry_anim.asm"
# file opened: scripts/gameplay/harry/harry_anim.asm
  1+  3C30
  2+  3C30              update_frame:
  3+  3C30
  4+  3C30 3A 2B 4D     	ld a, (harry_frame_timer)
  5+  3C33 FE 00        	cp 0
  6+  3C35 CA 3D 3C     	jp z, ready_next_frame
  7+  3C38
  8+  3C38 3D           	dec a
  9+  3C39 32 2B 4D     	ld (harry_frame_timer), a
 10+  3C3C C9           	ret
 11+  3C3D
 12+  3C3D
 13+  3C3D              ready_next_frame:
 14+  3C3D
 15+  3C3D 3A 26 4D     	ld a, (harry_state)
 16+  3C40 FE 04        	cp STATE_CLIMBING
 17+  3C42 C2 4B 3C     	jp nz, notClimbing
 18+  3C45
 19+  3C45 3A 32 4D     	ld a, (moving_up_down)
 20+  3C48 FE 00        	cp 0
 21+  3C4A C8           	ret z
 22+  3C4B
 23+  3C4B
 24+  3C4B              notClimbing:
 25+  3C4B
 26+  3C4B 3A 2C 4D     	ld a, (harry_frame_time)
 27+  3C4E 32 2B 4D     	ld (harry_frame_timer), a
 28+  3C51
 29+  3C51 3A 2D 4D     	ld a, (harry_max_frame)
 30+  3C54 3C           	inc a
 31+  3C55 47           	ld b, a
 32+  3C56
 33+  3C56 3A 28 4D     	ld a, (harry_frame)
 34+  3C59 3C           	inc a
 35+  3C5A 32 28 4D     	ld (harry_frame), a
 36+  3C5D
 37+  3C5D B8           	cp b
 38+  3C5E C0           	ret nz
 39+  3C5F
 40+  3C5F 3A 2E 4D     	ld a, (harry_frame_loop)
 41+  3C62 FE 00        	cp 0
 42+  3C64 C2 6E 3C     	jp nz, reset0
 43+  3C67
 44+  3C67 3A 2D 4D     	ld a, (harry_max_frame)
 45+  3C6A 32 28 4D     	ld (harry_frame), a
 46+  3C6D C9           	ret
 47+  3C6E
 48+  3C6E              reset0:
 49+  3C6E
 50+  3C6E 3E 00        	ld a, 0
 51+  3C70 32 28 4D     	ld (harry_frame), a
 52+  3C73
 53+  3C73
 54+  3C73 C9           	ret
 55+  3C74
 56+  3C74              calculate_frame:
 57+  3C74
 58+  3C74 DD 21 B9 4C  	ld ix, sprite0
 59+  3C78
 60+  3C78 3A 27 4D     	ld a, (harry_start_frame)
 61+  3C7B 47           	ld b, a
 62+  3C7C 3A 28 4D     	ld a, (harry_frame)
 63+  3C7F 80           	add a, b
 64+  3C80 47           	ld b, a
 65+  3C81 3A 29 4D     	ld a, (harry_special_frame)
 66+  3C84 80           	add a, b
 67+  3C85
 68+  3C85 CB 27        	sla a
 69+  3C87 CB 27        	sla a
 70+  3C89 DD 77 00     	ld (ix + spr_num), a
 71+  3C8C
 72+  3C8C 3A 2A 4D     	ld a, (harry_face_right)
 73+  3C8F FE 00        	cp 0
 74+  3C91 CA 99 3C     	jp z, FlipHarry
 75+  3C94
 76+  3C94
 77+  3C94              NoFlip:
 78+  3C94
 79+  3C94 DD CB 00 86  	res flipy, (ix)
 80+  3C98 C9           	ret
 81+  3C99
 82+  3C99
 83+  3C99              FlipHarry:
 84+  3C99
 85+  3C99 DD CB 00 C6  	set flipy,(ix)
 86+  3C9D C9           	ret
 87+  3C9E
# file closed: scripts/gameplay/harry/harry_anim.asm
 65   3C9E                  include "scripts/gameplay/harry/harry_ladder.asm"
# file opened: scripts/gameplay/harry/harry_ladder.asm
  1+  3C9E
  2+  3C9E
  3+  3C9E              checkOverLadderL:
  4+  3C9E
  5+  3C9E 3E 00        	ld a, 0
  6+  3CA0 32 2F 4D     	ld (harry_over_ladder), a
  7+  3CA3 32 30 4D     	ld (harry_can_climb_ladder), a
  8+  3CA6
  9+  3CA6 2A 4A 4D     	ld hl, (harry_tile_address)
 10+  3CA9 7E           	ld a, (hl)
 11+  3CAA FE F1        	cp tile_ladder_left
 12+  3CAC C0           	ret nz
 13+  3CAD
 14+  3CAD 3E 01        	ld a, 1
 15+  3CAF 32 2F 4D     	ld (harry_over_ladder), a
 16+  3CB2
 17+  3CB2 3A 20 4D     	ld a, (x_pos_offset)
 18+  3CB5 47           	ld b, a
 19+  3CB6 FE 05        	cp 5
 20+  3CB8 D0           	ret nc
 21+  3CB9
 22+  3CB9 3E 01        	ld a, 1
 23+  3CBB 32 30 4D     	ld (harry_can_climb_ladder), a
 24+  3CBE
 25+  3CBE DD 7E 11     	ld a, (ix + spr_y)
 26+  3CC1 90           	sub b
 27+  3CC2 C6 01        	add 1
 28+  3CC4 32 31 4D     	ld (ladder_join_x), a
 29+  3CC7
 30+  3CC7
 31+  3CC7 C9           	ret
 32+  3CC8
 33+  3CC8
 34+  3CC8              checkOverLadderR:
 35+  3CC8
 36+  3CC8
 37+  3CC8 7E           	ld a, (hl)
 38+  3CC9 FE F2        	cp tile_ladder_right
 39+  3CCB C0           	ret nz
 40+  3CCC
 41+  3CCC 3E 01        	ld a, 1
 42+  3CCE 32 2F 4D     	ld (harry_over_ladder), a
 43+  3CD1
 44+  3CD1 3A 20 4D     	ld a, (x_pos_offset)
 45+  3CD4 47           	ld b, a
 46+  3CD5 FE 05        	cp 5
 47+  3CD7 D8           	ret c
 48+  3CD8
 49+  3CD8 3E 01        	ld a, 1
 50+  3CDA 32 30 4D     	ld (harry_can_climb_ladder), a
 51+  3CDD
 52+  3CDD 3E 09        	ld a, 9
 53+  3CDF 90           	sub b
 54+  3CE0 47           	ld b, a
 55+  3CE1
 56+  3CE1 DD 7E 11     	ld a, (ix + spr_y)
 57+  3CE4 80           	add b
 58+  3CE5 32 31 4D     	ld (ladder_join_x), a
 59+  3CE8
 60+  3CE8 C9           	ret
 61+  3CE9
 62+  3CE9
 63+  3CE9
 64+  3CE9              checkLadderAbove:
 65+  3CE9
 66+  3CE9 CD D2 20     	call moveTileUpHL
 67+  3CEC
 68+  3CEC 3E 00        	ld a, 0
 69+  3CEE 32 34 4D     	ld (harry_ladder_above), a
 70+  3CF1
 71+  3CF1 7E           	ld a, (hl)
 72+  3CF2 FE F1        	cp tile_ladder_left
 73+  3CF4 CA FA 3C     	jp z, isBelowLadder
 74+  3CF7
 75+  3CF7 FE F2        	cp tile_ladder_right
 76+  3CF9 C0           	ret nz
 77+  3CFA
 78+  3CFA              isBelowLadder:
 79+  3CFA
 80+  3CFA 3E 01        	ld a, 1
 81+  3CFC 32 34 4D     	ld (harry_ladder_above), a
 82+  3CFF
 83+  3CFF C9           	ret
 84+  3D00
 85+  3D00
 86+  3D00              checkLadderTwoAbove:
 87+  3D00
 88+  3D00 CD D2 20     	call moveTileUpHL
 89+  3D03
 90+  3D03 3E 00        	ld a, 0
 91+  3D05 32 35 4D     	ld (harry_ladder_two_above), a
 92+  3D08
 93+  3D08 7E           	ld a, (hl)
 94+  3D09 FE F1        	cp tile_ladder_left
 95+  3D0B CA 11 3D     	jp z, isBelowLadderTwo
 96+  3D0E
 97+  3D0E FE F2        	cp tile_ladder_right
 98+  3D10 C0           	ret nz
 99+  3D11
100+  3D11              isBelowLadderTwo:
101+  3D11
102+  3D11 3E 01        	ld a, 1
103+  3D13 32 35 4D     	ld (harry_ladder_two_above), a
104+  3D16
105+  3D16 C9           	ret
106+  3D17
107+  3D17
108+  3D17              checkLadderBelow:
109+  3D17
110+  3D17 2A 4A 4D     	ld hl, (harry_tile_address)
111+  3D1A
112+  3D1A 3E 00        	ld a, 0
113+  3D1C 32 33 4D     	ld (harry_ladder_below), a
114+  3D1F
115+  3D1F CD C9 20     	call moveTileDownHL
116+  3D22
117+  3D22 7E           	ld a, (hl)
118+  3D23 FE F1        	cp tile_ladder_left
119+  3D25 CA 2B 3D     	jp z, isAboveLadder
120+  3D28
121+  3D28 FE F2        	cp tile_ladder_right
122+  3D2A C0           	ret nz
123+  3D2B
124+  3D2B              isAboveLadder:
125+  3D2B
126+  3D2B 3E 01        	ld a, 1
127+  3D2D 32 33 4D     	ld (harry_ladder_below), a
128+  3D30
129+  3D30 C9           	ret
130+  3D31
131+  3D31
132+  3D31
133+  3D31              checkFootLadder:
134+  3D31
135+  3D31 3E 00        	ld a, 0
136+  3D33 32 40 4D     	ld (harry_land_ladder), a
137+  3D36
138+  3D36 3A 26 4D     	ld a, (harry_state)
139+  3D39 FE 02        	cp STATE_JUMPING
140+  3D3B C8           	ret z
141+  3D3C
142+  3D3C 2A 4A 4D     	ld hl, (harry_tile_address)
143+  3D3F              	;ld de, tile_ram_start + row_0 + column_4
144+  3D3F 7E           	ld a, (hl)
145+  3D40              	;ld (de), a
146+  3D40
147+  3D40
148+  3D40 FE F1        	cp tile_ladder_left
149+  3D42 CA 5D 3D     	jp z, checkPlatformLeftRight
150+  3D45
151+  3D45 FE F2        	cp tile_ladder_right
152+  3D47 C0           	ret nz
153+  3D48
154+  3D48              checkPlatformRight:
155+  3D48
156+  3D48 CD C9 20     	call moveTileDownHL
157+  3D4B
158+  3D4B 23           	inc hl
159+  3D4C
160+  3D4C 7E           	ld a, (hl)
161+  3D4D FE F0        	cp tile_platform
162+  3D4F C0           	ret nz
163+  3D50
164+  3D50 2B           	dec hl
165+  3D51 2B           	dec hl
166+  3D52 2B           	dec hl
167+  3D53
168+  3D53 7E           	ld a, (hl)
169+  3D54 FE F0        	cp tile_platform
170+  3D56 C0           	ret nz
171+  3D57
172+  3D57              yes:
173+  3D57 3E 01        	ld a, 1
174+  3D59 32 40 4D     	ld (harry_land_ladder), a
175+  3D5C
176+  3D5C C9           	ret
177+  3D5D
178+  3D5D
179+  3D5D
180+  3D5D
181+  3D5D              checkPlatformLeftRight:
182+  3D5D
183+  3D5D CD C9 20     	call moveTileDownHL
184+  3D60
185+  3D60 2B           	dec hl
186+  3D61
187+  3D61 7E           	ld a, (hl)
188+  3D62 FE F0        	cp tile_platform
189+  3D64 C0           	ret nz
190+  3D65
191+  3D65 23           	inc hl
192+  3D66 23           	inc hl
193+  3D67 23           	inc hl
194+  3D68 7E           	ld a, (hl)
195+  3D69 FE F0        	cp tile_platform
196+  3D6B C0           	ret nz
197+  3D6C
198+  3D6C C3 57 3D     	jp yes
# file closed: scripts/gameplay/harry/harry_ladder.asm
 66   3D6F                  include "scripts/gameplay/harry/harry_floor.asm"
# file opened: scripts/gameplay/harry/harry_floor.asm
  1+  3D6F
  2+  3D6F
  3+  3D6F              sort_out_inside:
  4+  3D6F
  5+  3D6F C9           	ret
  6+  3D70 3A 26 4D     	ld a, (harry_state)
  7+  3D73 FE 03        	cp STATE_FALLING
  8+  3D75 C0           	ret nz
  9+  3D76
 10+  3D76 3E 01        	ld a, 1
 11+  3D78 32 3F 4D     	ld (harry_snap_ground), a
 12+  3D7B 32 45 4D     	ld (blocked_below), a
 13+  3D7E
 14+  3D7E
 15+  3D7E C9           	ret
 16+  3D7F
 17+  3D7F
 18+  3D7F              checkFloor:
 19+  3D7F
 20+  3D7F 3E 00        	ld a, 0
 21+  3D81 32 45 4D     	ld (blocked_below), a
 22+  3D84 32 3C 4D     	ld (harry_left_foot_block), a
 23+  3D87 32 3D 4D     	ld (harry_right_foot_block), a
 24+  3D8A 32 3F 4D     	ld (harry_snap_ground), a
 25+  3D8D
 26+  3D8D 3E 01        	ld a, 1
 27+  3D8F 32 3E 4D     	ld (harry_can_fall), a
 28+  3D92
 29+  3D92
 30+  3D92 3A 21 4D     	ld a, (y_pos_offset)
 31+  3D95 FE 03        	cp 3
 32+  3D97 CA AC 3D     	jp z, canSnap
 33+  3D9A
 34+  3D9A FE 04        	cp 4
 35+  3D9C CA AC 3D     	jp z, canSnap
 36+  3D9F
 37+  3D9F FE 05        	cp 5
 38+  3DA1 CA AC 3D     	jp z, canSnap
 39+  3DA4
 40+  3DA4 FE 06        	cp 6
 41+  3DA6 CA AC 3D     	jp z, canSnap
 42+  3DA9
 43+  3DA9 C3 B1 3D     	jp noSnap
 44+  3DAC
 45+  3DAC              canSnap:
 46+  3DAC
 47+  3DAC 3E 01        	ld a, 1
 48+  3DAE 32 3F 4D     	ld (harry_snap_ground), a
 49+  3DB1
 50+  3DB1              noSnap:
 51+  3DB1
 52+  3DB1
 53+  3DB1 2A 4A 4D     	ld hl, (harry_tile_address)
 54+  3DB4 7E           	ld a, (hl)
 55+  3DB5 FE F0        	cp tile_platform
 56+  3DB7 CA 6F 3D     	jp z, sort_out_inside
 57+  3DBA
 58+  3DBA              notInside:
 59+  3DBA
 60+  3DBA
 61+  3DBA CD C9 20     	call moveTileDownHL
 62+  3DBD
 63+  3DBD 7E           	ld a, (hl)
 64+  3DBE              	;ld de, tile_ram_start + row_0 + column_4
 65+  3DBE              	;ld (de), a
 66+  3DBE FE F0        	cp tile_platform
 67+  3DC0 CA CE 3D     	jp z, floorRightBelow
 68+  3DC3
 69+  3DC3 3A 33 4D     	ld a, (harry_ladder_below)
 70+  3DC6 FE 01        	cp 1
 71+  3DC8 C2 D3 3D     	jp nz, checkLeftFoot
 72+  3DCB
 73+  3DCB
 74+  3DCB C3 D3 3D     	jp checkRightFoot
 75+  3DCE
 76+  3DCE
 77+  3DCE              floorRightBelow:
 78+  3DCE
 79+  3DCE 3E 01        	ld a, 1
 80+  3DD0 32 45 4D     	ld (blocked_below), a
 81+  3DD3
 82+  3DD3
 83+  3DD3              checkLeftFoot:
 84+  3DD3
 85+  3DD3
 86+  3DD3              checkRightFoot:
 87+  3DD3
 88+  3DD3 23           	inc hl
 89+  3DD4
 90+  3DD4
 91+  3DD4 7E           	ld a, (hl)
 92+  3DD5 FE F0        	cp tile_platform
 93+  3DD7 CA E5 3D     	jp z, mightRightFoot
 94+  3DDA
 95+  3DDA FE F1        	cp tile_ladder_left
 96+  3DDC C0           	ret nz
 97+  3DDD
 98+  3DDD 3A 26 4D     	ld a, (harry_state)
 99+  3DE0 FE 02        	cp STATE_JUMPING
100+  3DE2 C8           	ret z
101+  3DE3
102+  3DE3 FE 03        	cp STATE_FALLING
103+  3DE5              	;ret z
104+  3DE5
105+  3DE5
106+  3DE5              mightRightFoot:
107+  3DE5
108+  3DE5
109+  3DE5
110+  3DE5 3A 20 4D     	ld a, (x_pos_offset)
111+  3DE8 FE 03        	cp 3
112+  3DEA D0           	ret nc
113+  3DEB
114+  3DEB 3E 01        	ld a, 1
115+  3DED 32 3D 4D     	ld (harry_right_foot_block), a
116+  3DF0
117+  3DF0 C9           	ret
118+  3DF1
# file closed: scripts/gameplay/harry/harry_floor.asm
 67   3DF1                  include "scripts/gameplay/harry/harry_left_right.asm"
# file opened: scripts/gameplay/harry/harry_left_right.asm
  1+  3DF1
  2+  3DF1              checkCollisionLeft:
  3+  3DF1
  4+  3DF1 3E 00        	ld a, 0
  5+  3DF3 32 46 4D     	ld (blocked_left), a
  6+  3DF6 32 36 4D     	ld (harry_exit_left), a
  7+  3DF9
  8+  3DF9 2A 4A 4D     	ld hl, (harry_tile_address)
  9+  3DFC              	;ld a, 3
 10+  3DFC              	;ld (hl), a
 11+  3DFC
 12+  3DFC DD 7E 11     	ld a, (ix+spr_y)
 13+  3DFF FE FF        	cp 255
 14+  3E01 CA 0F 3E     	jp z, isBlockedL
 15+  3E04
 16+  3E04 FE FE        	cp 254
 17+  3E06 CA 0F 3E     	jp z, isBlockedL
 18+  3E09
 19+  3E09 7E           	ld a, (hl)
 20+  3E0A FE F0        	cp tile_platform
 21+  3E0C C2 14 3E     	jp nz, notLeft1
 22+  3E0F
 23+  3E0F              isBlockedL:
 24+  3E0F
 25+  3E0F 3E 01        	ld a, 1
 26+  3E11 32 46 4D     	ld (blocked_left), a
 27+  3E14
 28+  3E14              notLeft1:
 29+  3E14
 30+  3E14 2B           	dec hl
 31+  3E15 7E           	ld a, (hl)
 32+  3E16 FE F0        	cp tile_platform
 33+  3E18 C2 28 3E     	jp nz, notLeft2
 34+  3E1B
 35+  3E1B 3A 20 4D     	ld a, (x_pos_offset)
 36+  3E1E FE 03        	cp 3
 37+  3E20 DA 28 3E     	jp c, notLeft2
 38+  3E23
 39+  3E23              isBlockedL2:
 40+  3E23
 41+  3E23 3E 01        	ld a, 1
 42+  3E25 32 46 4D     	ld (blocked_left), a
 43+  3E28
 44+  3E28              notLeft2:
 45+  3E28
 46+  3E28 CD C9 20     	call moveTileDownHL
 47+  3E2B
 48+  3E2B 7E           	ld a, (hl)
 49+  3E2C FE F0        	cp tile_platform
 50+  3E2E C0           	ret nz
 51+  3E2F
 52+  3E2F              isLeftExit:
 53+  3E2F
 54+  3E2F 3E 01        	ld a, 1
 55+  3E31 32 36 4D     	ld (harry_exit_left), a
 56+  3E34
 57+  3E34 C9           	ret
 58+  3E35
 59+  3E35
 60+  3E35
 61+  3E35
 62+  3E35              checkBounceLeft:
 63+  3E35
 64+  3E35 3E 00        	ld a, 0
 65+  3E37 32 42 4D     	ld (blocked_jump_left), a
 66+  3E3A
 67+  3E3A 3A 8A 4C     	ld a, (jump_direction)
 68+  3E3D FE 02        	cp jump_right_state
 69+  3E3F C8           	ret z
 70+  3E40
 71+  3E40 2A 4A 4D     	ld hl, (harry_tile_address)
 72+  3E43
 73+  3E43 DD 7E 11     	ld a, (ix+spr_y)
 74+  3E46 FE FF        	cp 255
 75+  3E48 CA 56 3E     	jp z, isBlockedLB
 76+  3E4B
 77+  3E4B FE FE        	cp 254
 78+  3E4D CA 56 3E     	jp z, isBlockedLB
 79+  3E50
 80+  3E50 7E           	ld a, (hl)
 81+  3E51 FE F0        	cp tile_platform
 82+  3E53 CA 56 3E     	jp z, isBlockedLB
 83+  3E56
 84+  3E56
 85+  3E56
 86+  3E56              isBlockedLB:
 87+  3E56
 88+  3E56 3A 20 4D     	ld a, (x_pos_offset)
 89+  3E59 FE 04        	cp 4
 90+  3E5B              	;ret c
 91+  3E5B
 92+  3E5B 3E 01        	ld a, 1
 93+  3E5D 32 42 4D     	ld (blocked_jump_left), a
 94+  3E60
 95+  3E60
 96+  3E60
 97+  3E60 C9           	ret
 98+  3E61
 99+  3E61
100+  3E61              checkBounceRight:
101+  3E61
102+  3E61 3E 00        	ld a, 0
103+  3E63 32 41 4D     	ld (blocked_jump_right), a
104+  3E66
105+  3E66 3A 26 4D     	ld a, (harry_state)
106+  3E69 FE 03        	cp STATE_FALLING
107+  3E6B C0           	ret nz
108+  3E6C
109+  3E6C
110+  3E6C 3A 8A 4C     	ld a, (jump_direction)
111+  3E6F FE 01        	cp jump_left_state
112+  3E71 C8           	ret z
113+  3E72
114+  3E72 2A 4A 4D     	ld hl, (harry_tile_address)
115+  3E75 23           	inc hl
116+  3E76
117+  3E76 7E           	ld a, (hl)
118+  3E77 FE F0        	cp tile_platform
119+  3E79 C0           	ret nz
120+  3E7A
121+  3E7A
122+  3E7A
123+  3E7A              isBlockedRB:
124+  3E7A
125+  3E7A
126+  3E7A 3A 20 4D     	ld a, (x_pos_offset)
127+  3E7D FE 04        	cp 4
128+  3E7F              	;ret c
129+  3E7F
130+  3E7F 3E 01        	ld a, 1
131+  3E81 32 41 4D     	ld (blocked_jump_right), a
132+  3E84
133+  3E84
134+  3E84
135+  3E84
136+  3E84 C9           	ret
137+  3E85
138+  3E85
139+  3E85              checkCollisionRight:
140+  3E85
141+  3E85 3E 00        	ld a, 0
142+  3E87 32 47 4D     	ld (blocked_right), a
143+  3E8A 32 37 4D     	ld (harry_exit_right), a
144+  3E8D
145+  3E8D 2A 4A 4D     	ld hl, (harry_tile_address)
146+  3E90 23           	inc hl
147+  3E91
148+  3E91 DD 7E 11     	ld a, (ix+spr_y)
149+  3E94 FE 11        	cp edgeRightX
150+  3E96 DA 9F 3E     	jp c,isBlockedR
151+  3E99
152+  3E99              checkR:
153+  3E99
154+  3E99 7E           	ld a, (hl)
155+  3E9A FE F0        	cp tile_platform
156+  3E9C C2 A4 3E     	jp nz, notRight1
157+  3E9F
158+  3E9F              isBlockedR:
159+  3E9F
160+  3E9F 3E 01        	ld a, 1
161+  3EA1 32 47 4D     	ld (blocked_right), a
162+  3EA4
163+  3EA4              notRight1:
164+  3EA4
165+  3EA4
166+  3EA4 CD C9 20     	call moveTileDownHL
167+  3EA7 23           	inc hl
168+  3EA8 7E           	ld a, (hl)
169+  3EA9 FE F0        	cp tile_platform
170+  3EAB C0           	ret nz
171+  3EAC
172+  3EAC              isRight2:
173+  3EAC
174+  3EAC 3E 01        	ld a, 1
175+  3EAE 32 37 4D     	ld (harry_exit_right), a
176+  3EB1
177+  3EB1
178+  3EB1
179+  3EB1 C9           	ret
180+  3EB2
# file closed: scripts/gameplay/harry/harry_left_right.asm
 68   3EB2                  include "scripts/gameplay/harry/harry_jump.asm"
# file opened: scripts/gameplay/harry/harry_jump.asm
  1+  3EB2              jumping_right:
  2+  3EB2
  3+  3EB2 3A 45 4D     	ld a, (blocked_below)
  4+  3EB5 FE 00        	cp 0
  5+  3EB7 CA D8 3E     	jp z, checkBounceR
  6+  3EBA
  7+  3EBA 3A 47 4D     	ld a, (blocked_right)
  8+  3EBD FE 01        	cp 1
  9+  3EBF CA E0 3E     	jp z, okayJump
 10+  3EC2
 11+  3EC2 C3 D8 3E     	jp falling_right
 12+  3EC5
 13+  3EC5
 14+  3EC5              jumping_left:
 15+  3EC5
 16+  3EC5 3A 45 4D     	ld a, (blocked_below)
 17+  3EC8 FE 00        	cp 0
 18+  3ECA CA EE 3E     	jp z, checkBounceL
 19+  3ECD
 20+  3ECD 3A 46 4D     	ld a, (blocked_left)
 21+  3ED0 FE 01        	cp 1
 22+  3ED2 CA E0 3E     	jp z, okayJump
 23+  3ED5
 24+  3ED5 C3 EE 3E     	jp falling_left
 25+  3ED8
 26+  3ED8
 27+  3ED8              falling_right:
 28+  3ED8
 29+  3ED8
 30+  3ED8
 31+  3ED8
 32+  3ED8              checkBounceR:
 33+  3ED8
 34+  3ED8 3A 47 4D         ld a, (blocked_right)
 35+  3EDB FE 01        	cp 1
 36+  3EDD CA 11 3F     	jp z, bounce_right
 37+  3EE0
 38+  3EE0
 39+  3EE0              okayJump:
 40+  3EE0
 41+  3EE0 3E C9        	ld a, air_speed_frac
 42+  3EE2 CD D0 3B     	call increaseFracX
 43+  3EE5
 44+  3EE5 DD 7E 11     	ld a, (ix + spr_y)
 45+  3EE8 DE 00        	sbc 0
 46+  3EEA DD 77 11     	ld (ix + spr_y), a
 47+  3EED
 48+  3EED C9           	ret
 49+  3EEE
 50+  3EEE
 51+  3EEE
 52+  3EEE              falling_left:
 53+  3EEE
 54+  3EEE
 55+  3EEE              checkBounceL:
 56+  3EEE
 57+  3EEE 3A 46 4D         ld a, (blocked_left)
 58+  3EF1 FE 01        	cp 1
 59+  3EF3 CA 1F 3F     	jp z, bounce_left
 60+  3EF6
 61+  3EF6
 62+  3EF6              okayJumpL:
 63+  3EF6
 64+  3EF6 DD 7E 11     	ld a, (ix + spr_y)
 65+  3EF9 FE FF        	cp 255
 66+  3EFB CA 3C 3F     	jp z, forcing
 67+  3EFE
 68+  3EFE FE FE        	cp 254
 69+  3F00 CA 3C 3F     	jp z, forcing
 70+  3F03
 71+  3F03 3E C9        	ld a, air_speed_frac
 72+  3F05 CD D0 3B     	call increaseFracX
 73+  3F08
 74+  3F08 DD 7E 11     	ld a, (ix + spr_y)
 75+  3F0B CE 00        	adc 0
 76+  3F0D DD 77 11     	ld (ix + spr_y), a
 77+  3F10
 78+  3F10
 79+  3F10
 80+  3F10 C9           	ret
 81+  3F11
 82+  3F11              bounce_right:
 83+  3F11
 84+  3F11 3A 20 4D     	ld a, (x_pos_offset)
 85+  3F14 FE 04        	cp 4
 86+  3F16 D2 E0 3E     	jp nc, okayJump
 87+  3F19
 88+  3F19 3E 01        	ld a, jump_left_state
 89+  3F1B 32 8A 4C     	ld (jump_direction), a
 90+  3F1E
 91+  3F1E
 92+  3F1E C9           	ret
 93+  3F1F
 94+  3F1F              bounce_left:
 95+  3F1F
 96+  3F1F 3A 42 4D     	ld a, (blocked_jump_left)
 97+  3F22 FE 00        	cp 0
 98+  3F24 CA F6 3E     	jp z, okayJumpL
 99+  3F27
100+  3F27 DD 7E 11     	ld a, (ix + spr_y)
101+  3F2A FE FF        	cp 255
102+  3F2C CA 3C 3F     	jp z, forcing
103+  3F2F
104+  3F2F FE FE        	cp 254
105+  3F31 CA 3C 3F     	jp z, forcing
106+  3F34
107+  3F34 FE 00        	cp 0
108+  3F36 CA 3C 3F     	jp z, forcing
109+  3F39
110+  3F39 C3 44 3F     	jp notForcing
111+  3F3C
112+  3F3C
113+  3F3C              forcing:
114+  3F3C 3E FF        	ld a, 255
115+  3F3E DD 77 11     	ld (ix +spr_y), a
116+  3F41
117+  3F41 C3 4C 3F     	jp forceBounce
118+  3F44
119+  3F44
120+  3F44              notForcing:
121+  3F44
122+  3F44 3A 20 4D     	ld a, (x_pos_offset)
123+  3F47 FE 04        	cp 4
124+  3F49 DA F6 3E     	jp c, okayJumpL
125+  3F4C              	;
126+  3F4C
127+  3F4C              forceBounce:
128+  3F4C
129+  3F4C 3E 02        	ld a, jump_right_state
130+  3F4E 32 8A 4C     	ld (jump_direction), a
131+  3F51
132+  3F51
133+  3F51 C9           	ret
134+  3F52
# file closed: scripts/gameplay/harry/harry_jump.asm
 69   3F52                  include "scripts/gameplay/harry/harry_fall.asm"
# file opened: scripts/gameplay/harry/harry_fall.asm
# file closed: scripts/gameplay/harry/harry_fall.asm
 70   3F52
 71   3F52
 72   3F52
 73   3F52              mainloop:
 74   3F52
 75   3F52 3A 09 4D         ld a,(mode)                                                                        ;get mode
 76   3F55 FE 01            cp title_mode                                                                ;is it title mode
 77   3F57 CA DD 01         jp z,title_logic                                                        ;yes
 78   3F5A FE 02            cp game_mode                                                                ;is it game mode
 79   3F5C CA 00 30         jp z,game_logic                                                                ;yes
 80   3F5F FE 04            cp game_over                                                                ;is it game over
 81   3F61 CA 27 23         jp z,game_over_logic                                                ;yes
 82   3F64 FE 08            cp life_lost
 83   3F66 CA C9 06         jp z,lose_update
 84   3F69 FE 10            cp complete_mode
 85   3F6B CA B2 31         jp z, complete_update
 86   3F6E FE 20            cp number_mode
 87   3F70 CA AF 28         jp z, number_update
 88   3F73 FE 40            cp high_score_mode
 89   3F75 CA 41 09         jp z, high_score_update
 90   3F78              wait:
 91   3F78 76               halt                                                                                ;finished processing let's wait for vsync
 92   3F79 C3 52 3F         jp mainloop
 93   3F7C
 94   3F7C                  org  $1000
 95   1000
 96   1000                   include "scripts/data/rom_6f/rom_6f.asm"
# file opened: scripts/data/rom_6f/rom_6f.asm
  1+  1000
  2+  1000                  include "scripts/data/rom_6f/level_base.asm"
# file opened: ./scripts/data/rom_6f/level_base.asm
  1++ 1000
  2++ 1000
  3++ 1000                  include "scripts/data/rom_6f/levels/level_1.asm"
# file opened: ./scripts/data/rom_6f/levels/level_1.asm
  1+++1000
  2+++1000
  3+++1000                  ;align $100
  4+++1000
  5+++1000              level_1:
  6+++1000
  7+++1000
  8+++1000              // platforms
  9+++1000 F0 15 01        defm tile_platform, palette_orange_green_orange, horizontal
 10+++1003
 11+++1003 00 00 20         defm  0, 0, 32
 12+++1006 02 04 1C         defm  2, 4, 28
 13+++1009 04 08 0B         defm  4, 8, 11
 14+++100C 0F 09 03         defm  15, 9, 3
 15+++100F 12 0A 03         defm  18, 10, 3
 16+++1012 15 0B 03         defm  21, 11, 3
 17+++1015 18 0C 03         defm  24, 12, 3
 18+++1018 17 08 07         defm  23, 8, 7
 19+++101B 06 0C 04         defm  6, 12, 4
 20+++101E 08 10 08         defm  8, 16, 8
 21+++1021 0F 0D 04         defm  15, 13, 4
 22+++1024 12 10 09         defm  18, 16, 9
 23+++1027 1D 10 03         defm  29, 16, 3
 24+++102A
 25+++102A                  ; defm  14, 17, 1
 26+++102A                  ; defm  8, 17, 1
 27+++102A
 28+++102A                 ; defm  20, 2, 3
 29+++102A
 30+++102A                 ; defm  20, 1, 4
 31+++102A                 ; defm  12, 1, 4
 32+++102A
 33+++102A
 34+++102A
 35+++102A FF               defm - 1
 36+++102B
 37+++102B
 38+++102B              // ladders
 39+++102B F1 15 00        defm  tile_ladder_left, palette_orange_green_orange, vertical
 40+++102E
 41+++102E 0A 01 12        defm 10, 1, 18
 42+++1031 05 05 06        defm 5, 5, 6
 43+++1034 10 01 06       defm 16, 1, 6
 44+++1037 1A 01 06        defm 26, 1, 6
 45+++103A
 46+++103A
 47+++103A
 48+++103A FF              defm -1
 49+++103B
 50+++103B              // ladders
 51+++103B F2 15 00         defm  tile_ladder_right, palette_orange_green_orange, vertical
 52+++103E
 53+++103E 0B 01 12         defm 11, 1, 18
 54+++1041 06 05 06         defm 6, 5, 6
 55+++1044 11 01 06         defm 17, 1, 6
 56+++1047 1B 01 06         defm 27, 1, 6
 57+++104A
 58+++104A FF               defm - 1
 59+++104B
 60+++104B              // eggs
 61+++104B E3 1D 01         defm  tile_egg, palette_white_pink_red, horizontal
 62+++104E 03 05 01         defm  3, 5, 1
 63+++1051 04 09 01         defm  4, 9, 1
 64+++1054 07 0D 01         defm  7, 13, 1
 65+++1057 09 11 01         defm  9, 17, 1
 66+++105A 14 11 01         defm  20, 17, 1
 67+++105D 1E 11 01         defm  30, 17, 1
 68+++1060 1C 09 01         defm  28, 9, 1
 69+++1063 10 0A 01         defm  16, 10, 1
 70+++1066 10 0E 01         defm  16, 14, 1
 71+++1069 06 01 01         defm  6, 1, 1
 72+++106C 14 05 01        defm  20, 5, 1
 73+++106F 1D 05 01        defm  29, 5, 1
 74+++1072
 75+++1072
 76+++1072
 77+++1072 FF               defm - 1
 78+++1073
 79+++1073              // seeds
 80+++1073 F3 15 00        defm tile_seed, palette_orange_green_orange, vertical
 81+++1076
 82+++1076 16 11 01        defm  22,17,1
 83+++1079 08 05 01        defm  8,5,1
 84+++107C 08 09 01        defm  8,9,1
 85+++107F 11 0E 01        defm  17,14,1
 86+++1082 19 0D 01        defm  25,13,1
 87+++1085 18 09 01        defm  24,9,1
 88+++1088 04 01 01        defm  4, 1, 1
 89+++108B 15 01 01        defm  21, 1, 1
 90+++108E 17 05 01        defm  23, 5, 1
 91+++1091 0F 11 01        defm  15, 17, 1
 92+++1094
 93+++1094
 94+++1094
 95+++1094 FF               defm -1
 96+++1095
 97+++1095 FE               defm -2
 98+++1096
 99+++1096              // hens
100+++1096
101+++1096 56 A0            defm 86, 160     ;sprite 2
102+++1098 77 C0            defm 119, 192        ;sprite 3
103+++109A 97 CC            defm 151, 204       ;sprite 4
104+++109C B7 BC            defm 183, 188      ;sprite 5
105+++109E D7 74            defm 215, 116       ;sprite 6
106+++10A0
107+++10A0 FD               defm -3
108+++10A1
109+++10A1
110+++10A1 00 00            defm 0, 0
111+++10A3 00 00            defm 0, 0
112+++10A5
113+++10A5 FC               defm -4
# file closed: ./scripts/data/rom_6f/levels/level_1.asm
  4++ 10A6                  include "scripts/data/rom_6f/levels/level_2.asm"
# file opened: ./scripts/data/rom_6f/levels/level_2.asm
  1+++10A6
  2+++10A6
  3+++10A6                  ;align $100
  4+++10A6
  5+++10A6              level_2:
  6+++10A6
  7+++10A6
  8+++10A6              // platforms
  9+++10A6 F0 15 01        defm tile_platform, palette_orange_green_orange, horizontal
 10+++10A9
 11+++10A9 00 00 06         defm  0, 0, 6
 12+++10AC 08 00 18         defm  8, 0, 24
 13+++10AF
 14+++10AF 00 04 0C         defm  0, 4, 12
 15+++10B2 0E 04 04         defm  14, 4, 4
 16+++10B5 14 04 04         defm  20, 4, 4
 17+++10B8 1A 04 06         defm  26, 4, 6
 18+++10BB
 19+++10BB 00 08 06         defm  0, 8, 6
 20+++10BE 08 08 10         defm  8, 8, 16
 21+++10C1 1A 08 06         defm  26, 8, 6
 22+++10C4
 23+++10C4 00 0C 12         defm  0, 12, 18
 24+++10C7 14 0C 0C         defm  20, 12, 12
 25+++10CA
 26+++10CA 08 10 0A         defm  8, 16, 10
 27+++10CD 14 10 0C         defm  20, 16, 12
 28+++10D0
 29+++10D0
 30+++10D0 FF               defm - 1
 31+++10D1
 32+++10D1
 33+++10D1              // ladders
 34+++10D1 F1 15 00        defm  tile_ladder_left, palette_orange_green_orange, vertical
 35+++10D4
 36+++10D4 03 01 0E        defm  3, 1, 14
 37+++10D7 06 0D 06        defm  6, 13, 6
 38+++10DA 09 05 0A        defm  9, 5, 10
 39+++10DD 0F 01 06        defm  15, 1, 6
 40+++10E0 0F 09 0A        defm 15, 9, 10
 41+++10E3 15 09 06        defm 21, 9, 6
 42+++10E6 1B 01 0A        defm 27, 1, 10
 43+++10E9 1B 0D 06        defm 27, 13, 6
 44+++10EC
 45+++10EC
 46+++10EC
 47+++10EC
 48+++10EC
 49+++10EC FF              defm -1
 50+++10ED
 51+++10ED              // ladders
 52+++10ED F2 15 00         defm  tile_ladder_right, palette_orange_green_orange, vertical
 53+++10F0
 54+++10F0 04 01 0E       	defm 4, 1, 14
 55+++10F3 07 0D 06       	defm  7, 13, 6
 56+++10F6 0A 05 0A       	defm  10, 5, 10
 57+++10F9 10 01 06       	defm 16, 1, 6
 58+++10FC 10 09 0A       	defm 16, 9, 10
 59+++10FF 16 09 06       	defm 22, 9, 6
 60+++1102 1C 01 0A       	defm 28, 1, 10
 61+++1105 1C 0D 06       	defm 28, 13, 6
 62+++1108
 63+++1108
 64+++1108
 65+++1108 FF               defm - 1
 66+++1109
 67+++1109              // eggs
 68+++1109 E3 1D 01         defm  tile_egg, palette_white_pink_red, horizontal
 69+++110C                 ; defm  3, 5, 1
 70+++110C
 71+++110C 01 05 01        defm 1, 5, 1
 72+++110F 01 09 01        defm 1, 9, 1
 73+++1112 06 05 01        defm 6, 5, 1
 74+++1115 08 01 01        defm 8, 1, 1
 75+++1118 14 01 01        defm 20, 1, 1
 76+++111B 15 05 01        defm 21, 5, 1
 77+++111E 0C 09 01        defm 12, 9, 1
 78+++1121 0C 0D 01        defm 12, 13, 1
 79+++1124 0C 11 01        defm 12, 17, 1
 80+++1127 18 11 01        defm 24, 17, 1
 81+++112A 1E 11 01        defm 30, 17, 1
 82+++112D 1E 09 01        defm 30, 9, 1
 83+++1130
 84+++1130
 85+++1130
 86+++1130
 87+++1130
 88+++1130
 89+++1130 FF               defm - 1
 90+++1131
 91+++1131              // seeds
 92+++1131 F3 15 00        defm tile_seed, palette_orange_green_orange, vertical
 93+++1134
 94+++1134 01 01 01         defm  1, 1, 1
 95+++1137 05 01 01         defm 5, 1, 1
 96+++113A 19 01 01         defm 25, 1, 1
 97+++113D 01 0D 01         defm 1, 13, 1
 98+++1140 14 11 01         defm 20, 17, 1
 99+++1143 11 0D 01         defm 17, 13, 1
100+++1146 1A 05 01         defm 26, 5, 1
101+++1149
102+++1149 FF               defm -1
103+++114A
104+++114A FE               defm -2
105+++114B
106+++114B              // hens
107+++114B
108+++114B 56 B0            defm 86, 176        ;sprite 2
109+++114D D7 F4            defm 215, 244        ;sprite 3
110+++114F 97 1C            defm 151, 28       ;sprite 4
111+++1151 97 70            defm 151, 112      ;sprite 5
112+++1153 57 5C            defm 87, 92       ;sprite 6
113+++1155
114+++1155 FD               defm -3
115+++1156
116+++1156 00 00            defm 0, 0
117+++1158 00 00            defm 0, 0
118+++115A
119+++115A FC               defm -4
# file closed: ./scripts/data/rom_6f/levels/level_2.asm
  5++ 115B                  include "scripts/data/rom_6f/levels/level_3.asm"
# file opened: ./scripts/data/rom_6f/levels/level_3.asm
  1+++115B                  ;align $100
  2+++115B
  3+++115B              level_3:
  4+++115B
  5+++115B              // gaps
  6+++115B F0 15 01        defm tile_platform, palette_orange_green_orange, horizontal
  7+++115E
  8+++115E 00 00 04         defm  0, 0, 4
  9+++1161 04 01 03         defm  4, 1, 3
 10+++1164 0B 00 05         defm  11, 0, 5
 11+++1167 00 08 07         defm  0, 8, 7
 12+++116A 12 00 0E         defm  18, 0, 14
 13+++116D 00 0C 04         defm  0, 12, 4
 14+++1170 06 0F 01         defm  6, 15, 1
 15+++1173 0B 0F 07         defm  11, 15, 7
 16+++1176 12 0E 03         defm  18, 14, 3
 17+++1179 15 11 05         defm  21, 17, 5
 18+++117C 1A 10 01         defm  26, 16, 1
 19+++117F 1D 10 03         defm  29, 16, 3
 20+++1182 16 0D 02         defm  22, 13, 2
 21+++1185 19 0C 02         defm  25, 12, 2
 22+++1188 1B 0B 02         defm  27, 11, 2
 23+++118B 1C 08 03         defm  28, 8, 3
 24+++118E 1A 07 02         defm  26, 7, 2
 25+++1191 19 03 04         defm  25, 3, 4
 26+++1194 0B 04 06         defm  11, 4, 6
 27+++1197 12 04 02         defm  18, 4, 2
 28+++119A 15 05 02         defm  21, 5, 2
 29+++119D 17 06 02         defm  23, 6, 2
 30+++11A0 12 09 03         defm  18, 9, 3
 31+++11A3 16 09 02         defm  22, 9, 2
 32+++11A6
 33+++11A6
 34+++11A6 FF               defm - 1
 35+++11A7
 36+++11A7
 37+++11A7              // ladders
 38+++11A7 F1 15 00        defm  tile_ladder_left, palette_orange_green_orange, vertical
 39+++11AA
 40+++11AA 01 01 0A        defm 1, 1, 10
 41+++11AD 04 09 09        defm 4, 9, 9
 42+++11B0 0C 05 0D        defm 12, 5, 13
 43+++11B3 0F 05 0D        defm 15, 5, 13
 44+++11B6 13 0F 05        defm 19, 15, 5
 45+++11B9 1D 09 05        defm 29, 9, 5
 46+++11BC 1D 01 05        defm 29, 1, 5
 47+++11BF
 48+++11BF
 49+++11BF FF              defm -1
 50+++11C0
 51+++11C0              // ladders
 52+++11C0 F2 15 00         defm  tile_ladder_right, palette_orange_green_orange, vertical
 53+++11C3 02 01 0A         defm 2, 1, 10
 54+++11C6 05 09 09         defm 5, 9, 9
 55+++11C9 0D 05 0D         defm 13, 5, 13
 56+++11CC 10 05 0D         defm 16, 5, 13
 57+++11CF 14 0F 05         defm 20, 15, 5
 58+++11D2 1E 09 05         defm 30, 9, 5
 59+++11D5 1E 01 05         defm 30, 1, 5
 60+++11D8
 61+++11D8
 62+++11D8
 63+++11D8 FF               defm - 1
 64+++11D9
 65+++11D9              // eggs
 66+++11D9 E3 1D 01         defm  tile_egg, palette_white_pink_red, horizontal
 67+++11DC 06 02 01         defm  6, 2, 1
 68+++11DF 06 09 01         defm  6, 9, 1
 69+++11E2 06 10 01         defm  6, 16, 1
 70+++11E5 19 01 01         defm  25, 1, 1
 71+++11E8 18 07 01         defm  24, 7, 1
 72+++11EB 17 0A 01         defm  23, 10, 1
 73+++11EE 1A 0D 01         defm  26, 13, 1
 74+++11F1 1D 0E 01         defm  29, 14, 1
 75+++11F4 1E 11 01         defm  30, 17, 1
 76+++11F7 0E 05 01         defm  14, 5, 1
 77+++11FA 01 0D 01         defm  1, 13, 1
 78+++11FD 1A 04 01         defm  26, 4, 1
 79+++1200
 80+++1200
 81+++1200 FF               defm - 1
 82+++1201
 83+++1201              // seeds
 84+++1201 F3 15 00        defm tile_seed, palette_orange_green_orange, vertical
 85+++1204 0B 10 01        defm  11,16,1
 86+++1207 0B 05 01        defm  11,5,1
 87+++120A 16 01 01        defm  22,1,1
 88+++120D 14 0A 01        defm  20,10,1
 89+++1210 16 0E 01        defm  22,14,1
 90+++1213 1D 11 01        defm  29,17,1
 91+++1216 12 0F 01        defm  18,15,1
 92+++1219 03 09 01        defm  3,9,1
 93+++121C 03 01 01        defm  3,1,1
 94+++121F 00 0D 01         defm  0, 13, 1
 95+++1222
 96+++1222
 97+++1222 FF               defm -1
 98+++1223
 99+++1223 FE               defm -2
100+++1224
101+++1224                 // hens
102+++1224
103+++1224 5E 94           defm 94, 148       ;sprite 2
104+++1226 77 F0           defm 119, 240        ;sprite 3
105+++1228 BF 28           defm 191, 40      ;sprite 4
106+++122A D7 04           defm 215, 4      ;sprite 5
107+++122C B7 A0           defm 183, 160       ;sprite 6
108+++122E
109+++122E FD               defm -3
110+++122F
111+++122F                  // lifts
112+++122F
113+++122F                  ;defw tile_ram_start + row_8 + column_2
114+++122F                  ;defw tile_ram_start + row_8 + column_10
115+++122F
116+++122F                  //    Y    X
117+++122F E0 C0            defm 224, 192
118+++1231 A0 C0            defm 160, 192
119+++1233
120+++1233 FC               defm -4
121+++1234
122+++1234
123+++1234 FB               defm -5
124+++1235
# file closed: ./scripts/data/rom_6f/levels/level_3.asm
  6++ 1235                  include "scripts/data/rom_6f/levels/level_4.asm"
# file opened: ./scripts/data/rom_6f/levels/level_4.asm
  1+++1235              level_4:
  2+++1235
  3+++1235
  4+++1235              // platforms
  5+++1235 F0 15 01        defm tile_platform, palette_orange_green_orange, horizontal
  6+++1238
  7+++1238 00 00 08         defm  0, 0, 8
  8+++123B 09 00 08         defm  9, 0, 8
  9+++123E 15 00 0B         defm  21, 0, 11
 10+++1241
 11+++1241 00 04 08         defm 0, 4, 8
 12+++1244 0A 04 07         defm 10, 4, 7
 13+++1247 15 04 07         defm 21, 4, 7
 14+++124A 1E 04 02         defm 30, 4, 2
 15+++124D
 16+++124D 00 08 03         defm 0, 8, 3
 17+++1250 04 09 02         defm 4, 9, 2
 18+++1253 07 0A 02         defm 7, 10, 2
 19+++1256 0A 0B 02         defm 10, 11, 2
 20+++1259 0E 0C 03         defm 14, 12, 3
 21+++125C 15 0C 01         defm 21, 12, 1
 22+++125F 19 0C 07         defm 25, 12, 7
 23+++1262
 24+++1262 0A 08 01         defm 10, 8, 1
 25+++1265 15 08 07         defm 21, 8, 7
 26+++1268 1D 07 03         defm 29, 7, 3
 27+++126B
 28+++126B 00 0C 04         defm 0, 12, 4
 29+++126E 05 0D 01         defm 5, 13, 1
 30+++1271 06 0E 01         defm 6, 14, 1
 31+++1274 07 0F 01         defm 7, 15, 1
 32+++1277 08 10 02         defm 8, 16, 2
 33+++127A 0B 10 06         defm 11, 16, 6
 34+++127D 15 10 0B         defm 21, 16, 11
 35+++1280
 36+++1280
 37+++1280
 38+++1280 FF               defm - 1
 39+++1281
 40+++1281
 41+++1281
 42+++1281              // ladders
 43+++1281 F1 15 00        defm  tile_ladder_left, palette_orange_green_orange, vertical
 44+++1284
 45+++1284 04 01 06        defm 4, 1, 6
 46+++1287 0C 01 12        defm 12, 1, 18
 47+++128A 18 01 06        defm 24, 1, 6
 48+++128D 16 09 0A        defm 22, 9, 10
 49+++1290 1D 0C 07        defm 29, 12, 7
 50+++1293
 51+++1293
 52+++1293
 53+++1293
 54+++1293
 55+++1293               ;  defm 10, 1, 18
 56+++1293
 57+++1293
 58+++1293
 59+++1293 FF              defm -1
 60+++1294
 61+++1294              // ladders
 62+++1294 F2 15 00         defm  tile_ladder_right, palette_orange_green_orange, vertical
 63+++1297
 64+++1297 05 01 06       	defm 5, 1, 6
 65+++129A 0D 01 12       	defm 13, 1, 18
 66+++129D 19 01 06       	defm 25, 1, 6
 67+++12A0 17 09 0A       	defm 23, 9, 10
 68+++12A3 1E 0C 07       	defm 30, 12, 7
 69+++12A6                 ; defm 11, 1, 18
 70+++12A6
 71+++12A6 FF               defm - 1
 72+++12A7
 73+++12A7              // eggs
 74+++12A7 E3 1D 01         defm  tile_egg, palette_white_pink_red, horizontal
 75+++12AA                 ; defm  3, 5, 1
 76+++12AA
 77+++12AA 01 01 01         defm 1, 1, 1
 78+++12AD 01 09 01         defm 1, 9, 1
 79+++12B0 01 0D 01         defm 1, 13, 1
 80+++12B3 0A 05 01         defm 10, 5, 1
 81+++12B6 15 01 01         defm 21, 1, 1
 82+++12B9
 83+++12B9
 84+++12B9 0F 0D 01         defm 15, 13, 1
 85+++12BC 15 09 01         defm 21, 9, 1
 86+++12BF
 87+++12BF 1A 13 01         defm 26, 19, 1
 88+++12C2 1A 10 01         defm 26, 16, 1
 89+++12C5 1B 0C 01         defm 27, 12, 1
 90+++12C8
 91+++12C8
 92+++12C8 1B 05 01         defm 27, 5, 1
 93+++12CB 1E 08 01         defm 30, 8, 1
 94+++12CE
 95+++12CE
 96+++12CE
 97+++12CE
 98+++12CE
 99+++12CE
100+++12CE
101+++12CE FF               defm - 1
102+++12CF
103+++12CF              // seeds
104+++12CF F3 15 00        defm tile_seed, palette_orange_green_orange, vertical
105+++12D2
106+++12D2                ; defm  22,17,1
107+++12D2
108+++12D2 01 05 01       	defm 1, 5, 1
109+++12D5 08 0B 01       	defm 8, 11, 1
110+++12D8 0E 11 01       	defm 14, 17, 1
111+++12DB 15 11 01       	defm  21, 17, 1
112+++12DE 10 01 01       	defm  16, 1, 1
113+++12E1 1D 01 01       	defm 29, 1, 1
114+++12E4
115+++12E4 FF               defm -1
116+++12E5
117+++12E5 FE               defm -2
118+++12E6
119+++12E6              // hens
120+++12E6
121+++12E6 56 84            defm 86, 132        ;sprite 2
122+++12E8 57 28            defm 87, 40        ;sprite 3
123+++12EA D7 28            defm 215, 40       ;sprite 4
124+++12EC D7 D0            defm 215, 208      ;sprite 5
125+++12EE B7 84            defm 183, 132       ;sprite 6
126+++12F0
127+++12F0 FD               defm -3
128+++12F1
129+++12F1 00 00            defw 0
130+++12F3 00 00            defw 0
131+++12F5
132+++12F5 FC               defm -4
# file closed: ./scripts/data/rom_6f/levels/level_4.asm
  7++ 12F6                  include "scripts/data/rom_6f/levels/level_5.asm"
# file opened: ./scripts/data/rom_6f/levels/level_5.asm
  1+++12F6              level_5:
  2+++12F6
  3+++12F6
  4+++12F6              // platforms
  5+++12F6 F0 15 01        defm tile_platform, palette_orange_green_orange, horizontal
  6+++12F9
  7+++12F9 00 00 03         defm  0, 0, 3
  8+++12FC 04 00 0E         defm  4, 0, 14
  9+++12FF 14 00 04         defm  20, 0, 4
 10+++1302 1C 00 04         defm  28, 0, 4
 11+++1305
 12+++1305 00 04 0A         defm  0, 4, 10
 13+++1308 0E 04 0A         defm  14, 4, 10
 14+++130B
 15+++130B 00 08 0A         defm  0, 8, 10
 16+++130E 0E 08 0A         defm 14, 8, 10
 17+++1311 1E 08 02         defm 30, 8, 2
 18+++1314
 19+++1314 00 0C 0A         defm 0, 12, 10
 20+++1317 15 0D 02         defm 21, 13, 2
 21+++131A
 22+++131A 06 10 08         defm 6, 16, 8
 23+++131D 0F 0F 01         defm 15, 15, 1
 24+++1320 11 0E 04         defm 17, 14, 4
 25+++1323 14 11 04         defm 20, 17, 4
 26+++1326
 27+++1326 1C 10 04         defm 28, 16, 4
 28+++1329
 29+++1329
 30+++1329 FF               defm - 1
 31+++132A
 32+++132A
 33+++132A              // ladders
 34+++132A F1 15 00        defm  tile_ladder_left, palette_orange_green_orange, vertical
 35+++132D
 36+++132D 04 01 06        defm 4, 1, 6
 37+++1330 0B 01 05        defm 11, 1, 5
 38+++1333 0F 01 06        defm 15, 1, 6
 39+++1336 0B 07 07        defm 11, 7, 7
 40+++1339 03 09 06        defm 3, 9, 6
 41+++133C 07 09 0A        defm 7, 9, 10
 42+++133F 12 0F 05        defm 18, 15, 5
 43+++1342
 44+++1342 15 01 06        defm 21, 1, 6
 45+++1345 12 05 06        defm 18, 5, 6
 46+++1348
 47+++1348
 48+++1348
 49+++1348
 50+++1348
 51+++1348               ;  defm 10, 1, 18
 52+++1348
 53+++1348
 54+++1348
 55+++1348 FF              defm -1
 56+++1349
 57+++1349              // ladders
 58+++1349 F2 15 00         defm  tile_ladder_right, palette_orange_green_orange, vertical
 59+++134C
 60+++134C 05 01 06         defm 5, 1, 6
 61+++134F 0C 01 05         defm 12, 1, 5
 62+++1352 10 01 06         defm 16, 1, 6
 63+++1355 0C 07 07         defm 12, 7, 7
 64+++1358 04 09 06         defm 4, 9, 6
 65+++135B 08 09 0A         defm 8, 9, 10
 66+++135E 13 0F 05         defm 19, 15, 5
 67+++1361 16 01 06         defm 22, 1, 6
 68+++1364 13 05 06         defm 19, 5, 6
 69+++1367
 70+++1367                 ; defm 11, 1, 18
 71+++1367
 72+++1367 FF               defm - 1
 73+++1368
 74+++1368              // eggs
 75+++1368 E3 1D 01         defm  tile_egg, palette_white_pink_red, horizontal
 76+++136B
 77+++136B 01 01 01         defm 1, 1, 1
 78+++136E 01 05 01         defm 1, 5, 1
 79+++1371 01 09 01         defm 1, 9, 1
 80+++1374 01 0D 01         defm 1, 13, 1
 81+++1377 08 05 01         defm 8, 5, 1
 82+++137A 09 11 01         defm 9, 17, 1
 83+++137D
 84+++137D 11 0F 01         defm 17, 15, 1
 85+++1380 15 12 01         defm 21, 18, 1
 86+++1383 1E 11 01         defm 30, 17, 1
 87+++1386 1E 09 01         defm 30, 9, 1
 88+++1389 0E 08 01         defm 14, 8, 1
 89+++138C 14 04 01         defm 20, 4, 1
 90+++138F                 ; defm  3, 5, 1
 91+++138F
 92+++138F
 93+++138F
 94+++138F
 95+++138F
 96+++138F
 97+++138F FF               defm - 1
 98+++1390
 99+++1390              // seeds
100+++1390 F3 15 01        defm tile_seed, palette_orange_green_orange, horizontal
101+++1393
102+++1393                ; defm  22,17,1
103+++1393
104+++1393 07 01 03       	defm 7, 1, 3
105+++1396 14 01 01       	defm 20, 1, 1
106+++1399 17 01 01       	defm 23, 1, 1
107+++139C 1C 01 01       	defm 28, 1, 1
108+++139F 17 09 01       	defm 23, 9, 1
109+++13A2 10 09 01       	defm 16, 9, 1
110+++13A5 06 11 01       	defm 6, 17, 1
111+++13A8 0B 11 01       	defm 11, 17, 1
112+++13AB 0C 11 01       	defm 12, 17, 1
113+++13AE 17 12 01       	defm 23, 18, 1
114+++13B1 1C 11 01       	defm 28, 17, 1
115+++13B4
116+++13B4
117+++13B4 FF               defm -1
118+++13B5
119+++13B5 FE               defm -2
120+++13B6
121+++13B6              // hens
122+++13B6
123+++13B6 B6 58             defm 182, 88       ;sprite 6
124+++13B8 77 F4            defm 119, 244       ;sprite 2
125+++13BA B7 F4            defm 183, 244        ;sprite 3
126+++13BC 97 D8            defm 151, 216      ;sprite 4
127+++13BE 97 5C            defm 151, 92      ;sprite 5
128+++13C0
129+++13C0
130+++13C0 FD               defm -3
131+++13C1
132+++13C1
133+++13C1                  //    Y    X
134+++13C1 D0 38            defm 208, 56
135+++13C3 90 38            defm 144, 56
136+++13C5
137+++13C5
138+++13C5 FC               defm -4
# file closed: ./scripts/data/rom_6f/levels/level_5.asm
  8++ 13C6                  include "scripts/data/rom_6f/levels/level_6.asm"
# file opened: ./scripts/data/rom_6f/levels/level_6.asm
  1+++13C6              level_6:
  2+++13C6
  3+++13C6
  4+++13C6              // platforms
  5+++13C6 F0 15 01        defm tile_platform, palette_orange_green_orange, horizontal
  6+++13C9
  7+++13C9 00 00 05         defm  0, 0, 5
  8+++13CC 09 00 05         defm  9, 0, 5
  9+++13CF 12 00 06         defm  18, 0, 6
 10+++13D2
 11+++13D2 00 04 04         defm  0, 4, 4
 12+++13D5 05 04 05         defm  5, 4, 5
 13+++13D8 13 04 06         defm  19, 4, 6
 14+++13DB
 15+++13DB 04 08 08         defm  4, 8, 8
 16+++13DE 13 08 08         defm  19, 8, 8
 17+++13E1 1D 07 03         defm  29, 7, 3
 18+++13E4
 19+++13E4 00 0C 0A         defm 0, 12, 10
 20+++13E7 1A 0C 06         defm 26, 12, 6
 21+++13EA
 22+++13EA 09 10 02         defm 09, 16, 2
 23+++13ED 0C 10 02         defm 12, 16, 2
 24+++13F0
 25+++13F0 13 0F 08         defm 19, 15, 8
 26+++13F3
 27+++13F3 1D 11 03         defm 29, 17, 3
 28+++13F6
 29+++13F6 FF               defm - 1
 30+++13F7
 31+++13F7
 32+++13F7              // ladders
 33+++13F7 F1 15 00        defm  tile_ladder_left, palette_orange_green_orange, vertical
 34+++13FA
 35+++13FA 01 01 06        defm 1, 1, 6
 36+++13FD 06 03 0C        defm 6, 3, 12
 37+++1400 1B 01 0A        defm 27, 1, 10
 38+++1403 1B 0C 08        defm 27, 12, 8
 39+++1406 16 05 06        defm 22, 5, 6
 40+++1409 16 0E 04        defm 22, 14, 4
 41+++140C
 42+++140C               ;  defm 10, 1, 18
 43+++140C
 44+++140C
 45+++140C
 46+++140C FF              defm -1
 47+++140D
 48+++140D              // ladders
 49+++140D F2 15 00         defm  tile_ladder_right, palette_orange_green_orange, vertical
 50+++1410
 51+++1410 02 01 06       	defm 2, 1, 6
 52+++1413 07 03 0C       	defm 7, 3, 12
 53+++1416 1C 01 0A        defm 28, 1, 10
 54+++1419 1C 0C 08        defm 28, 12, 8
 55+++141C 17 05 06        defm 23, 5, 6
 56+++141F 17 0E 04        defm 23, 14, 4
 57+++1422                 ; defm 11, 1, 18
 58+++1422
 59+++1422 FF               defm - 1
 60+++1423
 61+++1423              // eggs
 62+++1423 E3 1D 01         defm  tile_egg, palette_white_pink_red, horizontal
 63+++1426                 ; defm  3, 5, 1
 64+++1426
 65+++1426 04 01 01         defm 4, 1, 1
 66+++1429 08 05 01         defm 8, 5, 1
 67+++142C 13 05 01         defm 19, 5, 1
 68+++142F 13 09 01         defm 19, 9, 1
 69+++1432 19 09 01         defm 25, 9, 1
 70+++1435 1A 01 01         defm 26, 1, 1
 71+++1438
 72+++1438 1E 12 01         defm 30, 18, 1
 73+++143B 13 10 01         defm 19, 16, 1
 74+++143E 05 10 01         defm 5, 16, 1
 75+++1441 09 11 01         defm 9, 17, 1
 76+++1444 0B 0D 01         defm 11, 13, 1
 77+++1447 1E 0D 01         defm 30, 13, 1
 78+++144A
 79+++144A
 80+++144A
 81+++144A
 82+++144A
 83+++144A FF               defm - 1
 84+++144B
 85+++144B              // seeds
 86+++144B F3 15 01        defm tile_seed, palette_orange_green_orange, horizontal
 87+++144E
 88+++144E 01 0D 04        defm 1, 13, 4
 89+++1451 0B 09 01        defm 11, 9, 1
 90+++1454 13 01 04        defm 19, 1, 4
 91+++1457 1E 08 01        defm 30, 8, 1
 92+++145A                ; defm  22,17,1
 93+++145A
 94+++145A FF               defm -1
 95+++145B
 96+++145B FE               defm -2
 97+++145C
 98+++145C              // hens
 99+++145C
100+++145C D6 EC            defm 214, 236        ;sprite 2
101+++145E 77 C0            defm 119, 192        ;sprite 3
102+++1460 9F 1C            defm 159, 28       ;sprite 4
103+++1462
104+++1462 B7 5E            defm 183, 94       ;sprite 6
105+++1464 77 1C            defm 119, 28      ;sprite 5
106+++1466
107+++1466 FD               defm -3
108+++1467
109+++1467 D0 88            defm 208, 136
110+++1469 90 88            defm 144, 136
111+++146B FC               defm -4
# file closed: ./scripts/data/rom_6f/levels/level_6.asm
  9++ 146C                  include "scripts/data/rom_6f/levels/level_7.asm"
# file opened: ./scripts/data/rom_6f/levels/level_7.asm
  1+++146C              level_7:
  2+++146C
  3+++146C
  4+++146C              // platforms
  5+++146C F0 15 01        defm tile_platform, palette_orange_green_orange, horizontal
  6+++146F
  7+++146F 05 00 04         defm  5, 0, 4
  8+++1472 0C 00 03         defm  12, 0, 3
  9+++1475
 10+++1475 09 01 03         defm  9, 1, 3
 11+++1478 0F 01 01         defm  15, 1, 1
 12+++147B 0F 02 01         defm  15, 2, 1
 13+++147E
 14+++147E 00 02 01         defm  0, 2, 1
 15+++1481 03 04 02         defm  3, 4, 2
 16+++1484
 17+++1484 00 08 04         defm  0, 8, 4
 18+++1487 00 0C 0A         defm  0, 12, 10
 19+++148A 0B 0C 03         defm  11, 12, 3
 20+++148D
 21+++148D 0A 05 05         defm  10, 5, 5
 22+++1490 0A 06 01         defm  10, 6, 1
 23+++1493 0A 07 01         defm  10, 7, 1
 24+++1496 0A 08 01         defm  10, 8, 1
 25+++1499 0A 09 01         defm  10, 9, 1
 26+++149C
 27+++149C 0E 08 01         defm  14, 8, 1
 28+++149F 0E 09 01         defm  14, 9, 1
 29+++14A2
 30+++14A2 11 08 03         defm  17, 8, 3
 31+++14A5 16 06 06         defm  22, 6, 6
 32+++14A8 13 0B 04         defm  19, 11, 4
 33+++14AB
 34+++14AB
 35+++14AB
 36+++14AB 12 10 0A         defm 18, 16, 10
 37+++14AE
 38+++14AE 15 02 01         defm 21, 2, 1
 39+++14B1 1A 01 03         defm 26, 1, 3
 40+++14B4
 41+++14B4
 42+++14B4
 43+++14B4
 44+++14B4 FF               defm - 1
 45+++14B5
 46+++14B5
 47+++14B5              // ladders
 48+++14B5 F1 15 00        defm  tile_ladder_left, palette_orange_green_orange, vertical
 49+++14B8
 50+++14B8 01 01 0E        	defm 1, 1, 14
 51+++14BB 05 01 06        	defm 5, 1, 6
 52+++14BE
 53+++14BE 06 10 04        	defm 6, 16, 4
 54+++14C1 0A 10 04        	defm 10, 16, 4
 55+++14C4 0E 10 04        	defm 14, 16, 4
 56+++14C7
 57+++14C7 14 0C 07        	defm 20, 12, 7
 58+++14CA
 59+++14CA 17 07 07        	defm 23, 7, 7
 60+++14CD
 61+++14CD
 62+++14CD               ;  defm 10, 1, 18
 63+++14CD
 64+++14CD
 65+++14CD
 66+++14CD FF              defm -1
 67+++14CE
 68+++14CE              // ladders
 69+++14CE F2 15 00         defm  tile_ladder_right, palette_orange_green_orange, vertical
 70+++14D1
 71+++14D1 02 01 0E       	defm 2, 1, 14
 72+++14D4 06 01 06       	defm 6, 1, 6
 73+++14D7
 74+++14D7 07 10 04       	 defm 7, 16, 4
 75+++14DA 0B 10 04        	defm 11, 16, 4
 76+++14DD 0F 10 04        	defm 15, 16, 4
 77+++14E0
 78+++14E0 15 0C 07        	defm 21, 12, 7
 79+++14E3
 80+++14E3 18 07 07        	defm 24, 7, 7
 81+++14E6
 82+++14E6
 83+++14E6                 ; defm 11, 1, 18
 84+++14E6
 85+++14E6 FF               defm - 1
 86+++14E7
 87+++14E7              // eggs
 88+++14E7 E3 1D 01         defm  tile_egg, palette_white_pink_red, horizontal
 89+++14EA                 ; defm  3, 5, 1
 90+++14EA
 91+++14EA 03 02 01        	defm 3, 2, 1
 92+++14ED 15 03 01        	defm 21, 3, 1
 93+++14F0 1C 01 01        	defm 28, 1, 1
 94+++14F3
 95+++14F3 12 09 01        	defm 18, 9, 1
 96+++14F6 0C 06 01        	defm 12, 6, 1
 97+++14F9 0C 0D 01        	defm 12, 13, 1
 98+++14FC
 99+++14FC 08 12 01        	defm 8, 18, 1
100+++14FF 0C 12 01        	defm 12, 18, 1
101+++1502 10 12 01        	defm 16, 18, 1
102+++1505
103+++1505 19 07 01        	defm 25, 7, 1
104+++1508 19 0B 01        	defm 25, 11, 1
105+++150B 19 11 01        	defm 25, 17, 1
106+++150E
107+++150E
108+++150E
109+++150E
110+++150E FF               defm - 1
111+++150F
112+++150F              // seeds
113+++150F F3 15 00        defm tile_seed, palette_orange_green_orange, vertical
114+++1512
115+++1512                ; defm  22,17,1
116+++1512
117+++1512 04 05 01       	defm 4, 5, 1
118+++1515 08 0D 01       	defm 8, 13, 1
119+++1518 0D 06 01       	defm 13, 6, 1
120+++151B
121+++151B 13 11 01       	defm 19, 17, 1
122+++151E
123+++151E
124+++151E FF               defm -1
125+++151F
126+++151F FE               defm -2
127+++1520
128+++1520              // hens
129+++1520
130+++1520 56 60            defm 86, 96        ;sprite 2
131+++1522 77 F8            defm 119, 248        ;sprite 3
132+++1524 A7 54            defm 167, 84       ;sprite 4
133+++1526 97 EC            defm 151, 236      ;sprite 5
134+++1528 C7 04            defm 199, 4       ;sprite 6
135+++152A
136+++152A FD               defm -3
137+++152B
138+++152B D0 10            defm 208, 16
139+++152D 90 10            defm 144, 16
140+++152F
141+++152F FC               defm -4
# file closed: ./scripts/data/rom_6f/levels/level_7.asm
 10++ 1530                  include "scripts/data/rom_6f/levels/level_8.asm"
# file opened: ./scripts/data/rom_6f/levels/level_8.asm
  1+++1530              level_8:
  2+++1530
  3+++1530
  4+++1530              // platforms
  5+++1530 F0 15 01        defm tile_platform, palette_orange_green_orange, horizontal
  6+++1533
  7+++1533 00 00 20         defm  0, 0, 32
  8+++1536 02 04 05       	defm  2, 4, 5
  9+++1539 0A 04 0C       	defm  10, 4, 12
 10+++153C 19 04 05       	defm  25, 4, 5
 11+++153F
 12+++153F 03 08 07       	defm 3, 8, 7
 13+++1542 0D 08 06       	defm 13, 8, 6
 14+++1545 16 08 07       	defm 22, 8, 7
 15+++1548
 16+++1548 04 0C 06       	defm 4, 12, 6
 17+++154B 0D 0C 06       	defm 13, 12, 6
 18+++154E 16 0C 06       	defm 22, 12, 6
 19+++1551
 20+++1551 05 10 02       	defm 5, 16, 2
 21+++1554 0A 10 0C       	defm 10, 16, 12
 22+++1557 19 10 02       	defm 25, 16, 2
 23+++155A
 24+++155A FF               defm - 1
 25+++155B
 26+++155B
 27+++155B              // seeds
 28+++155B F3 15 01        defm tile_seed, palette_orange_green_orange, horizontal
 29+++155E
 30+++155E 01 01 1E        defm 1, 1, 30
 31+++1561 0A 03 0C        defm 10, 3, 12
 32+++1564
 33+++1564                ; defm  22,17,1
 34+++1564
 35+++1564 FF               defm -1
 36+++1565
 37+++1565
 38+++1565
 39+++1565              // ladders
 40+++1565 F1 15 00        defm  tile_ladder_left, palette_orange_green_orange, vertical
 41+++1568
 42+++1568 03 01 06        defm 3, 1, 6
 43+++156B 1B 01 06        defm 27, 1, 6
 44+++156E 05 09 06        defm 5, 9, 6
 45+++1571
 46+++1571 19 09 06        defm 25, 9, 6
 47+++1574
 48+++1574 0F 05 06        defm 15, 5, 6
 49+++1577 0F 0D 06        defm 15, 13, 6
 50+++157A
 51+++157A               ;  defm 10, 1, 18
 52+++157A
 53+++157A
 54+++157A
 55+++157A FF              defm -1
 56+++157B
 57+++157B              // ladders
 58+++157B F2 15 00         defm  tile_ladder_right, palette_orange_green_orange, vertical
 59+++157E
 60+++157E 04 01 06       	defm 4, 1, 6
 61+++1581 1C 01 06       	defm 28, 1, 6
 62+++1584
 63+++1584 06 09 06       	defm 6, 9, 6
 64+++1587 1A 09 06       	defm 26, 9, 6
 65+++158A
 66+++158A 10 05 06       	defm 16, 5, 6
 67+++158D 10 0D 06        defm 16, 13, 6
 68+++1590                 ; defm 11, 1, 18
 69+++1590
 70+++1590 FF               defm - 1
 71+++1591
 72+++1591              // eggs
 73+++1591 E3 1D 01         defm  tile_egg, palette_white_pink_red, horizontal
 74+++1594                 ; defm  3, 5, 1
 75+++1594
 76+++1594 08 04 01        defm 8, 4, 1
 77+++1597 08 10 01        defm 8, 16, 1
 78+++159A 06 13 01        defm 6, 19, 1
 79+++159D 0C 10 01        defm 12, 16, 1
 80+++15A0 13 10 01        defm 19, 16, 1
 81+++15A3 17 10 01        defm 23, 16, 1
 82+++15A6 19 13 01        defm 25, 19, 1
 83+++15A9
 84+++15A9 14 08 01        defm 20, 8, 1
 85+++15AC 14 0C 01        defm 20, 12, 1
 86+++15AF
 87+++15AF 0B 08 01        defm 11, 8, 1
 88+++15B2 0B 0C 01        defm 11, 12, 1
 89+++15B5
 90+++15B5 17 04 01        defm 23, 4, 1
 91+++15B8
 92+++15B8
 93+++15B8
 94+++15B8 FF               defm - 1
 95+++15B9
 96+++15B9 FE               defm -2
 97+++15BA
 98+++15BA              // hens
 99+++15BA
100+++15BA 56 88            defm 86, 136       ;sprite 2
101+++15BC D7 28            defm 215, 40        ;sprite 3
102+++15BE 97 88            defm 151, 136       ;sprite 4
103+++15C0 77 D8            defm 119, 216      ;sprite 5
104+++15C2 77 38            defm 119, 56       ;sprite 6
105+++15C4
106+++15C4 FD               defm -3
107+++15C5
108+++15C5 00 00            defw 0
109+++15C7 00 00            defw 0
110+++15C9
111+++15C9 FC               defm -4
# file closed: ./scripts/data/rom_6f/levels/level_8.asm
 11++ 15CA
 12++ 15CA
 13++ 15CA 00 10 A6 10  level_data:     defw level_1, level_2, level_3, level_4, level_5, level_6, level_7, level_8
 13++ 15CE 5B 11 35 12
 13++ 15D2 F6 12 C6 13
 13++ 15D6 6C 14 30 15
 14++ 15DA 00 10 A6 10  				defw level_1, level_2, level_3, level_4, level_5, level_6, level_7, level_8
 14++ 15DE 5B 11 35 12
 14++ 15E2 F6 12 C6 13
 14++ 15E6 6C 14 30 15
 15++ 15EA 00 10 A6 10  				defw level_1, level_2, level_3, level_4, level_5, level_6, level_7, level_8
 15++ 15EE 5B 11 35 12
 15++ 15F2 F6 12 C6 13
 15++ 15F6 6C 14 30 15
 16++ 15FA 00 10 A6 10  				defw level_1, level_2, level_3, level_4, level_5, level_6, level_7, level_8
 16++ 15FE 5B 11 35 12
 16++ 1602 F6 12 C6 13
 16++ 1606 6C 14 30 15
 17++ 160A 00 10 A6 10  				defw level_1, level_2, level_3, level_4, level_5, level_6, level_7, level_8
 17++ 160E 5B 11 35 12
 17++ 1612 F6 12 C6 13
 17++ 1616 6C 14 30 15
 18++ 161A
 19++ 161A
 20++ 161A 02 02 03 04  level_hens:		defm 2, 2, 3, 4, 4, 4, 3, 3
 20++ 161E 04 04 03 03
 21++ 1622 00 00 00 00  				defm 0, 0, 0, 0, 0, 0, 0, 0
 21++ 1626 00 00 00 00
 22++ 162A 02 02 03 04  				defm 2, 2, 3, 4, 4, 4, 3, 3
 22++ 162E 04 04 03 03
 23++ 1632 05 05 05 05  				defm 5, 5, 5, 5, 5, 5, 5, 5
 23++ 1636 05 05 05 05
 24++ 163A 05 05 05 05  				defm 5, 5, 5, 5, 5, 5, 5, 5
 24++ 163E 05 05 05 05
 25++ 1642
 26++ 1642
 27++ 1642 00 00 00 00  level_mother:	defm 0, 0, 0, 0, 0, 0, 0, 0
 27++ 1646 00 00 00 00
 28++ 164A 01 01 01 01  				defm 1, 1, 1, 1, 1, 1, 1, 1
 28++ 164E 01 01 01 01
 29++ 1652 00 00 00 00  				defm 0, 0, 0, 0, 0, 0, 0, 0
 29++ 1656 00 00 00 00
 30++ 165A 01 01 01 01  				defm 1, 1, 1, 1, 1, 1, 1, 1
 30++ 165E 01 01 01 01
 31++ 1662 01 01 01 01  				defm 1, 1, 1, 1, 1, 1, 1, 1
 31++ 1666 01 01 01 01
 32++ 166A
# file closed: ./scripts/data/rom_6f/level_base.asm
  3+  166A
  4+  166A                  include "scripts/data/rom_6f/sfx.asm"
# file opened: ./scripts/data/rom_6f/sfx.asm
  1++ 166A
  2++ 166A
  3++ 166A
  4++ 166A              EffectTable1:
  5++ 166A
  6++ 166A 72 20 FB 87      defm $72, $20, $fb, $87, $00, $02, $0F, $00
  6++ 166E 00 02 0F 00
  7++ 1672 73 30 FF 0C      defm $73, $30, $FF, $0c, $00, $0A, $1F, $00
  7++ 1676 00 0A 1F 00
  8++ 167A
  9++ 167A
 10++ 167A
 11++ 167A               //   0 : upper 3 bits = frequency shift, lower 3 bits = wave select
 12++ 167A              //1 : initial base frequency
 13++ 167A              //2 : frequency increment (added to base freq)
 14++ 167A              //3 : upper bit = reverse lower 7 bits = duration
 15++ 167A              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
 16++ 167A              //5 : repeat
 17++ 167A              //6 : upper 4 bits = volume adjust type lower 4 bits = volume
 18++ 167A              //7 : volume increment
 19++ 167A
 20++ 167A
 21++ 167A                                                  // 1=coin
 22++ 167A                 // set 1, (hl)                 // 2=background hum
 23++ 167A                                          // 3=background hum med
 24++ 167A                                              // 4=background hum high1
 25++ 167A                                              // 5=background him higher
 26++ 167A                                              // 6=background hum even higher
 27++ 167A                                              // 7=extra life ding
 28++ 167A
 29++ 167A                                              // 1=endless med chirps
 30++ 167A                                              // 2=endless low chirps
 31++ 167A                                              // 3=endless high chirps
 32++ 167A                                              // 4=four med chirps
 33++ 167A                                              // 5=rising tone endless
 34++ 167A                                              // 6=c64 space loop
 35++ 167A                                              // 7=long tone unused
 36++ 167A
 37++ 167A
 38++ 167A                                              // 1=med blip (good for key?)
 39++ 167A                                              // 2=eat ghost
 40++ 167A                                              // 3=quick rising bloop
 41++ 167A                                              // 4=died
 42++ 167A                                              // 5=rising tone endless
 43++ 167A                                              // 6=higher blip
 44++ 167A                                              // 7=nothing
 45++ 167A
 46++ 167A
 47++ 167A              EffectTable2:
 48++ 167A
 49++ 167A
 50++ 167A
 51++ 167A              EffectTable3:
 52++ 167A
 53++ 167A
 54++ 167A              // WALK
 55++ 167A
 56++ 167A 03               defm %00000011      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
 57++ 167B 11               defm %00010001      //1 : initial base frequency
 58++ 167C 67               defm %01100111   //2 : frequency increment (added to base freq)
 59++ 167D 03               defm %00000011      //3 : upper bit = reverse lower 7 bits = duration
 60++ 167E FF               defm -1              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
 61++ 167F 01               defm 1          //5 : repeat
 62++ 1680 13               defm %00010011      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
 63++ 1681 00               defm 0              //7 : volume increment
 64++ 1682
 65++ 1682
 66++ 1682              // OPEN DOOR
 67++ 1682
 68++ 1682 1C 70 8B 08      defm $1C, $70, $8B, $08, $00, $01, $06, $00
 68++ 1686 00 01 06 00
 69++ 168A
 70++ 168A
 71++ 168A              // JUMP
 72++ 168A
 73++ 168A 47               defm %01000111      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
 74++ 168B 00               defm %00000000      //1 : initial base frequency
 75++ 168C 03               defm %00000011   //2 : frequency increment (added to base freq)
 76++ 168D 0F               defm %00001111      //3 : upper bit = reverse lower 7 bits = duration
 77++ 168E 05               defm 5             //4 : frequency increment (added to initial base frequency). Used when repeat > 1
 78++ 168F 01               defm 1           //5 : repeat
 79++ 1690 19               defm %00011001      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
 80++ 1691 00               defm 0              //7 : volume increment
 81++ 1692
 82++ 1692
 83++ 1692              // CORN
 84++ 1692
 85++ 1692 1F               defm %00011111      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
 86++ 1693 13               defm %00010011      //1 : initial base frequency
 87++ 1694 A3               defm %10100011   //2 : frequency increment (added to base freq)
 88++ 1695 1F               defm %00011111      //3 : upper bit = reverse lower 7 bits = duration
 89++ 1696 FF               defm -1              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
 90++ 1697 01               defm 1           //5 : repeat
 91++ 1698 19               defm %00011001      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
 92++ 1699 00               defm 0              //7 : volume increment
 93++ 169A
 94++ 169A
 95++ 169A              // DEAD
 96++ 169A
 97++ 169A 06               defm %00000110
 98++ 169B 38               defm %00111000
 99++ 169C FE               defm %11111110
100++ 169D 10               defm %00010000 //3 : upper bit = reverse lower 7 bits = duration
101++ 169E F9               defm %11111001
102++ 169F 04               defm %00000100
103++ 16A0 0F               defm %00001111
104++ 16A1 FB               defm 251
105++ 16A2
106++ 16A2
107++ 16A2
108++ 16A2
109++ 16A2                  ;defm $26, $38, $FE, $14, $F9, $04, $0F, $fb
110++ 16A2
111++ 16A2                // EGG
112++ 16A2
113++ 16A2 3A 01 02 07      defm $3A, $01, $02, $07, $00, $01, $07, $FF
113++ 16A6 00 01 07 FF
114++ 16AA
115++ 16AA               // BLOOP HIGH
116++ 16AA
117++ 16AA 43               defm %01000011      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
118++ 16AB F1               defm %11110001      //1 : initial base frequency
119++ 16AC 67               defm %01100111   //2 : frequency increment (added to base freq)
120++ 16AD 03               defm %00000011      //3 : upper bit = reverse lower 7 bits = duration
121++ 16AE FF               defm -1              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
122++ 16AF 01               defm 1          //5 : repeat
123++ 16B0 13               defm %00010011      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
124++ 16B1 00               defm 0
125++ 16B2
126++ 16B2              // CLIMB
127++ 16B2
128++ 16B2 01               defm %00000001      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
129++ 16B3 0F               defm %00001111      //1 : initial base frequency
130++ 16B4 87               defm %10000111   //2 : frequency increment (added to base freq)
131++ 16B5 02               defm %00000010      //3 : upper bit = reverse lower 7 bits = duration
132++ 16B6 FE               defm -2              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
133++ 16B7 01               defm 1          //5 : repeat
134++ 16B8 13               defm %00010011      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
135++ 16B9 00               defm 0              //7 : volume increment
136++ 16BA
137++ 16BA
138++ 16BA
139++ 16BA
140++ 16BA              // 0
141++ 16BA
# file closed: ./scripts/data/rom_6f/sfx.asm
  5+  16BA                  include "scripts/data/rom_6f/music.asm"
# file opened: ./scripts/data/rom_6f/music.asm
  1++ 16BA
  2++ 16BA
  3++ 16BA 01 02 04 08  lookup_3bb0:    defm 01, 02, 04, 08, $10, $20, $40, $80
  3++ 16BE 10 20 40 80
  4++ 16C2
  5++ 16C2 00 57 5C 61  lookup_3bb8:    defm 00, $57, $5C, $61, $67, $6D, $74, $7B
  5++ 16C6 67 6D 74 7B
  6++ 16CA 82 8A 92 9A                  defm $82, $8A, $92, $9A, $A3, $AD, $B8, $C3
  6++ 16CE A3 AD B8 C3
  7++ 16D2
  8++ 16D2
  9++ 16D2
 10++ 16D2 EA 16 47 17  channel_1_3BC8: defw song_1_ch1, song_2_ch1, song_3_ch1, song_1_ch1
 10++ 16D6 A1 17 EA 16
 11++ 16DA 2E 17 47 17  channel_2_3BCC: defw song_1_ch2, song_2_ch1, song_3_ch1, song_1_ch1
 11++ 16DE A1 17 EA 16
 12++ 16E2 9E 17 9E 17  channel_3_3CD0: defw song_1_ch3, song_2_ch3, song_2_ch3, song_2_ch3
 12++ 16E6 9E 17 9E 17
 13++ 16EA
 14++ 16EA
 15++ 16EA
 16++ 16EA
 17++ 16EA              song_1_ch1:
 18++ 16EA
 19++ 16EA
 20++ 16EA F4 08 F2 02                  defm $F4, $08, $f2, $02, $f3, $0f, $f4, $06
 20++ 16EE F3 0F F4 06
 21++ 16F2
 22++ 16F2 F3 00                        defm $f3, $0
 23++ 16F4 B0                           defm note_length * 5 + pause
 24++ 16F5
 25++ 16F5
 26++ 16F5
 27++ 16F5
 28++ 16F5 F3 0C                        defm $f3, $0C
 29++ 16F7 43                           defm note_length * 2 + 3
 30++ 16F8 F3 00                        defm $f3, $0
 31++ 16FA 50                           defm note_length * 2 + pause
 32++ 16FB F3 0D                        defm $f3, $0D
 33++ 16FD 44                           defm note_length * 2 + 4
 34++ 16FE F3 00                        defm $f3, $0
 35++ 1700 50                           defm note_length * 2 + pause
 36++ 1701 F3 0E                        defm $f3, $0E
 37++ 1703 45                           defm note_length * 2 + 5
 38++ 1704 F3 00                        defm $f3, $0
 39++ 1706 50                           defm note_length * 2 + pause
 40++ 1707 F3 0E                        defm $f3, $0E
 41++ 1709 46                           defm note_length * 2 + 6
 42++ 170A F3 00                        defm $f3, $0
 43++ 170C 50                           defm note_length * 2 + pause
 44++ 170D
 45++ 170D F3 0C                         defm $f3, $0C
 46++ 170F 48                           defm note_length * 2 + 8
 47++ 1710 F3 00                        defm $f3, $0
 48++ 1712 50                           defm note_length * 2 + pause
 49++ 1713 F3 0D                        defm $f3, $0D
 50++ 1715 49                           defm note_length * 2 + 9
 51++ 1716 F3 00                        defm $f3, $0
 52++ 1718 50                           defm note_length * 2 + pause
 53++ 1719 F3 0E                        defm $f3, $0E
 54++ 171B 4A                           defm note_length * 2 + 10
 55++ 171C F3 00                        defm $f3, $0
 56++ 171E 50                           defm note_length * 2 + pause
 57++ 171F F3 0E                        defm $f3, $0E
 58++ 1721 4C                           defm note_length * 2 + 12
 59++ 1722 F3 00                        defm $f3, $0
 60++ 1724 50                           defm note_length * 2 + pause
 61++ 1725
 62++ 1725 F3 0E                        defm $f3, $0E
 63++ 1727 6D                           defm note_length * 3 + 13
 64++ 1728 F3 00                        defm $f3, $0
 65++ 172A 70                           defm note_length * 3 + pause
 66++ 172B
 67++ 172B
 68++ 172B
 69++ 172B
 70++ 172B
 71++ 172B FF 00 00                     defm $ff, 0, 0
 72++ 172E
 73++ 172E
 74++ 172E
 75++ 172E F1 00 F2 02  song_1_ch2:     defm $F1, $00, $F2, $02, $F3, $08, $F4, $03
 75++ 1732 F3 08 F4 03
 76++ 1736              song_1_loop_2:
 77++ 1736
 78++ 1736 F3 00                       defm $f3, $0
 79++ 1738 70                           defm note_length * 3 + pause
 80++ 1739
 81++ 1739 F3 08                        defm $f3, $08
 82++ 173B
 83++ 173B 8C                           defm note_length * 4 + 12
 84++ 173C 8B                           defm note_length * 4 + 11
 85++ 173D 6A                           defm note_length * 3 + 10
 86++ 173E 6A                            defm note_length * 3 + 10
 87++ 173F 89                           defm note_length * 4+ 9
 88++ 1740 A4                           defm note_length * 5 + 4
 89++ 1741
 90++ 1741 F3 00                        defm $f3, $0
 91++ 1743 D0                           defm note_length * 6 + pause
 92++ 1744 FF 00 00                     defm $ff, 0, 0
 93++ 1747
 94++ 1747
 95++ 1747
 96++ 1747
 97++ 1747
 98++ 1747
 99++ 1747
100++ 1747              song_2_ch1:
101++ 1747
102++ 1747
103++ 1747 F1 08 F2 02                  defm $F1, $08, $f2, $02, $f3, $0f, $f4, $06
103++ 174B F3 0F F4 06
104++ 174F
105++ 174F F3 00                        defm $f3, $0
106++ 1751 70                           defm note_length * 3 + pause
107++ 1752
108++ 1752 F3 0C                        defm $f3, $0C
109++ 1754 4C                           defm note_length * 2 + 12
110++ 1755 F3 00                        defm $f3, $0
111++ 1757 30                           defm note_length * 1 + pause
112++ 1758 F3 0D                        defm $f3, $0D
113++ 175A 4B                           defm note_length * 2 + 11
114++ 175B F3 00                        defm $f3, $0
115++ 175D 30                           defm note_length * 1 + pause
116++ 175E F3 0E                        defm $f3, $0E
117++ 1760 4A                           defm note_length * 2 + 10
118++ 1761 F3 00                        defm $f3, $0
119++ 1763 30                           defm note_length * 1 + pause
120++ 1764 F3 0E                        defm $f3, $0E
121++ 1766 A9                           defm note_length * 5 + 9
122++ 1767 F3 00                        defm $f3, $0
123++ 1769 70                           defm note_length * 3 + pause
124++ 176A
125++ 176A
126++ 176A
127++ 176A F3 0E                        defm $f3, $0E
128++ 176C 48                           defm note_length * 2 + 8
129++ 176D F3 00                        defm $f3, $0
130++ 176F 30                           defm note_length * 1 + pause
131++ 1770
132++ 1770
133++ 1770 F3 0F                        defm $f3, $0F
134++ 1772 47                           defm note_length * 2 + 7
135++ 1773 F3 00                        defm $f3, $0
136++ 1775 30                           defm note_length * 1 + pause
137++ 1776
138++ 1776 F3 0F                        defm $f3, $0F
139++ 1778 46                           defm note_length * 2+ 6
140++ 1779 F3 00                        defm $f3, $00
141++ 177B 30                           defm note_length * 1 + pause
142++ 177C
143++ 177C F3 0F                         defm $f3, $0F
144++ 177E A3                           defm note_length * 5+ 3
145++ 177F F3 00                        defm $f3, $00
146++ 1781 30                           defm note_length * 1 + pause
147++ 1782
148++ 1782
149++ 1782 FF 00 00                     defm $ff, 0, 0
150++ 1785
151++ 1785
152++ 1785
153++ 1785 F1 00 F2 02  song_2_ch2:     defm $F1, $00, $F2, $02, $F3, $08, $F4, $03
153++ 1789 F3 08 F4 03
154++ 178D              song_2_loop_2:
155++ 178D
156++ 178D F3 00                       defm $f3, $0
157++ 178F 70                           defm note_length * 3 + pause
158++ 1790
159++ 1790 F3 08                        defm $f3, $08
160++ 1792
161++ 1792 8C                           defm note_length * 4 + 12
162++ 1793 87                           defm note_length * 4 + 7
163++ 1794 6B                           defm note_length * 3 + 11
164++ 1795 6E                            defm note_length * 3 + 14
165++ 1796 83                           defm note_length * 4+ 3
166++ 1797 A4                           defm note_length * 5 + 4
167++ 1798 F3 00                        defm $f3, $0
168++ 179A D0                           defm note_length * 6 + pause
169++ 179B FF 00 00                     defm $ff, 0, 0
170++ 179E
171++ 179E
172++ 179E
173++ 179E
174++ 179E
175++ 179E
176++ 179E
177++ 179E
178++ 179E              song_1_ch3:
179++ 179E              song_2_ch3:
180++ 179E FF 00 00                     defm $FF, 0, 0
181++ 17A1
182++ 17A1
183++ 17A1              pause       equ 16
184++ 17A1
185++ 17A1
186++ 17A1              note_length equ 32
187++ 17A1
188++ 17A1
189++ 17A1              bass_vol    equ $4
190++ 17A1
191++ 17A1              song_3_ch1:
192++ 17A1
193++ 17A1
194++ 17A1 F1 04 F2 02                  defm $F1, $04, $f2, $02, $f3, $0f, $f4, $06
194++ 17A5 F3 0F F4 06
195++ 17A9
196++ 17A9              song_3_loop:
197++ 17A9
198++ 17A9
199++ 17A9              round_1:
200++ 17A9
201++ 17A9 F3 04                        defm $f3, bass_vol
202++ 17AB 83                           defm note_length * 4 + 3
203++ 17AC F3 00                        defm $f3, $0
204++ 17AE 90                           defm note_length * 4 + pause
205++ 17AF F3 04                        defm $f3, bass_vol
206++ 17B1 84                           defm note_length * 4 + 4
207++ 17B2 F3 00                        defm $f3, $0
208++ 17B4 90                           defm note_length * 4 + pause
209++ 17B5 F3 04                        defm $f3, bass_vol
210++ 17B7 8B                           defm note_length * 4 + 11
211++ 17B8 F3 00                        defm $f3, $0
212++ 17BA 90                           defm note_length * 4 + pause
213++ 17BB F3 04                        defm $f3, bass_vol
214++ 17BD 8C                           defm note_length * 4 + 12
215++ 17BE F3 00                        defm $f3, $0
216++ 17C0 90                           defm note_length * 4 + pause
217++ 17C1
218++ 17C1 F3 04                        defm $f3, bass_vol
219++ 17C3 83                           defm note_length * 4 + 3
220++ 17C4 F3 00                        defm $f3, $0
221++ 17C6 90                           defm note_length * 4 + pause
222++ 17C7 F3 04                        defm $f3, bass_vol
223++ 17C9 84                           defm note_length * 4 + 4
224++ 17CA F3 00                        defm $f3, $0
225++ 17CC 90                           defm note_length * 4 + pause
226++ 17CD F3 04                        defm $f3, bass_vol
227++ 17CF 8B                           defm note_length * 4 + 11
228++ 17D0 F3 00                        defm $f3, $0
229++ 17D2 90                           defm note_length * 4 + pause
230++ 17D3 F3 04                        defm $f3, bass_vol
231++ 17D5 8C                           defm note_length * 4 + 12
232++ 17D6                               ;defm $f3, $0
233++ 17D6 8B                           defm note_length * 4 + 11
234++ 17D7
235++ 17D7
236++ 17D7 F3 04                        defm $f3, bass_vol
237++ 17D9 83                           defm note_length * 4 + 3
238++ 17DA F3 00                        defm $f3, $0
239++ 17DC 90                           defm note_length * 4 + pause
240++ 17DD F3 04                        defm $f3, bass_vol
241++ 17DF 84                           defm note_length * 4 + 4
242++ 17E0 F3 00                        defm $f3, $0
243++ 17E2 90                           defm note_length * 4 + pause
244++ 17E3 F3 04                        defm $f3, bass_vol
245++ 17E5 8B                           defm note_length * 4 + 11
246++ 17E6 F3 00                         defm $f3, $0
247++ 17E8 90                           defm note_length * 4 + pause
248++ 17E9 F3 04                         defm $f3, bass_vol
249++ 17EB 8C                           defm note_length * 4 + 12
250++ 17EC F3 00                         defm $f3, $0
251++ 17EE 90                           defm note_length * 4 + pause
252++ 17EF
253++ 17EF F3 04                        defm $f3, bass_vol
254++ 17F1 83                           defm note_length * 4 + 3
255++ 17F2 F3 00                        defm $f3, $0
256++ 17F4 90                           defm note_length * 4 + pause
257++ 17F5 F3 04                        defm $f3, bass_vol
258++ 17F7 84                           defm note_length * 4 + 4
259++ 17F8 F3 00                        defm $f3, $0
260++ 17FA 90                           defm note_length * 4 + pause
261++ 17FB F3 04                        defm $f3, bass_vol
262++ 17FD 8C                           defm note_length * 4 + 12
263++ 17FE F3 00                         defm $f3, $0
264++ 1800 90                           defm note_length * 4 + pause
265++ 1801 F3 04                         defm $f3, bass_vol
266++ 1803 8B                           defm note_length * 4 + 11
267++ 1804 8A                           defm note_length * 4 + 10
268++ 1805
269++ 1805 F0                           defm $f0
270++ 1806 A1 17                        defw song_3_ch1
271++ 1808
272++ 1808 F1 00 F2 03  song_3_ch3:     defm $F1, $00, $F2, $03, $F3, $08, $F4, $04
272++ 180C F3 08 F4 04
273++ 1810 F0                           defm $F0
274++ 1811 1B 18                        defw song_3_loop_2
275++ 1813
276++ 1813 F1 00 F2 02  song_3_ch2:     defm $F1, $00, $F2, $02, $F3, $08, $F4, $03
276++ 1817 F3 08 F4 03
277++ 181B              song_3_loop_2:
278++ 181B
279++ 181B F3 00                        defm $f3, 0
280++ 181D 90 90 90...                  BLOCK 64, note_length * 4 + pause
281++ 185D 84                           defm note_length * 4 + 4
282++ 185E 83                           defm note_length * 4 + 3
283++ 185F 82                           defm note_length * 4 + 2
284++ 1860 C1                           defm note_length * 6 + 1
285++ 1861
286++ 1861 F3 00                        defm $f3, 0
287++ 1863 90                           defm note_length * 4 + pause
288++ 1864 F3 08                         defm $f3, 8
289++ 1866
290++ 1866 81                           defm note_length * 4 + 1
291++ 1867 82                           defm note_length * 4 + 2
292++ 1868 83                           defm note_length * 4 + 3
293++ 1869 C4                           defm note_length * 6 + 4
294++ 186A
295++ 186A F3 00                        defm $f3, 0
296++ 186C 90                           defm note_length * 4 + pause
297++ 186D F3 08                         defm $f3, 8
298++ 186F
299++ 186F
300++ 186F 84                           defm note_length * 4 + 4
301++ 1870 83                           defm note_length * 4 + 3
302++ 1871 82                           defm note_length * 4 + 2
303++ 1872 C1                           defm note_length * 6 + 1
304++ 1873
305++ 1873 F3 00                         defm $f3, 0
306++ 1875 90                           defm note_length * 4 + pause
307++ 1876 F3 08                         defm $f3, 8
308++ 1878
309++ 1878
310++ 1878 86                           defm note_length * 4 + 6
311++ 1879 85                           defm note_length * 4 + 5
312++ 187A 84                           defm note_length * 4 + 4
313++ 187B 83                           defm note_length * 4 + 3
314++ 187C
315++ 187C 90                           defm note_length * 4 + pause
316++ 187D 84                           defm note_length * 4 + 4
317++ 187E 83                           defm note_length * 4 + 3
318++ 187F
319++ 187F 90                           defm note_length * 4 + pause
320++ 1880
321++ 1880
322++ 1880 F1 00 F2 02                  defm $F1, $00, $F2, $02, $F3, $08, $F4, $02
322++ 1884 F3 08 F4 02
323++ 1888
324++ 1888 84                           defm note_length * 4 + 4
325++ 1889 83                           defm note_length * 4 + 3
326++ 188A 84                           defm note_length * 4 + 4
327++ 188B C1                           defm note_length * 6 + 1
328++ 188C
329++ 188C F3 00                        defm $f3, 0
330++ 188E 90                           defm note_length * 4 + pause
331++ 188F F3 08                         defm $f3, 8
332++ 1891
333++ 1891 81                           defm note_length * 4 + 1
334++ 1892 82                           defm note_length * 4 + 2
335++ 1893 83                           defm note_length * 4 + 3
336++ 1894 C2                           defm note_length * 6 + 2
337++ 1895
338++ 1895 F3 00                        defm $f3, 0
339++ 1897 90                           defm note_length * 4 + pause
340++ 1898 F3 08                         defm $f3, 8
341++ 189A
342++ 189A
343++ 189A 84                           defm note_length * 4 + 4
344++ 189B 83                           defm note_length * 4 + 3
345++ 189C 84                           defm note_length * 4 + 4
346++ 189D C1                           defm note_length * 6 + 1
347++ 189E
348++ 189E F3 00                         defm $f3, 0
349++ 18A0 90                           defm note_length * 4 + pause
350++ 18A1 F3 08                         defm $f3, 8
351++ 18A3
352++ 18A3
353++ 18A3 86                           defm note_length * 4 + 6
354++ 18A4 85                           defm note_length * 4 + 5
355++ 18A5 84                           defm note_length * 4 + 4
356++ 18A6 83                           defm note_length * 4 + 3
357++ 18A7
358++ 18A7 90                           defm note_length * 4 + pause
359++ 18A8 84                           defm note_length * 4 + 4
360++ 18A9 83                           defm note_length * 4 + 3
361++ 18AA
362++ 18AA F3 00                         defm $f3, 0
363++ 18AC 90                           defm note_length * 4 + pause
364++ 18AD
365++ 18AD
366++ 18AD
367++ 18AD
368++ 18AD
369++ 18AD F0                           defm $f0
370++ 18AE 1B 18                        defw song_3_loop_2
# file closed: ./scripts/data/rom_6f/music.asm
  6+  18B0                              //    x   y   w
  7+  18B0
  8+  18B0
  9+  18B0
 10+  18B0
 11+  18B0
 12+  18B0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 13+  18B0              ; some messages to display
 14+  18B0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15+  18B0
 16+  18B0
 17+  18B0 00 00 01 00  row_starts:     defw row_0, row_1, row_2
 17+  18B4 02 00
 18+  18B6
 19+  18B6
 20+  18B6
 21+  18B6              tile_column_to_sprite_x:
 22+  18B6
 23+  18B6 ED E5 DD D5                 defm 237,229,221,213,205,197,189,181,173,165,157,149,141,133,125,117,109,101,93,85,77,69,61,53,45,37,29,21
 23+  18BA CD C5 BD B5
 23+  18BE AD A5 9D 95
 23+  18C2 8D 85 7D 75
 23+  18C6 6D 65 5D 55
 23+  18CA 4D 45 3D 35
 23+  18CE 2D 25 1D 15
 24+  18D2
 25+  18D2
 26+  18D2              tile_row_to_sprite_y:
 27+  18D2
 28+  18D2 FF F8 F0 E8                  defm 255,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8
 28+  18D6 E0 D8 D0 C8
 28+  18DA C0 B8 B0 A8
 28+  18DE A0 98 90 88
 28+  18E2 80 78 70 68
 28+  18E6 60 58 50 48
 28+  18EA 40 38 30 28
 28+  18EE 20 18 10 08
 29+  18F2
 30+  18F2
 31+  18F2 A0 03 80 03  tile_column_lookup:    defw column_0, column_1, column_2, column_3, column_4, column_5, column_6, column_7
 31+  18F6 60 03 40 03
 31+  18FA 20 03 00 03
 31+  18FE E0 02 C0 02
 32+  1902 A0 02 80 02                         defw column_8, column_9, column_10, column_11, column_12, column_13, column_14, column_15
 32+  1906 60 02 40 02
 32+  190A 20 02 00 02
 32+  190E E0 01 C0 01
 33+  1912 A0 01 80 01                         defw column_16, column_17, column_18, column_19, column_20, column_21, column_22, column_23
 33+  1916 60 01 40 01
 33+  191A 20 01 00 01
 33+  191E E0 00 C0 00
 34+  1922 A0 00 80 00                         defw column_24, column_25, column_26, column_27
 34+  1926 60 00 40 00
 35+  192A
 36+  192A
 37+  192A              sprite_column_lookup:
 38+  192A
 39+  192A 1E 1E 1E 1E          defm 30,30,30,30,30,30,29,29,29,29,29,29,29,29,28,28,28,28,28,28,28,28,27,27,27,27,27,27,27,27,26,26,26,26,26,26,26,26,25,25,25,25,25,25,25,25,24,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,22,22,22,22,22,22,22,22,21,21,21,21,21,21,21,21,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,19,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,14,14
 39+  192E 1E 1E 1D 1D
 39+  1932 1D 1D 1D 1D
 39+  1936 1D 1D 1C 1C
 39+  193A 1C 1C 1C 1C
 39+  193E 1C 1C 1B 1B
 39+  1942 1B 1B 1B 1B
 39+  1946 1B 1B 1A 1A
 39+  194A 1A 1A 1A 1A
 39+  194E 1A 1A 19 19
 39+  1952 19 19 19 19
 39+  1956 19 19 18 18
 39+  195A 18 18 18 18
 39+  195E 18 18 17 17
 39+  1962 17 17 17 17
 39+  1966 17 17 16 16
 39+  196A 16 16 16 16
 39+  196E 16 16 15 15
 39+  1972 15 15 15 15
 39+  1976 15 15 14 14
 39+  197A 14 14 14 14
 39+  197E 14 14 13 13
 39+  1982 13 13 13 13
 39+  1986 13 13 12 12
 39+  198A 12 12 12 12
 39+  198E 12 12 11 11
 39+  1992 11 11 11 11
 39+  1996 11 11 10 10
 39+  199A 10 10 10 10
 39+  199E 10 10 0F 0F
 39+  19A2 0F 0F 0F 0F
 39+  19A6 0F 0F 0E 0E
 40+  19AA 0E 0E 0E 0E          defm 14,14,14,14,14,14,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-2,-2
 40+  19AE 0E 0E 0D 0D
 40+  19B2 0D 0D 0D 0D
 40+  19B6 0D 0D 0C 0C
 40+  19BA 0C 0C 0C 0C
 40+  19BE 0C 0C 0B 0B
 40+  19C2 0B 0B 0B 0B
 40+  19C6 0B 0B 0A 0A
 40+  19CA 0A 0A 0A 0A
 40+  19CE 0A 0A 09 09
 40+  19D2 09 09 09 09
 40+  19D6 09 09 08 08
 40+  19DA 08 08 08 08
 40+  19DE 08 08 07 07
 40+  19E2 07 07 07 07
 40+  19E6 07 07 06 06
 40+  19EA 06 06 06 06
 40+  19EE 06 06 05 05
 40+  19F2 05 05 05 05
 40+  19F6 05 05 04 04
 40+  19FA 04 04 04 04
 40+  19FE 04 04 03 03
 40+  1A02 03 03 03 03
 40+  1A06 03 03 02 02
 40+  1A0A 02 02 02 02
 40+  1A0E 02 02 01 01
 40+  1A12 01 01 01 01
 40+  1A16 01 01 00 00
 40+  1A1A 00 00 00 00
 40+  1A1E 00 00 FF FF
 40+  1A22 FF FF FF FF
 40+  1A26 FF FF FE FE
 41+  1A2A
 42+  1A2A              sprite_row_lookup:
 43+  1A2A
 44+  1A2A 00 00 00 00      defm 0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,31,31,31,31,31,31,30,30,30,30,30,30,30,30,29,29,29,29,29,29,29,29,28,28,28,28,28,28,28,28,27,27,27,27,27,27,27,27,26,26,26,26,26,26,26,26,25,25,25,25,25,25,25,25,24,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,22,22,22,22,22,22,22,22,21,21,21,21,21,21,21,21,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,19,18,18,18,18,18,18,18,18,17,17
 44+  1A2E 00 00 00 00
 44+  1A32 00 00 00 00
 44+  1A36 00 00 1F 1F
 44+  1A3A 1F 1F 1F 1F
 44+  1A3E 1F 1F 1E 1E
 44+  1A42 1E 1E 1E 1E
 44+  1A46 1E 1E 1D 1D
 44+  1A4A 1D 1D 1D 1D
 44+  1A4E 1D 1D 1C 1C
 44+  1A52 1C 1C 1C 1C
 44+  1A56 1C 1C 1B 1B
 44+  1A5A 1B 1B 1B 1B
 44+  1A5E 1B 1B 1A 1A
 44+  1A62 1A 1A 1A 1A
 44+  1A66 1A 1A 19 19
 44+  1A6A 19 19 19 19
 44+  1A6E 19 19 18 18
 44+  1A72 18 18 18 18
 44+  1A76 18 18 17 17
 44+  1A7A 17 17 17 17
 44+  1A7E 17 17 16 16
 44+  1A82 16 16 16 16
 44+  1A86 16 16 15 15
 44+  1A8A 15 15 15 15
 44+  1A8E 15 15 14 14
 44+  1A92 14 14 14 14
 44+  1A96 14 14 13 13
 44+  1A9A 13 13 13 13
 44+  1A9E 13 13 12 12
 44+  1AA2 12 12 12 12
 44+  1AA6 12 12 11 11
 45+  1AAA 11 11 11 11          defm 17,17,17,17,17,17,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,1,1
 45+  1AAE 11 11 10 10
 45+  1AB2 10 10 10 10
 45+  1AB6 10 10 0F 0F
 45+  1ABA 0F 0F 0F 0F
 45+  1ABE 0F 0F 0E 0E
 45+  1AC2 0E 0E 0E 0E
 45+  1AC6 0E 0E 0D 0D
 45+  1ACA 0D 0D 0D 0D
 45+  1ACE 0D 0D 0C 0C
 45+  1AD2 0C 0C 0C 0C
 45+  1AD6 0C 0C 0B 0B
 45+  1ADA 0B 0B 0B 0B
 45+  1ADE 0B 0B 0A 0A
 45+  1AE2 0A 0A 0A 0A
 45+  1AE6 0A 0A 09 09
 45+  1AEA 09 09 09 09
 45+  1AEE 09 09 08 08
 45+  1AF2 08 08 08 08
 45+  1AF6 08 08 07 07
 45+  1AFA 07 07 07 07
 45+  1AFE 07 07 06 06
 45+  1B02 06 06 06 06
 45+  1B06 06 06 05 05
 45+  1B0A 05 05 05 05
 45+  1B0E 05 05 04 04
 45+  1B12 04 04 04 04
 45+  1B16 04 04 03 03
 45+  1B1A 03 03 03 03
 45+  1B1E 03 03 02 02
 45+  1B22 02 02 02 02
 45+  1B26 02 02 01 01
 46+  1B2A
 47+  1B2A
 48+  1B2A              valid_colours:
 49+  1B2A
 50+  1B2A 01 03 05 07          defm 1, 3, 5, 7, 9, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25
 50+  1B2E 09 0E 0F 10
 50+  1B32 11 12 14 15
 50+  1B36 16 17 18 19
 51+  1B3A
 52+  1B3A
 53+  1B3A
 54+  1B3A              attract_mode_data:
 55+  1B3A
 56+  1B3A 22 50                defm CPU_LEFT, 80
 57+  1B3C 44 3C                defm CPU_RIGHT, 60
 58+  1B3E 11 1E                defm CPU_UP, 30
 59+  1B40 44 B4                defm CPU_RIGHT, 180
 60+  1B42 22 A0                defm CPU_LEFT, 160
 61+  1B44 11 1E                defm CPU_UP, 30
 62+  1B46 22 28                defm CPU_LEFT, 40
 63+  1B48 11 1E                defm CPU_UP, 30
 64+  1B4A 22 28                defm CPU_LEFT, 40
 65+  1B4C 44 22                defm CPU_RIGHT, 34
 66+  1B4E 11 1E                defm CPU_UP, 30
 67+  1B50 44 28                defm CPU_RIGHT, 40
 68+  1B52 11 64                defm CPU_UP, 100
 69+  1B54 22 0A                defm CPU_LEFT,10
 70+  1B56 44 28                defm CPU_RIGHT, 40
 71+  1B58 00 01                defm CPU_FIRE, 1
 72+  1B5A 44 32                defm CPU_RIGHT,50
 73+  1B5C
 74+  1B5C FF                   defm 255
 75+  1B5D
 76+  1B5D
 77+  1B5D
 78+  1B5D
 79+  1B5D
# file closed: scripts/data/rom_6f/rom_6f.asm
 97   1B5D
 98   1B5D               savebin "C:/Dropbox/Dropbox/Channel F/Chuckie Egg/MAME/roms/ponpoko/ppokoj1.bin",$0000, $1000
 99   1B5D               savebin "C:/Dropbox/Dropbox/Channel F/Chuckie Egg/MAME/roms/ponpoko/ppokoj2.bin",$1000, $1000
100   1B5D               savebin "C:/Dropbox/Dropbox/Channel F/Chuckie Egg/MAME/roms/ponpoko/ppokoj3.bin",$2000, $1000
101   1B5D               savebin "C:/Dropbox/Dropbox/Channel F/Chuckie Egg/MAME/roms/ponpoko/ppokoj4.bin",$3000, $1000
102   1B5D
103   1B5D               ; savebin "C:/Users/NickSherman/Dropbox/Channel F/Chuckie Egg/MAME/roms/ponpoko/ppokoj1.bin",$0000, $1000
104   1B5D               ; savebin "C:/Users/NickSherman/Dropbox/Channel F/Chuckie Egg/MAME/roms/ponpoko/ppokoj2.bin",$1000, $1000
105   1B5D               ; savebin "C:/Users/NickSherman/Dropbox/Channel F/Chuckie Egg/MAME/roms/ponpoko/ppokoj3.bin",$2000, $1000
106   1B5D               ; savebin "C:/Users/NickSherman/Dropbox/Channel F/Chuckie Egg/MAME/roms/ponpoko/ppokoj4.bin",$3000, $1000
107   1B5D              ;
108   1B5D
# file closed: main.asm 
